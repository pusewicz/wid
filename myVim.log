
chdir(/Applications/MacVim.app/Contents/Resources/vim)
fchdir() to previous dir
sourcing "$VIM/vimrc"
finished sourcing $VIM/vimrc
chdir(/Users/piotr)
fchdir() to previous dir
could not source "$HOME/.vimrc"
chdir(/Users/piotr/.vim)
fchdir() to previous dir
could not source "~/.vim/vimrc"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
sourcing "~/.config/vim/vimrc"
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 13: sourcing "/Users/piotr/.config/vim/init/options.vim"
Reading spell file "/Applications/MacVim.app/Contents/Resources/vim/runtime/spell/en.utf-8.spl"
not found in 'runtimepath': "spell/en.utf-8.add.spl"
not found in 'runtimepath': "spell/en.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 106: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/json.vim"
finished sourcing /Users/piotr/.config/vim/after/ftdetect/json.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/ruby.vim"
finished sourcing /Users/piotr/.config/vim/after/ftdetect/ruby.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/todo.vim"
finished sourcing /Users/piotr/.config/vim/after/ftdetect/todo.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/yaml.vim"
finished sourcing /Users/piotr/.config/vim/after/ftdetect/yaml.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 3197: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload)
fchdir() to previous dir
line 249: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/init/options.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 106: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/init/options.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 106: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/indent.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/indent.vim
continuing in /Users/piotr/.config/vim/init/options.vim
finished sourcing /Users/piotr/.config/vim/init/options.vim
continuing in /Users/piotr/.config/vim/vimrc
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/init/plugins.vim"
not found in 'packpath': "pack/*/start/matchit"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/matchit)
fchdir() to previous dir
chdir(/Applications/MacVim.app/Contents/Resources/vim/vimfiles)
fchdir() to previous dir
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/init/ale.vim"
not found in 'packpath': "pack/*/start/ale"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 215: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/balloon.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/balloon.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 223: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/code_action.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/code_action.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 371: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/events.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/events.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
continuing in /Users/piotr/.config/vim/init/ale.vim
finished sourcing /Users/piotr/.config/vim/init/ale.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 44: sourcing "/Users/piotr/.config/vim/init/lsp.vim"
not found in 'packpath': "pack/*/start/lsp"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/options.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/options.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
continuing in /Users/piotr/.config/vim/init/lsp.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 13: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/util.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/util.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/buffer.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/buffer.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/textedit.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/textedit.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/capabilities.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/capabilities.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/offset.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/offset.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 17: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/selection.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/selection.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 11: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/outline.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/outline.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 20: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/snippet.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/snippet.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 10: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codeaction.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codeaction.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 21: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/hover.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/hover.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 22: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/signature.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/signature.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 24: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codelens.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codelens.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 25: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/callhierarchy.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/callhierarchy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 26: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/typehierarchy.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/typehierarchy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 27: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/inlayhints.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/inlayhints.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 28: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/semantichighlight.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/semantichighlight.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim
continuing in LspAddServer
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/init/lsp.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 45: sourcing "/Users/piotr/.config/vim/init/vimcomplete.vim"
not found in 'packpath': "pack/*/start/friendly-snippets"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
not found in 'packpath': "pack/*/start/vim-vsnip"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin)
fchdir() to previous dir
line 4: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload)
fchdir() to previous dir
line 10: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/vsnip.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/vsnip.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim
continuing in <SNR>49__get_module
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip.vim
continuing in vital#_vsnip#VS#LSP#Position#import
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim
continuing in <SNR>49__get_module
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim
continuing in <SNR>49__get_module
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim
continuing in <SNR>49__get_module
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim
continuing in <SNR>49__get_module
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim
continuing in <SNR>49__get_module
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
not found in 'packpath': "pack/*/start/vim-vsnip-integ"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
not found in 'packpath': "pack/*/start/vimcomplete"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/completor.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/completor.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tag.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tag.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vimscript.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vimscript.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/abbrev.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/abbrev.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/path.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/path.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/dictionary.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/dictionary.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vsnip.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vsnip.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/lsp.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/lsp.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/buffer.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/buffer.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/omnifunc.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/omnifunc.vim
continuing in <lambda>45
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tmux.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tmux.vim
continuing in <lambda>45
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/init/vimcomplete.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 46: sourcing "/Users/piotr/.config/vim/init/vimsuggest.vim"
not found in 'packpath': "pack/*/start/vimsuggest"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim
continuing in /Users/piotr/.config/vim/init/vimsuggest.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 27: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/popup.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/popup.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim
continuing in VimSuggestSetOptions
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/search.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/search.vim
continuing in VimSuggestSetOptions
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 21: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/fuzzy.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/fuzzy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 22: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/exec.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/exec.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
continuing in vimsuggest#cmd#Teardown
finished sourcing /Users/piotr/.config/vim/init/vimsuggest.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 47: sourcing "/Users/piotr/.config/vim/init/vsnip.vim"
finished sourcing /Users/piotr/.config/vim/init/vsnip.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 48: sourcing "/Users/piotr/.config/vim/init/netrw.vim"
finished sourcing /Users/piotr/.config/vim/init/netrw.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 49: sourcing "/Users/piotr/.config/vim/init/lightline.vim"
finished sourcing /Users/piotr/.config/vim/init/lightline.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
finished sourcing /Users/piotr/.config/vim/init/plugins.vim
continuing in /Users/piotr/.config/vim/vimrc
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/init/remap.vim"
not found in 'packpath': "pack/*/start/scope.vim"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim
continuing in /Users/piotr/.config/vim/init/remap.vim
finished sourcing /Users/piotr/.config/vim/init/remap.vim
continuing in /Users/piotr/.config/vim/vimrc
chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 16: sourcing "/Users/piotr/.config/vim/init/colorscheme.vim"
not found in 'packpath': "pack/*/start/nightfox.nvim"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin)
fchdir() to previous dir
line 16: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim"
finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists)
fchdir() to previous dir
line 17: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors)
fchdir() to previous dir
line 17: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
Executing ColorScheme Autocommands for "*"
autocommand call ToggleBatEnvVar()

finished sourcing /Users/piotr/.config/vim/init/colorscheme.vim
continuing in /Users/piotr/.config/vim/vimrc
finished sourcing ~/.config/vim/vimrc
could not source ".vimrc"
could not source ".exrc"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim"
finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/matchit.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/matchit.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin/pairs.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin/pairs.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin/fastfold.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin/fastfold.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin/lightline.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin/lightline.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin/tagalong.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin/tagalong.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin/closetag.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin/closetag.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin/commentary.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin/commentary.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin/eunuch.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin/eunuch.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect/fugitive.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect/fugitive.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect/git.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect/git.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 65: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/utility.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/utility.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 108: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/highlight.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/highlight.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin/health.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin/health.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase)
fchdir() to previous dir
line 19: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin/projectionist.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin/projectionist.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin/rails.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin/rails.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin/rhubarb.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin/rhubarb.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim"
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=     noreadonly            smartindent         syntax=             undolevels=1000
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make        relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline          norightleft           softtabstop=2       tagcase=followic    vartabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable          scroll=0          nospell               tagfunc=            virtualedit=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified          noscrollbind          spellfile=          termwinkey=         wincolor=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=      nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta             quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t,i
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  nrformats=bin,octal,hex
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  backspace=indent,eol,start
	Last set from /Applications/MacVim.app/Contents/Resources/vim/vimrc line 10
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=     noreadonly            smartindent         syntax=             undolevels=1000
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make        relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline          norightleft           softtabstop=2       tagcase=followic    vartabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable          scroll=0          nospell               tagfunc=            virtualedit=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified          noscrollbind          spellfile=          termwinkey=         wincolor=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=      nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta             quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  nrformats=bin,octal,hex
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
nosmarttab
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
noincsearch
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  laststatus=2
	Last set from ~/.config/vim/init/options.vim line 99
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
noruler
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  wildmenu
	Last set from ~/.config/vim/init/options.vim line 71
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=0         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  scrolloff=0
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  sidescroll=0
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=0   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  sidescrolloff=0
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=2   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnb
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags,tags,.git/tags
  termwinscroll=10000
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
	Last set from ~/.config/vim/init/options.vim line 40
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
noautoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=2   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnbj
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags;,tags,.git/tags
  termwinscroll=10000
noautoread
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
  autoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=2   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnbj
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags;,tags,.git/tags
  termwinscroll=10000
  history=50
	Last set from /Applications/MacVim.app/Contents/Resources/vim/vimrc line 6
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
  autoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=2   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnbj
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags;,tags,.git/tags
  termwinscroll=10000
  tabpagemax=10
--- Global option values ---
noarabic            nocindent           nodiff              nofoldenable          includeexpr=        makeencoding=       quoteescape=\       signcolumn=yes      synmaxcol=512     noundofile
  autoindent          cinoptions=       noendoffile           foldexpr=0          indentexpr=         makeprg=make      noreadonly            smartindent         syntax=             undolevels=1000
  autoread            colorcolumn=72      endofline           foldignore=#      noinfercase           modeline            relativenumber    nosmoothscroll        tabstop=2           varsofttabstop=
  backupcopy=auto     completefunc=       equalprg=           foldlevel=0         key=                modifiable        norightleft           softtabstop=2       tagcase=followic    vartabstop=
nobinary              concealcursor=      expandtab           foldmethod=indent   keymap=           nomodified            scroll=0          nospell               tagfunc=            virtualedit=
nobomb                conceallevel=0      fileencoding=       foldminlines=1      keywordprg=man      nrformats=bin,hex noscrollbind          spellfile=          termwinkey=         wincolor=
  breakindent         copyindent          fileformat=unix     foldnestmax=3     nolinebreak           number              scrolloff=1         spelllang=en        termwinsize=      nowinfixbuf
  breakindentopt=   nocursorbind          filetype=           formatexpr=       nolisp                numberwidth=4       shiftwidth=2        spelloptions=     notextmode          nowinfixheight
  bufhidden=        nocursorcolumn        fillchars=vert:│  formatprg=          lispoptions=        omnifunc=         noshortname           statusline=         textwidth=0       nowinfixwidth
  buflisted         nocursorline          fixendofline        iminsert=0          list              nopreserveindent      showbreak=          suffixesadd=        thesaurus=        nowrap
  buftype=            dictionary=         foldcolumn=0        imsearch=-1       nomacmeta           nopreviewwindow       sidescrolloff=2   noswapfile            thesaurusfunc=      wrapmargin=0
  balloonexpr=ale#balloon#Expr()
  cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
  cinscopedecls=public,protected,private
  cinwords=if,else,while,do,for,switch
  comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
  commentstring=/* %s */
  complete=.,w,b,u,t
  completeopt=menu,menuone,preview,noinsert,noselect,fuzzy
  cryptmethod=blowfish2
  cursorlineopt=both
  define=^\s*#\s*define
  errorformat=%*[^"]"%f"%*\D%l: %m,"%f"%*\D%l: %m,%-Gg%\?make[%*\d]: *** [%f:%l:%m,%-Gg%\?make: *** [%f:%l:%m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,"%f"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[`']%f',%DMaking %*\a in %f,%f|%l| %m
  foldmarker={{{,}}}
  foldtext=foldtext()
  formatlistpat=^\s*\d\+[\]:.)}\t ]\s*
  formatoptions=tcrqnbj
  grepprg=rg --vimgrep --smart-case --follow --no-heading
  include=^\s*#\s*include
  indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
  iskeyword=@,48-57,_,192-255
  lispwords=defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object
  listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:·
  matchpairs=(:),{:},[:]
  path=.,/usr/include,,
  rightleftcmd=search
  spellcapcheck=[.?!]\_[\])'"^I ]\+
  tags=./tags;,tags,.git/tags
  termwinscroll=10000
  langremap
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 137: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 20: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists)
fchdir() to previous dir
line 20: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors)
fchdir() to previous dir
line 20: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 9: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim
continuing in /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
Executing ColorScheme Autocommands for "*"
autocommand call ToggleBatEnvVar()

Executing ColorScheme Autocommands for "*"
autocommand if !has('vim_starting') || expand('<amatch>') !=# 'macvim' | call lightline#update() | call lightline#highlight() | endif

chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload)
fchdir() to previous dir
line 0: sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline.vim
continuing in ColorScheme Autocommands for "*"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/fugitive.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/fugitive.vim
continuing in FugitiveHead
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline)
fchdir() to previous dir
line 37: sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/tab.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/tab.vim
continuing in lightline#init
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline)
fchdir() to previous dir
line 8: sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme.vim
continuing in /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim
finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim
continuing in lightline#colorscheme
not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing ColorScheme Autocommands for "*"
autocommand call gitgutter#highlight#define_highlights()

Executing ColorScheme Autocommands for "*"
autocommand call s:on_refresh_event()

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2)
fchdir() to previous dir
line 26: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2/scraper.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2/scraper.vim
continuing in <SNR>125_on_refresh_event
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/utils.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/utils.vim
continuing in hexokinase#v2#scraper#on
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin)
fchdir() to previous dir
line 165: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/man.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/man.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin/sleuth.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin/sleuth.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload)
fchdir() to previous dir
line 52: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/test.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/test.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin/vinegar.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin/vinegar.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect/kdl.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect/kdl.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect/modulemap.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect/modulemap.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect/nim.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect/nim.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin/swift.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin/swift.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect/swift.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect/swift.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect/handlebars.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect/handlebars.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/flow.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/flow.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/javascript.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/javascript.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect/mdx.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect/mdx.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/handlebars.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/handlebars.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/mustache.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/mustache.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby_extra.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby_extra.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect/slim.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect/slim.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescript.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescript.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescriptreact.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescriptreact.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect/zig.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect/zig.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/detection.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/detection.vim
continuing in vsnip_integ#integration#attach
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration/yegappan_lsp.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration/yegappan_lsp.vim
continuing in vsnip_integ#integration#attach
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim
chdir(/Users/piotr/.config/vim/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/after/plugin/test.vim"
finished sourcing /Users/piotr/.config/vim/after/plugin/test.vim
chdir(/Users/piotr/.config/vim/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/after/plugin/vim-markdown.vim"
finished sourcing /Users/piotr/.config/vim/after/plugin/vim-markdown.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
sourcing "$VIMRUNTIME/menu.vim"
finished sourcing $VIMRUNTIME/menu.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim)
fchdir() to previous dir
sourcing "$VIM/gvimrc"
finished sourcing $VIM/gvimrc
chdir(/Users/piotr)
fchdir() to previous dir
could not source "$HOME/.gvimrc"
chdir(/Users/piotr/.vim)
fchdir() to previous dir
could not source "~/.vim/gvimrc"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
sourcing "~/.config/vim/gvimrc"
finished sourcing ~/.config/vim/gvimrc
could not source ".gvimrc"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.png"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
not found in 'runtimepath': "bitmaps/EnterFullScreen.png"
not found in 'runtimepath': "bitmaps/EnterFullScreen.bmp"
not found in 'runtimepath': "bitmaps/EnterFullScreen.ico"
not found in 'runtimepath': "bitmaps/EnterFullScreen.icns"
not found in 'runtimepath': "bitmaps/EnterFullScreen.jpeg"
not found in 'runtimepath': "bitmaps/EnterFullScreen.jpg"
not found in 'runtimepath': "bitmaps/EnterFullScreen.heic"
not found in 'runtimepath': "bitmaps/EnterFullScreen.webp"
not found in 'runtimepath': "bitmaps/-characterpicker-.png"
not found in 'runtimepath': "bitmaps/-characterpicker-.bmp"
not found in 'runtimepath': "bitmaps/-characterpicker-.ico"
not found in 'runtimepath': "bitmaps/-characterpicker-.icns"
not found in 'runtimepath': "bitmaps/-characterpicker-.jpeg"
not found in 'runtimepath': "bitmaps/-characterpicker-.jpg"
not found in 'runtimepath': "bitmaps/-characterpicker-.heic"
not found in 'runtimepath': "bitmaps/-characterpicker-.webp"
not found in 'runtimepath': "bitmaps/Open.png"
not found in 'runtimepath': "bitmaps/Open.bmp"
not found in 'runtimepath': "bitmaps/Open.ico"
not found in 'runtimepath': "bitmaps/Open.icns"
not found in 'runtimepath': "bitmaps/Open.jpeg"
not found in 'runtimepath': "bitmaps/Open.jpg"
not found in 'runtimepath': "bitmaps/Open.heic"
not found in 'runtimepath': "bitmaps/Open.webp"
not found in 'runtimepath': "bitmaps/Save.png"
not found in 'runtimepath': "bitmaps/Save.bmp"
not found in 'runtimepath': "bitmaps/Save.ico"
not found in 'runtimepath': "bitmaps/Save.icns"
not found in 'runtimepath': "bitmaps/Save.jpeg"
not found in 'runtimepath': "bitmaps/Save.jpg"
not found in 'runtimepath': "bitmaps/Save.heic"
not found in 'runtimepath': "bitmaps/Save.webp"
not found in 'runtimepath': "bitmaps/SaveAll.png"
not found in 'runtimepath': "bitmaps/SaveAll.bmp"
not found in 'runtimepath': "bitmaps/SaveAll.ico"
not found in 'runtimepath': "bitmaps/SaveAll.icns"
not found in 'runtimepath': "bitmaps/SaveAll.jpeg"
not found in 'runtimepath': "bitmaps/SaveAll.jpg"
not found in 'runtimepath': "bitmaps/SaveAll.heic"
not found in 'runtimepath': "bitmaps/SaveAll.webp"
not found in 'runtimepath': "bitmaps/Print.png"
not found in 'runtimepath': "bitmaps/Print.bmp"
not found in 'runtimepath': "bitmaps/Print.ico"
not found in 'runtimepath': "bitmaps/Print.icns"
not found in 'runtimepath': "bitmaps/Print.jpeg"
not found in 'runtimepath': "bitmaps/Print.jpg"
not found in 'runtimepath': "bitmaps/Print.heic"
not found in 'runtimepath': "bitmaps/Print.webp"
not found in 'runtimepath': "bitmaps/-sep1-.png"
not found in 'runtimepath': "bitmaps/-sep1-.bmp"
not found in 'runtimepath': "bitmaps/-sep1-.ico"
not found in 'runtimepath': "bitmaps/-sep1-.icns"
not found in 'runtimepath': "bitmaps/-sep1-.jpeg"
not found in 'runtimepath': "bitmaps/-sep1-.jpg"
not found in 'runtimepath': "bitmaps/-sep1-.heic"
not found in 'runtimepath': "bitmaps/-sep1-.webp"
not found in 'runtimepath': "bitmaps/Undo.png"
not found in 'runtimepath': "bitmaps/Undo.bmp"
not found in 'runtimepath': "bitmaps/Undo.ico"
not found in 'runtimepath': "bitmaps/Undo.icns"
not found in 'runtimepath': "bitmaps/Undo.jpeg"
not found in 'runtimepath': "bitmaps/Undo.jpg"
not found in 'runtimepath': "bitmaps/Undo.heic"
not found in 'runtimepath': "bitmaps/Undo.webp"
not found in 'runtimepath': "bitmaps/Redo.png"
not found in 'runtimepath': "bitmaps/Redo.bmp"
not found in 'runtimepath': "bitmaps/Redo.ico"
not found in 'runtimepath': "bitmaps/Redo.icns"
not found in 'runtimepath': "bitmaps/Redo.jpeg"
not found in 'runtimepath': "bitmaps/Redo.jpg"
not found in 'runtimepath': "bitmaps/Redo.heic"
not found in 'runtimepath': "bitmaps/Redo.webp"
not found in 'runtimepath': "bitmaps/-sep2-.png"
not found in 'runtimepath': "bitmaps/-sep2-.bmp"
not found in 'runtimepath': "bitmaps/-sep2-.ico"
not found in 'runtimepath': "bitmaps/-sep2-.icns"
not found in 'runtimepath': "bitmaps/-sep2-.jpeg"
not found in 'runtimepath': "bitmaps/-sep2-.jpg"
not found in 'runtimepath': "bitmaps/-sep2-.heic"
not found in 'runtimepath': "bitmaps/-sep2-.webp"
not found in 'runtimepath': "bitmaps/Cut.png"
not found in 'runtimepath': "bitmaps/Cut.bmp"
not found in 'runtimepath': "bitmaps/Cut.ico"
not found in 'runtimepath': "bitmaps/Cut.icns"
not found in 'runtimepath': "bitmaps/Cut.jpeg"
not found in 'runtimepath': "bitmaps/Cut.jpg"
not found in 'runtimepath': "bitmaps/Cut.heic"
not found in 'runtimepath': "bitmaps/Cut.webp"
not found in 'runtimepath': "bitmaps/Copy.png"
not found in 'runtimepath': "bitmaps/Copy.bmp"
not found in 'runtimepath': "bitmaps/Copy.ico"
not found in 'runtimepath': "bitmaps/Copy.icns"
not found in 'runtimepath': "bitmaps/Copy.jpeg"
not found in 'runtimepath': "bitmaps/Copy.jpg"
not found in 'runtimepath': "bitmaps/Copy.heic"
not found in 'runtimepath': "bitmaps/Copy.webp"
not found in 'runtimepath': "bitmaps/Paste.png"
not found in 'runtimepath': "bitmaps/Paste.bmp"
not found in 'runtimepath': "bitmaps/Paste.ico"
not found in 'runtimepath': "bitmaps/Paste.icns"
not found in 'runtimepath': "bitmaps/Paste.jpeg"
not found in 'runtimepath': "bitmaps/Paste.jpg"
not found in 'runtimepath': "bitmaps/Paste.heic"
not found in 'runtimepath': "bitmaps/Paste.webp"
not found in 'runtimepath': "bitmaps/LoadSesn.png"
not found in 'runtimepath': "bitmaps/LoadSesn.bmp"
not found in 'runtimepath': "bitmaps/LoadSesn.ico"
not found in 'runtimepath': "bitmaps/LoadSesn.icns"
not found in 'runtimepath': "bitmaps/LoadSesn.jpeg"
not found in 'runtimepath': "bitmaps/LoadSesn.jpg"
not found in 'runtimepath': "bitmaps/LoadSesn.heic"
not found in 'runtimepath': "bitmaps/LoadSesn.webp"
not found in 'runtimepath': "bitmaps/SaveSesn.png"
not found in 'runtimepath': "bitmaps/SaveSesn.bmp"
not found in 'runtimepath': "bitmaps/SaveSesn.ico"
not found in 'runtimepath': "bitmaps/SaveSesn.icns"
not found in 'runtimepath': "bitmaps/SaveSesn.jpeg"
not found in 'runtimepath': "bitmaps/SaveSesn.jpg"
not found in 'runtimepath': "bitmaps/SaveSesn.heic"
not found in 'runtimepath': "bitmaps/SaveSesn.webp"
not found in 'runtimepath': "bitmaps/RunScript.png"
not found in 'runtimepath': "bitmaps/RunScript.bmp"
not found in 'runtimepath': "bitmaps/RunScript.ico"
not found in 'runtimepath': "bitmaps/RunScript.icns"
not found in 'runtimepath': "bitmaps/RunScript.jpeg"
not found in 'runtimepath': "bitmaps/RunScript.jpg"
not found in 'runtimepath': "bitmaps/RunScript.heic"
not found in 'runtimepath': "bitmaps/RunScript.webp"
not found in 'runtimepath': "bitmaps/Make.png"
not found in 'runtimepath': "bitmaps/Make.bmp"
not found in 'runtimepath': "bitmaps/Make.ico"
not found in 'runtimepath': "bitmaps/Make.icns"
not found in 'runtimepath': "bitmaps/Make.jpeg"
not found in 'runtimepath': "bitmaps/Make.jpg"
not found in 'runtimepath': "bitmaps/Make.heic"
not found in 'runtimepath': "bitmaps/Make.webp"
not found in 'runtimepath': "bitmaps/-sep7-.png"
not found in 'runtimepath': "bitmaps/-sep7-.bmp"
not found in 'runtimepath': "bitmaps/-sep7-.ico"
not found in 'runtimepath': "bitmaps/-sep7-.icns"
not found in 'runtimepath': "bitmaps/-sep7-.jpeg"
not found in 'runtimepath': "bitmaps/-sep7-.jpg"
not found in 'runtimepath': "bitmaps/-sep7-.heic"
not found in 'runtimepath': "bitmaps/-sep7-.webp"
not found in 'runtimepath': "bitmaps/Help.png"
not found in 'runtimepath': "bitmaps/Help.bmp"
not found in 'runtimepath': "bitmaps/Help.ico"
not found in 'runtimepath': "bitmaps/Help.icns"
not found in 'runtimepath': "bitmaps/Help.jpeg"
not found in 'runtimepath': "bitmaps/Help.jpg"
not found in 'runtimepath': "bitmaps/Help.heic"
not found in 'runtimepath': "bitmaps/Help.webp"
Executing GUIEnter Autocommands for "*"
autocommand call s:BlameRehighlight()

Reading viminfo file "/Users/piotr/.viminfo" info oldfiles
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/highlighters)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/highlighters/sign_column.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/highlighters/sign_column.vim
continuing in <SNR>140_clear_hl
Executing BufWinEnter Autocommands for "*"
autocommand call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload)
fchdir() to previous dir
line 4: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale.vim
continuing in ale#events#LintOnEnter
Executing BufWinEnter Autocommands for "*"
autocommand lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

chdir(/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload)
fchdir() to previous dir
line 10: sourcing "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/pairs.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/pairs.vim
continuing in AutoPairsInit
Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter.vim
continuing in <SNR>120_on_bufenter
Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing VimEnter Autocommands for "*"
autocommand lsp.Setup()

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
Executing VimEnter Autocommands for "*"
autocommand doau <nomodeline> User VimCompleteLoaded

Executing User Autocommands for "VimCompleteLoaded"
autocommand RegisterPlugins() | util.InitKindHighlightGroups()

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 0: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/util.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/util.vim
continuing in User Autocommands for "VimCompleteLoaded"
Executing User Autocommands for "VimCompleteLoaded"
autocommand RegisterPlugins() | util.InitKindHighlightGroups()

autocommand g:VimCompleteOptionsSet(vcoptions)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
autocommand Reset()

autocommand call g:VimSuggestSetOptions(s:vim_suggest)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
autocommand Reset()

autocommand lsp.Setup()

Executing VimEnter Autocommands for "*"
autocommand VimCompEnable("")

Error detected while processing VimEnter Autocommands for "*"..function <SNR>71_VimCompEnable[11]..vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    5:
E31: No such mapping
Error detected while processing VimEnter Autocommands for "*"..function <SNR>71_VimCompEnable[11]..vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    6:
E31: No such mapping
Executing VimEnter Autocommands for "*"
autocommand doau <nomodeline> User VimCompleteLoaded

Executing User Autocommands for "VimCompleteLoaded"
Executing User Autocommands for "VimCompleteLoaded"
Executing VimEnter Autocommands for "*"
autocommand sil call s:VimEnter(expand("<amatch>"))

Executing VimEnter Autocommands for "*"
autocommand call s:init()

Executing VimEnter Autocommands for "*"
autocommand call s:MapCR() | if has('patch-8.1.1113') || has('nvim-0.4') |   exe 'autocmd eunuch InsertEnter * ++once call s:MapCR()' | endif

Executing VimEnter Autocommands for "*"
autocommand if winnr() != winnr('$') | call gitgutter#all(0) | endif

Executing VimEnter Autocommands for "*"
autocommand if get(g:, 'projectionist_vim_enter', 1) && argc() == 0 && empty(v:this_session) |   call s:Detect(getcwd()) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/projectionist.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/projectionist.vim
continuing in <SNR>128_ProjectionistDetect
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

[global] /Users/piotr/Work/GitHub/wid
Calling shell to execute: "begin; ruby -rrbconfig -e 'print RbConfig::CONFIG[:rubyhdrdir.to_s] || RbConfig::CONFIG[:topdir.to_s]'; end>/var/folders/qb/tc6wn3v12hq54z88ky3d66bw0000gn/T/vfvZQDC/2 2>&1"

[global] /Users/piotr/Work/GitHub/wid
Executing VimEnter Autocommands for "*"
autocommand if get(g:, 'rails_vim_enter', get(g:, 'projectionist_vim_enter', 1)) &&     argc() == 0 && RailsDetect(getcwd()) |   call rails#buffer_setup() | endif

Executing VimEnter Autocommands for "*"
autocommand call s:abolish_setup()

Executing VimEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing VimEnter Autocommands for "*"
autocommand call <SID>SetupFullScreenTouchBar()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand call <SID>SetupLazyloadMenus() | au! SetupLazyloadMenus

Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


chdir(/Users/piotr/Work/GitHub)
fchdir() to previous dir
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing BufWipeout Autocommands for "*"
autocommand lsp.RemoveFile(expand('<abuf>')->str2nr())

Executing BufWipeout Autocommands for "*"
autocommand exe s:TempDelete(  +expand('<abuf>'))

auto-removing autocommand: BufEnter <buffer=1>
auto-removing autocommand: BufRead <buffer=1>
auto-removing autocommand: CompleteChanged <buffer=1>
auto-removing autocommand: CompleteDone <buffer=1>
auto-removing autocommand: FileType <buffer=1>
auto-removing autocommand: TextChangedI <buffer=1>
auto-removing autocommand: TextChangedP <buffer=1>
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

"." is a directory
Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload)
fchdir() to previous dir
line 32: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/netrw.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/netrw.vim
continuing in <SNR>100_LocalBrowse
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
line 22: sourcing "/Users/piotr/.config/vim/.netrwhist"
finished sourcing /Users/piotr/.config/vim/.netrwhist
continuing in <SNR>178_NetrwBookHistRead
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[80]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[80]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[81]..<SNR>178_NetrwTgtMenu:
line   10:
E329: No menu "Targets"
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[250]..<SNR>178_NetrwMaps:
line  146:
E225: Global mapping already exists for 
Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx cleared
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Pattern not found: ^.*\.png/\=$
Pattern not found: ^.*\.jpg/\=$
Pattern not found: ^.*\.jpeg/\=$
Pattern not found: ^.*\.gif/\=$
Pattern not found: ^.*\.pdf/\=$
Pattern not found: ^.*\.zip/\=$
Pattern not found: ^.*\.exe/\=$
Pattern not found: ^.*\.xls/\=$
Pattern not found: ^.*\.min\.js/\=$
Pattern not found: ^.*\.min\.css/\=$
Pattern not found: ^.*/node_modules/.*/\=$
Pattern not found: ^.*/venv/.*/\=$
Pattern not found: ^.*/target/.*/\=$
Pattern not found: ^.*/dist/.*/\=$
Pattern not found: ^.*/build/.*/\=$
Pattern not found: ^.*/\.git/.*/\=$
Pattern not found: ^.*/\.hg/.*/\=$
Pattern not found: ^.*/\.svn/.*/\=$
Pattern not found: ^.*/\.DS_Store/\=$
Pattern not found: ^.*/tmp/.*/\=$
Pattern not found: ^.*/test/vcr_cassettes/.*\.json/\=$
Pattern not found: ^\s*$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Pattern not found: \%(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\|\.obj\)[*@]\=$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   82:
E31: No such mapping
Error detected while processing function <SNR>146_opendir[10]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   85:
E31: No such mapping
Pattern not found: @$
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

[window] /Users/piotr/Work/GitHub/wid
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing TextChanged Autocommands for "*"
autocommand call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 44: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/util.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/util.vim
continuing in ale#ShouldDoNothing
Executing TextChanged Autocommands for "*"
autocommand call s:on_text_changed()

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:on_refresh_event()

chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/linter.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/linter.vim
continuing in <SNR>173_Lint
not found in 'runtimepath': "ale_linters/netrw/*.vim"
No matching autocommands: User ALEWantResults
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

[window] /Users/piotr/Work/GitHub/wid
[window] /Users/piotr/Work/GitHub/wid
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[141]..<SNR>178_NetrwGetBuffer[76]..<SNR>178_NetrwEnew[35]..<SNR>178_NetrwEditFile[10]..BufAdd Autocommands for "*"..function <SNR>9_BMAdd:
line    6:
E495: No autocommand file name to substitute for "<afile>"
Executing BufLeave Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing BufLeave Autocommands for "*"
autocommand setl nocursorline

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufLeave Autocommands for "*"
autocommand let b:lastchangedtick = b:changedtick

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing BufWinEnter Autocommands for "*"
autocommand call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

Executing BufWinEnter Autocommands for "*"
autocommand lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "*"
autocommand if !exists('b:fastfold') |   call s:UpdateBuf(0) |   let b:fastfold = 1 | endif

Executing BufFilePre Autocommands for "*"
autocommand call s:BMRemove()

Executing BufFilePre Autocommands for "*"
autocommand call s:on_buffilepre(expand('<abuf>'))

chdir(/Users/piotr/Work/GitHub/wid/lib)
fchdir() to previous dir
Executing BufFilePost Autocommands for "*"
autocommand call s:BMAdd()

Executing BufFilePost Autocommands for "*"
autocommand unlet! b:git_dir

Executing BufFilePost Autocommands for "*"
autocommand call s:on_buffilepost(expand('<abuf>'))

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/sign.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/sign.vim
continuing in <SNR>174_clear
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/hunk.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/hunk.vim
continuing in <SNR>174_clear
Executing BufFilePost Autocommands for "*"
autocommand if type(getbufvar(+expand('<abuf>'), 'projectionist')) == type({}) |   call s:Detect(expand('<afile>')) | endif

Executing BufFilePost Autocommands for "*"
autocommand if (@% !~# '^!' || exists('b:sleuth')) && get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

"~/Work/GitHub/wid/lib/" [Not edited] --No lines in buffer--
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[250]..<SNR>178_NetrwMaps:
line  146:
E225: Global mapping already exists for 
Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Pattern not found: ^.*\.png/\=$
Pattern not found: ^.*\.jpg/\=$
Pattern not found: ^.*\.jpeg/\=$
Pattern not found: ^.*\.gif/\=$
Pattern not found: ^.*\.pdf/\=$
Pattern not found: ^.*\.zip/\=$
Pattern not found: ^.*\.exe/\=$
Pattern not found: ^.*\.xls/\=$
Pattern not found: ^.*\.min\.js/\=$
Pattern not found: ^.*\.min\.css/\=$
Pattern not found: ^.*/node_modules/.*/\=$
Pattern not found: ^.*/venv/.*/\=$
Pattern not found: ^.*/target/.*/\=$
Pattern not found: ^.*/dist/.*/\=$
Pattern not found: ^.*/build/.*/\=$
Pattern not found: ^.*/\.git/.*/\=$
Pattern not found: ^.*/\.hg/.*/\=$
Pattern not found: ^.*/\.svn/.*/\=$
Pattern not found: ^.*/\.DS_Store/\=$
Pattern not found: ^.*/tmp/.*/\=$
Pattern not found: ^.*/test/vcr_cassettes/.*\.json/\=$
Pattern not found: ^\s*$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Pattern not found: \%(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\|\.obj\)[*@]\=$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   82:
E31: No such mapping
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   85:
E31: No such mapping
Pattern not found: @$
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

[window] /Users/piotr/Work/GitHub/wid
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing TextChanged Autocommands for "*"
autocommand call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

Executing TextChanged Autocommands for "*"
autocommand call s:on_text_changed()

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:on_refresh_event()

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

No matching autocommands: User ALEWantResults
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

[window] /Users/piotr/Work/GitHub/wid
chdir(/Users/piotr/Work/GitHub/wid/lib)
fchdir() to previous dir
chdir(/Users/piotr/Work/GitHub/wid/lib)
fchdir() to previous dir
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

chdir(lib)
fchdir() to previous dir
Executing BufLeave Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing BufLeave Autocommands for "*"
autocommand setl nocursorline

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufLeave Autocommands for "*"
autocommand let b:lastchangedtick = b:changedtick

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufReadPre Autocommands for "*"
autocommand exe s:TempReadPre( +expand('<abuf>'))

"~/Work/GitHub/wid/lib/wid.rb" 
"~/Work/GitHub/wid/lib/wid.rb" 43L, 1033B
Reading viminfo file "/Users/piotr/.viminfo" marks
Executing BufRead Autocommands for "*.rb"
autocommand setf ruby

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin/ruby.vim"
[window] /Users/piotr/Work/GitHub/wid
Calling shell to execute: "begin; /Users/piotr/.rubies/ruby-3.3.5/bin/ruby --disable-gems -e 'print $:.join %q{,}'; end>/var/folders/qb/tc6wn3v12hq54z88ky3d66bw0000gn/T/vfvZQDC/5 2>&1"

[window] /Users/piotr/Work/GitHub/wid
[window] /Users/piotr/Work/GitHub/wid
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/ruby.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby/rails.vim"
chdir(lib)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/rails.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/rails.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby/rails.vim
chdir(lib)
fchdir() to previous dir
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby/rails.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/ruby.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent/ruby.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent/ruby.vim
continuing in <SNR>12_LoadIndent
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/indent)
fchdir() to previous dir
line 14: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/indent/ruby.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/indent/ruby.vim
continuing in <SNR>12_LoadIndent
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(lib)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (expand("<amatch>") =~# '\.conf$'^I|| getline(1) =~ '^#' || getline(2) =~ '^#'^I|| getline(3) =~ '^#' || getline(4) =~ '^#'^I|| getline(5) =~ '^#') |   setf FALLBACK conf | endif

Executing BufRead Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufRead Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing BufRead Autocommands for "*"
autocommand if getline(1) !~# '^#!\s*\S' | let b:eunuch_chmod_shebang = 1 | endif

Executing BufRead Autocommands for "*"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing BufRead Autocommands for "*"
autocommand if empty(&filetype) && getline(1) =~# '^\(commit\|tree\|object\) \x\{40,\}\>\|^tag \S\+$' |   set ft=git | endif

Executing BufRead Autocommands for "*"
autocommand call s:on_refresh_event()

Executing BufRead Autocommands for "*"
autocommand if empty(&filetype) |   call s:Detect() | endif

Executing BufRead Autocommands for "*"
autocommand if RailsDetect() && empty(&filetype) |   call rails#buffer_setup() | endif

Executing BufRead Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
Executing BufRead Autocommands for "*"
autocommand exe s:TempReadPost(+expand('<abuf>'))

Executing BufRead Autocommands for "*"
autocommand if get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

Executing BufRead Autocommands for "*"
autocommand call s:Swift()

Executing BufRead Autocommands for "*"
autocommand call s:SelectJavascript()

Executing BufRead Autocommands for "*.rb"
autocommand call s:setf('ruby')

Executing BufRead Autocommands for "*"
autocommand completor.Enable()

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
Error detected while processing function <SNR>178_NetrwBrowseChgDir[194]..<SNR>178_NetrwEditFile[10]..BufRead Autocommands for "*"..function vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    5:
E31: No such mapping
Error detected while processing function <SNR>178_NetrwBrowseChgDir[194]..<SNR>178_NetrwEditFile[10]..BufRead Autocommands for "*"..function vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    6:
E31: No such mapping
Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 11: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/async.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/async.vim
continuing in gitgutter#utility#set_repo_path
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/debug.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/debug.vim
continuing in gitgutter#async#execute
Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

chdir(lib)
fchdir() to previous dir
Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing BufEnter Autocommands for "*"
autocommand if s:active() |   if get(b:, 'rails_refresh') |     let b:rails_refresh = 0 |     let &filetype = &filetype |     unlet! b:rails_refresh |   endif |   if exists("+completefunc") && &completefunc ==# 'syntaxcomplete#Complete' |     if exists("g:loaded_syntax_completion") |       unlet g:loaded_syntax_completion |       silent! delfunction syntaxcomplete#Complete |     endif |   endif | endif

chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload)
fchdir() to previous dir
line 0: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/syntaxcomplete.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/syntaxcomplete.vim
continuing in BufEnter Autocommands for "*"
Executing BufEnter Autocommands for "<buffer=4>"
autocommand SetupCompletors()  # FileType, for 'ft' set in 'modeline'

Executing BufWinEnter Autocommands for "*"
autocommand call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/brakeman.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/brakeman.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/cspell.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/handlers)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/handlers/cspell.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/handlers/cspell.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/cspell.vim
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/cspell.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/debride.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/debride.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/packwerk.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/packwerk.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/rails_best_practices.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/rails_best_practices.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/reek.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/reek.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/rubocop.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/rubocop.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/ruby.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/ruby.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/solargraph.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/solargraph.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/sorbet.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/sorbet.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/standardrb.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/standardrb.vim
continuing in ale#linter#GetAll
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/steep.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/ale_linters/ruby/steep.vim
continuing in ale#linter#GetAll
Executing User Autocommands for "ALEWantResults"
autocommand AleHook(g:ale_want_results_buffer)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/other_source.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/other_source.vim
continuing in <SNR>26_AleHook
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/engine.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/engine.vim
continuing in ale#other_source#StartChecking
chdir(lib)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/command.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/command.vim
continuing in <SNR>213_GetLintFileValues
No matching autocommands: User ALELintPre
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 23: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/history.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/history.vim
continuing in ale#engine#IsExecutable
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 26: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/job.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/job.vim
continuing in ale#command#Run
No matching autocommands: User ALEJobStarted
Executing BufWinEnter Autocommands for "*"
autocommand lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "*"
autocommand if !exists('b:fastfold') |   call s:UpdateBuf(0) |   let b:fastfold = 1 | endif

SignColumn     xxx term=standout ctermfg=1 ctermbg=7 guifg=#824d5b
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "<buffer=4>"
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(lib)
fchdir() to previous dir
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
Executing FocusLost Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing FocusLost Autocommands for "*"
autocommand let s:focus_was_lost = 1

Executing FocusGained Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing FocusGained Autocommands for "*"
autocommand if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
chdir(lib)
fchdir() to previous dir
Executing FocusGained Autocommands for "*"
autocommand if get(g:, 'fugitive_focus_gained', !has('win32')) |   call fugitive#DidChange(0) | endif

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "<buffer=4>"
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "<buffer=4>"
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "<buffer=4>"
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
autocommand call LspDocHighlightClear(4) | call LspDocHighlight(4, "silent")

chdir(lib)
fchdir() to previous dir
Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


chdir(lib)
fchdir() to previous dir
chdir(/Users/piotr/Work/GitHub/wid)
fchdir() to previous dir
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

Executing BufLeave Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing BufLeave Autocommands for "*"
autocommand setl nocursorline

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

chdir(lib)
fchdir() to previous dir
Executing BufLeave Autocommands for "*"
autocommand let b:lastchangedtick = b:changedtick

chdir(lib)
fchdir() to previous dir
Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

chdir(lib)
fchdir() to previous dir
Executing BufHidden Autocommands for "*"
autocommand call ale#highlight#BufferHidden(expand('<abuf>'))

"lib" is a directory
Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[80]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[80]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[135]..<SNR>178_NetrwMenu[81]..<SNR>178_NetrwTgtMenu:
line   10:
E329: No menu "Targets"
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[250]..<SNR>178_NetrwMaps:
line  146:
E225: Global mapping already exists for 
Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Pattern not found: ^.*\.png/\=$
Pattern not found: ^.*\.jpg/\=$
Pattern not found: ^.*\.jpeg/\=$
Pattern not found: ^.*\.gif/\=$
Pattern not found: ^.*\.pdf/\=$
Pattern not found: ^.*\.zip/\=$
Pattern not found: ^.*\.exe/\=$
Pattern not found: ^.*\.xls/\=$
Pattern not found: ^.*\.min\.js/\=$
Pattern not found: ^.*\.min\.css/\=$
Pattern not found: ^.*/node_modules/.*/\=$
Pattern not found: ^.*/venv/.*/\=$
Pattern not found: ^.*/target/.*/\=$
Pattern not found: ^.*/dist/.*/\=$
Pattern not found: ^.*/build/.*/\=$
Pattern not found: ^.*/\.git/.*/\=$
Pattern not found: ^.*/\.hg/.*/\=$
Pattern not found: ^.*/\.svn/.*/\=$
Pattern not found: ^.*/\.DS_Store/\=$
Pattern not found: ^.*/tmp/.*/\=$
Pattern not found: ^.*/test/vcr_cassettes/.*\.json/\=$
Pattern not found: ^\s*$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Pattern not found: \%(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\|\.obj\)[*@]\=$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   82:
E31: No such mapping
Error detected while processing function <SNR>146_opendir[12]..BufEnter Autocommands for "*"..function <SNR>100_LocalBrowse[32]..netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   85:
E31: No such mapping
Pattern not found: @$
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

[window] /Users/piotr/Work/GitHub/wid
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing BufEnter Autocommands for "*"
autocommand if s:active() |   if get(b:, 'rails_refresh') |     let b:rails_refresh = 0 |     let &filetype = &filetype |     unlet! b:rails_refresh |   endif |   if exists("+completefunc") && &completefunc ==# 'syntaxcomplete#Complete' |     if exists("g:loaded_syntax_completion") |       unlet g:loaded_syntax_completion |       silent! delfunction syntaxcomplete#Complete |     endif |   endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#highlight#UpdateHighlights()

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing TextChanged Autocommands for "*"
autocommand call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

Executing TextChanged Autocommands for "*"
autocommand call s:on_text_changed()

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:on_refresh_event()

Executing User Autocommands for "ALEWantResults"
autocommand AleHook(g:ale_want_results_buffer)

No matching autocommands: User ALELintPre
Executing CursorHold Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

autocommand if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

Executing CursorHold Autocommands for "*"
autocommand call gitgutter#process_buffer(bufnr(''), 0)

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

[window] /Users/piotr/Work/GitHub/wid
[window] /Users/piotr/Work/GitHub/wid
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[141]..<SNR>178_NetrwGetBuffer[76]..<SNR>178_NetrwEnew[35]..<SNR>178_NetrwEditFile[10]..BufAdd Autocommands for "*"..function <SNR>9_BMAdd:
line    6:
E495: No autocommand file name to substitute for "<afile>"
Executing BufLeave Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing BufLeave Autocommands for "*"
autocommand setl nocursorline

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufLeave Autocommands for "*"
autocommand let b:lastchangedtick = b:changedtick

Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing BufEnter Autocommands for "*"
autocommand if s:active() |   if get(b:, 'rails_refresh') |     let b:rails_refresh = 0 |     let &filetype = &filetype |     unlet! b:rails_refresh |   endif |   if exists("+completefunc") && &completefunc ==# 'syntaxcomplete#Complete' |     if exists("g:loaded_syntax_completion") |       unlet g:loaded_syntax_completion |       silent! delfunction syntaxcomplete#Complete |     endif |   endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#highlight#UpdateHighlights()

Executing BufWinEnter Autocommands for "*"
autocommand call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

Executing BufWinEnter Autocommands for "*"
autocommand lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "*"
autocommand if !exists('b:fastfold') |   call s:UpdateBuf(0) |   let b:fastfold = 1 | endif

Executing BufFilePre Autocommands for "*"
autocommand call s:BMRemove()

Executing BufFilePre Autocommands for "*"
autocommand call s:on_buffilepre(expand('<abuf>'))

chdir(/Users/piotr/Work/GitHub/wid/lib/wid)
fchdir() to previous dir
Executing BufFilePost Autocommands for "*"
autocommand call s:BMAdd()

Executing BufFilePost Autocommands for "*"
autocommand unlet! b:git_dir

Executing BufFilePost Autocommands for "*"
autocommand call s:on_buffilepost(expand('<abuf>'))

Executing BufFilePost Autocommands for "*"
autocommand if type(getbufvar(+expand('<abuf>'), 'projectionist')) == type({}) |   call s:Detect(expand('<afile>')) | endif

Executing BufFilePost Autocommands for "*"
autocommand if (@% !~# '^!' || exists('b:sleuth')) && get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

"~/Work/GitHub/wid/lib/wid/" [Not edited] --No lines in buffer--
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[250]..<SNR>178_NetrwMaps:
line  146:
E225: Global mapping already exists for 
Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   10:
E329: No menu "Bookmarks"
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[27]..<SNR>178_NetrwBookHistHandler[176]..<SNR>178_NetrwBookmarkMenu:
line   11:
E329: No menu "Bookmark Delete"
Pattern not found: ^.*\.png/\=$
Pattern not found: ^.*\.jpg/\=$
Pattern not found: ^.*\.jpeg/\=$
Pattern not found: ^.*\.gif/\=$
Pattern not found: ^.*\.pdf/\=$
Pattern not found: ^.*\.zip/\=$
Pattern not found: ^.*\.exe/\=$
Pattern not found: ^.*\.xls/\=$
Pattern not found: ^.*\.min\.js/\=$
Pattern not found: ^.*\.min\.css/\=$
Pattern not found: ^.*/node_modules/.*/\=$
Pattern not found: ^.*/venv/.*/\=$
Pattern not found: ^.*/target/.*/\=$
Pattern not found: ^.*/dist/.*/\=$
Pattern not found: ^.*/build/.*/\=$
Pattern not found: ^.*/\.git/.*/\=$
Pattern not found: ^.*/\.hg/.*/\=$
Pattern not found: ^.*/\.svn/.*/\=$
Pattern not found: ^.*/\.DS_Store/\=$
Pattern not found: ^.*/tmp/.*/\=$
Pattern not found: ^.*/test/vcr_cassettes/.*\.json/\=$
Pattern not found: ^\s*$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Pattern not found: \%(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\|\.obj\)[*@]\=$
Pattern not found: ^\d\{3}ÿ\d\{3}\/
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   82:
E31: No such mapping
Error detected while processing function netrw#LocalBrowseCheck[27]..<SNR>178_NetrwBrowse[252]..<SNR>178_PerformListing[239]..<SNR>178_NetrwWideListing:
line   85:
E31: No such mapping
Pattern not found: @$
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

[window] /Users/piotr/Work/GitHub/wid
Executing BufDelete Autocommands for "*"
autocommand call s:BMRemove()

Executing BufDelete Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

Executing BufDelete Autocommands for "*"
autocommand call s:RunBufDelete(+expand('<abuf>'))

Executing BufDelete Autocommands for "*"
autocommand if getbufvar(+expand('<abuf>'), 'buftype') ==# 'terminal' |   if !empty(FugitiveGitDir(+expand('<abuf>'))) |     call fugitive#DidChange(+expand('<abuf>')) |   else |     call fugitive#DidChange(0) |  endif | endif

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

chdir(lib)
fchdir() to previous dir
Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing TextChanged Autocommands for "*"
autocommand call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

Executing TextChanged Autocommands for "*"
autocommand call s:on_text_changed()

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:on_refresh_event()

Executing SafeState Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing User Autocommands for "ALEWantResults"
autocommand AleHook(g:ale_want_results_buffer)

No matching autocommands: User ALELintPre
Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CursorMoved Autocommands for "*"
autocommand if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand execute ''

Executing CmdlineLeave Autocommands for ":"
autocommand {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }


Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/netrw.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/netrw.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in 'runtimepath': "indent/netrw.vim"
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

chdir(lib)
fchdir() to previous dir
Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "netrw"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "netrw"
autocommand if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

netrwGray      xxx guifg=gray70
Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "netrw"
autocommand call s:setup_vinegar()

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing FileType Autocommands for "netrw"
autocommand setl beval

[window] /Users/piotr/Work/GitHub/wid
chdir(/Users/piotr/Work/GitHub/wid/lib/wid)
fchdir() to previous dir
chdir(/Users/piotr/Work/GitHub/wid/lib/wid)
fchdir() to previous dir
Executing BufAdd Autocommands for "*"
autocommand call s:BMAdd()

chdir(lib/wid)
fchdir() to previous dir
Executing BufLeave Autocommands for "*"
autocommand if &nu                  | set nornu | endif

Executing BufLeave Autocommands for "*"
autocommand setl nocursorline

Executing BufLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing BufLeave Autocommands for "*"
autocommand let b:lastchangedtick = b:changedtick

chdir(lib)
fchdir() to previous dir
Executing BufWinLeave Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 2 |   call s:diffoff_all(s:Dir(+expand('<abuf>'))) | endif

Executing BufWinLeave Autocommands for "*"
autocommand execute getwinvar(+bufwinnr(+expand('<abuf>')), 'fugitive_leave')

Executing BufReadPre Autocommands for "*"
autocommand exe s:TempReadPre( +expand('<abuf>'))

"~/Work/GitHub/wid/lib/wid/lexer.rb" 
"~/Work/GitHub/wid/lib/wid/lexer.rb" 130L, 2807B
Reading viminfo file "/Users/piotr/.viminfo" marks
Executing BufRead Autocommands for "*.rb"
autocommand setf ruby

Executing FileType Autocommands for "*"
autocommand call LoadFTPlugin()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin/ruby.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/ruby.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby/rails.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin/ruby/rails.vim
continuing in <SNR>11_LoadFTPlugin
chdir(/Users/piotr/.config/vim/after/ftplugin)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/after/ftplugin/ruby.vim"
finished sourcing /Users/piotr/.config/vim/after/ftplugin/ruby.vim
continuing in <SNR>11_LoadFTPlugin
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent/ruby.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/indent/ruby.vim
continuing in <SNR>12_LoadIndent
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/indent)
fchdir() to previous dir
line 14: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/indent/ruby.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/indent/ruby.vim
continuing in <SNR>12_LoadIndent
Executing FileType Autocommands for "*"
autocommand call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())


No mapping found
Executing User Autocommands for "LspAttached"
autocommand call OnLspAttached()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()


No mapping found
Executing User Autocommands for "LspAttached"
autocommand call OnLspAttached()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()


No mapping found
Executing User Autocommands for "LspAttached"
autocommand call OnLspAttached()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()

Executing User Autocommands for "LspAttached"
autocommand RegisterLsp()

Executing FileType Autocommands for "*"
autocommand call s:InitIfSupportedFiletype(expand('<amatch>'))

Executing FileType Autocommands for "*"
autocommand if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

Executing User Autocommands for "ProjectionistDetect"
autocommand if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

Executing User Autocommands for "ProjectionistDetect"
autocommand call s:ProjectionistDetect()

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim"
finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/compiler/rake.vim
continuing in projectionist#activate
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler)
fchdir() to previous dir
line 43: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim"
finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/compiler/rake.vim
continuing in projectionist#activate
Executing User Autocommands for "ProjectionistActivate"
autocommand if exists('b:rake_root') | doautocmd User Rake | endif

Executing User Autocommands for "Rake"
autocommand if len(s:project().makeprg()) | call s:define_rake() | endif

Executing User Autocommands for "Rake"
autocommand if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

autocommand if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

Executing FileType Autocommands for "*"
autocommand if RailsDetect() | call rails#buffer_setup() | endif

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

Executing FileType Autocommands for "*"
autocommand if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

Executing FileType Autocommands for "*"
autocommand call s:UpdateBuf(0)

Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufRead Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (expand("<amatch>") =~# '\.conf$'^I|| getline(1) =~ '^#' || getline(2) =~ '^#'^I|| getline(3) =~ '^#' || getline(4) =~ '^#'^I|| getline(5) =~ '^#') |   setf FALLBACK conf | endif

Executing BufRead Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufRead Autocommands for "*"
autocommand lsp.AddFile(expand('<abuf>')->str2nr())

Executing BufRead Autocommands for "*"
autocommand if getline(1) !~# '^#!\s*\S' | let b:eunuch_chmod_shebang = 1 | endif

Executing BufRead Autocommands for "*"
autocommand if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

Executing BufRead Autocommands for "*"
autocommand if empty(&filetype) && getline(1) =~# '^\(commit\|tree\|object\) \x\{40,\}\>\|^tag \S\+$' |   set ft=git | endif

Executing BufRead Autocommands for "*"
autocommand call s:on_refresh_event()

Executing BufRead Autocommands for "*"
autocommand if empty(&filetype) |   call s:Detect() | endif

Executing BufRead Autocommands for "*"
autocommand if RailsDetect() && empty(&filetype) |   call rails#buffer_setup() | endif

Executing BufRead Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufRead Autocommands for "*"
autocommand exe s:TempReadPost(+expand('<abuf>'))

Executing BufRead Autocommands for "*"
autocommand if get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

Executing BufRead Autocommands for "*"
autocommand call s:Swift()

Executing BufRead Autocommands for "*"
autocommand call s:SelectJavascript()

Executing BufRead Autocommands for "*.rb"
autocommand call s:setf('ruby')

Executing BufRead Autocommands for "*"
autocommand completor.Enable()

Error detected while processing function <SNR>178_NetrwBrowseChgDir[194]..<SNR>178_NetrwEditFile[10]..BufRead Autocommands for "*"..function vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    5:
E31: No such mapping
Error detected while processing function <SNR>178_NetrwBrowseChgDir[194]..<SNR>178_NetrwEditFile[10]..BufRead Autocommands for "*"..function vimcomplete#completor#Enable[50]..vimcomplete#util#TabEnable:
line    6:
E31: No such mapping
Executing BufEnter Autocommands for "*"
autocommand :syntax sync maxlines=256

autocommand :syntax sync minlines=256

Executing BufEnter Autocommands for "*"
autocommand if &nu && mode() != "i" | set rnu   | endif

Executing BufEnter Autocommands for "*"
autocommand setl cursorline

Executing BufEnter Autocommands for "*"
autocommand call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing BufEnter Autocommands for "*"
autocommand :call AutoPairsInit()

Executing BufEnter Autocommands for "*"
autocommand call lightline#update()

not found in 'runtimepath': "autoload/gutentags.vim"
not found in 'packpath': "autoload/gutentags.vim"
Executing BufEnter Autocommands for "*"
autocommand call s:on_bufenter()

Executing BufEnter Autocommands for "*"
autocommand if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

Executing BufEnter Autocommands for "*"
autocommand if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

Executing BufEnter Autocommands for "*"
autocommand if exists('w:winenterbuf') |   if w:winenterbuf != bufnr('%') |     unlet! w:lastfdm |   endif |   unlet w:winenterbuf | endif

autocommand if !exists('b:lastchangedtick') | let b:lastchangedtick = b:changedtick | endif | if b:changedtick != b:lastchangedtick && (&l:foldmethod isnot# 'diff' && exists('b:predifffdm')) | call s:UpdateBuf(0) | endif

Executing BufEnter Autocommands for "*"
autocommand if s:active() |   if get(b:, 'rails_refresh') |     let b:rails_refresh = 0 |     let &filetype = &filetype |     unlet! b:rails_refresh |   endif |   if exists("+completefunc") && &completefunc ==# 'syntaxcomplete#Complete' |     if exists("g:loaded_syntax_completion") |       unlet g:loaded_syntax_completion |       silent! delfunction syntaxcomplete#Complete |     endif |   endif | endif

Executing BufEnter Autocommands for "*"
autocommand call ale#highlight#UpdateHighlights()

Executing BufEnter Autocommands for "<buffer=6>"
autocommand SetupCompletors()  # FileType, for 'ft' set in 'modeline'

Executing BufWinEnter Autocommands for "*"
autocommand call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

Executing User Autocommands for "ALEWantResults"
autocommand AleHook(g:ale_want_results_buffer)

No matching autocommands: User ALELintPre
No matching autocommands: User ALEJobStarted
Executing BufWinEnter Autocommands for "*"
autocommand lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

Executing BufWinEnter Autocommands for "*"
autocommand autocmd SafeState * ++once call s:Highlight_Matching_Pair()

Executing BufWinEnter Autocommands for "*"
autocommand if s:can_diffoff(+expand('<abuf>')) && s:diff_window_count() == 1 |   call s:diffoff() | endif

Executing BufWinEnter Autocommands for "*"
autocommand if !exists('b:fastfold') |   call s:UpdateBuf(0) |   let b:fastfold = 1 | endif
