# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `repl_type_completor` gem.
# Please instead update this file by running `bin/tapioca gem repl_type_completor`.


# source://repl_type_completor//lib/repl_type_completor/version.rb#3
module ReplTypeCompletor
  class << self
    # source://repl_type_completor//lib/repl_type_completor.rb#31
    def analyze(code, binding:, filename: T.unsafe(nil)); end

    # source://repl_type_completor//lib/repl_type_completor.rb#42
    def handle_exception(e); end

    # source://repl_type_completor//lib/repl_type_completor.rb#46
    def info; end

    # Returns the value of attribute last_completion_error.
    #
    # source://repl_type_completor//lib/repl_type_completor.rb#9
    def last_completion_error; end

    # source://repl_type_completor//lib/repl_type_completor.rb#23
    def load_rbs; end

    # source://repl_type_completor//lib/repl_type_completor.rb#27
    def preload_rbs; end

    # source://repl_type_completor//lib/repl_type_completor.rb#11
    def rbs_load_error; end

    # @return [Boolean]
    #
    # source://repl_type_completor//lib/repl_type_completor.rb#15
    def rbs_load_started?; end

    # @return [Boolean]
    #
    # source://repl_type_completor//lib/repl_type_completor.rb#19
    def rbs_loaded?; end

    private

    # source://repl_type_completor//lib/repl_type_completor.rb#62
    def analyze_code(code, binding = T.unsafe(nil)); end

    # source://repl_type_completor//lib/repl_type_completor.rb#124
    def find_target(node, position); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/methods.rb#4
module ReplTypeCompletor::Methods; end

# source://repl_type_completor//lib/repl_type_completor/methods.rb#9
ReplTypeCompletor::Methods::MODULE_NAME_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://repl_type_completor//lib/repl_type_completor/methods.rb#8
ReplTypeCompletor::Methods::OBJECT_CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://repl_type_completor//lib/repl_type_completor/methods.rb#6
ReplTypeCompletor::Methods::OBJECT_INSTANCE_VARIABLES_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://repl_type_completor//lib/repl_type_completor/methods.rb#7
ReplTypeCompletor::Methods::OBJECT_INSTANCE_VARIABLE_GET_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://repl_type_completor//lib/repl_type_completor/methods.rb#5
ReplTypeCompletor::Methods::OBJECT_SINGLETON_CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://repl_type_completor//lib/repl_type_completor/require_paths.rb#4
module ReplTypeCompletor::RequirePaths
  class << self
    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#6
    def require_completions(target_path); end

    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#25
    def require_relative_completions(target_path, source_file); end

    private

    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#55
    def gem_and_system_load_paths; end

    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#45
    def gem_paths; end

    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#65
    def requireable_paths(base_dir, reject_prefixes: T.unsafe(nil)); end

    # source://repl_type_completor//lib/repl_type_completor/require_paths.rb#40
    def with_cache(key); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/result.rb#6
class ReplTypeCompletor::Result
  # @return [Result] a new instance of Result
  #
  # source://repl_type_completor//lib/repl_type_completor/result.rb#35
  def initialize(analyze_result, binding, source_file); end

  # source://repl_type_completor//lib/repl_type_completor/result.rb#41
  def completion_candidates; end

  # source://repl_type_completor//lib/repl_type_completor/result.rb#83
  def doc_namespace(matched); end

  private

  # source://repl_type_completor//lib/repl_type_completor/result.rb#129
  def call_or_const_doc(type, name); end

  # source://repl_type_completor//lib/repl_type_completor/result.rb#119
  def method_doc(type, name); end

  # source://repl_type_completor//lib/repl_type_completor/result.rb#138
  def value_doc(type); end
end

# source://repl_type_completor//lib/repl_type_completor/result.rb#8
ReplTypeCompletor::Result::HIDDEN_METHODS = T.let(T.unsafe(nil), Array)

# source://repl_type_completor//lib/repl_type_completor/result.rb#7
ReplTypeCompletor::Result::OPERATOR_METHODS = T.let(T.unsafe(nil), Array)

# source://repl_type_completor//lib/repl_type_completor/result.rb#14
ReplTypeCompletor::Result::RESERVED_WORDS = T.let(T.unsafe(nil), Array)

# source://repl_type_completor//lib/repl_type_completor/scope.rb#7
class ReplTypeCompletor::RootScope
  # @return [RootScope] a new instance of RootScope
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#10
  def initialize(binding, self_object, local_variables); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#56
  def [](name); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#35
  def get_const(nesting, path, _key = T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#45
  def get_cvar(nesting, path, name, _key = T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#82
  def global_variables; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#24
  def level; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#26
  def level_of(_name, _var_type); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#80
  def local_variables; end

  # Returns the value of attribute module_nesting.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#8
  def module_nesting; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#30
  def module_own_constant?(mod, name); end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#28
  def mutable?; end

  # Returns the value of attribute self_object.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#8
  def self_object; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#76
  def self_type; end

  class << self
    # source://repl_type_completor//lib/repl_type_completor/scope.rb#84
    def type_by_name(name); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/scope.rb#103
class ReplTypeCompletor::Scope
  # @return [Scope] a new instance of Scope
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#113
  def initialize(parent, table = T.unsafe(nil), trace_ivar: T.unsafe(nil), trace_lvar: T.unsafe(nil), self_type: T.unsafe(nil), nesting: T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#182
  def [](name); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#218
  def []=(name, value); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#276
  def base_scope; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#333
  def class_variables; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#357
  def conditional(&block); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#340
  def constants; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#170
  def get_const(nesting, path, key = T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#176
  def get_cvar(nesting, path, name, key = T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#245
  def global_variables; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#380
  def has_own?(name); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#286
  def instance_variables; end

  # Returns the value of attribute level.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#109
  def level; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#159
  def level_of(name, var_type); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#252
  def local_variables; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#346
  def merge_jumps; end

  # Returns the value of attribute mergeable_changes.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#109
  def mergeable_changes; end

  # Returns the value of attribute module_nesting.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#109
  def module_nesting; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#125
  def mutable?; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#361
  def never(&block); end

  # Returns the value of attribute parent.
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#109
  def parent; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#365
  def run_branches(*blocks); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#306
  def self_instance_variable_get(name); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#241
  def self_type; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#208
  def set_const(nesting, path, value); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#213
  def set_cvar(nesting, path, name, value); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#137
  def store_jump(type, value, changes); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#327
  def table_class_variables; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#260
  def table_constants; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#280
  def table_instance_variables; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#269
  def table_module_constants(mod); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#147
  def terminate; end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#131
  def terminate_with(type, value); end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#127
  def terminated?; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/scope.rb#153
  def trace?(name); end

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#384
  def update(child_scope); end

  protected

  # source://repl_type_completor//lib/repl_type_completor/scope.rb#393
  def merge(branches); end

  class << self
    # source://repl_type_completor//lib/repl_type_completor/scope.rb#111
    def from_binding(binding, locals); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/scope.rb#104
ReplTypeCompletor::Scope::BREAK_RESULT = T.let(T.unsafe(nil), String)

# source://repl_type_completor//lib/repl_type_completor/scope.rb#105
ReplTypeCompletor::Scope::NEXT_RESULT = T.let(T.unsafe(nil), String)

# source://repl_type_completor//lib/repl_type_completor/scope.rb#107
ReplTypeCompletor::Scope::PATTERNMATCH_BREAK = T.let(T.unsafe(nil), String)

# source://repl_type_completor//lib/repl_type_completor/scope.rb#106
ReplTypeCompletor::Scope::RETURN_RESULT = T.let(T.unsafe(nil), String)

# source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#9
class ReplTypeCompletor::TypeAnalyzer
  # @return [TypeAnalyzer] a new instance of TypeAnalyzer
  #
  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#38
  def initialize(dig_targets); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#946
  def assign_numbered_parameters(maximum, scope, args, _kwargs); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#898
  def assign_parameters(node, scope, args, kwargs); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#856
  def assign_required_parameter(node, value, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1026
  def class_or_value_to_instance(type); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#847
  def const_path_write(receiver, name, value, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#42
  def evaluate(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#801
  def evaluate_alias_global_variable_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#800
  def evaluate_alias_method_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#300
  def evaluate_and_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#302
  def evaluate_and_or(node, scope, and_op:); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#158
  def evaluate_array_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#219
  def evaluate_back_reference_read_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#555
  def evaluate_begin_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#505
  def evaluate_break_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#313
  def evaluate_call_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#233
  def evaluate_call_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#805
  def evaluate_call_node_arguments(call_node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#312
  def evaluate_call_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#314
  def evaluate_call_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#318
  def evaluate_call_write(node, scope, operator, write_name); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#962
  def evaluate_case_in_condition(target, node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#717
  def evaluate_case_match_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#703
  def evaluate_case_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#957
  def evaluate_case_when_condition(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#628
  def evaluate_class_module(node, scope, is_class); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#626
  def evaluate_class_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#359
  def evaluate_class_variable_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#349
  def evaluate_class_variable_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#368
  def evaluate_class_variable_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_class_variable_read_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_class_variable_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#384
  def evaluate_constant_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#872
  def evaluate_constant_node_info(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#378
  def evaluate_constant_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#389
  def evaluate_constant_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#403
  def evaluate_constant_path_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#196
  def evaluate_constant_path_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#395
  def evaluate_constant_path_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#411
  def evaluate_constant_path_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#419
  def evaluate_constant_path_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_constant_read_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_constant_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#65
  def evaluate_def_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#748
  def evaluate_defined_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#485
  def evaluate_else_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#148
  def evaluate_embedded_statements_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#153
  def evaluate_embedded_variable_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#205
  def evaluate_false_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#753
  def evaluate_flip_flop_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#106
  def evaluate_float_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#684
  def evaluate_for_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#548
  def evaluate_forwarding_super_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#359
  def evaluate_global_variable_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#349
  def evaluate_global_variable_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#368
  def evaluate_global_variable_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_global_variable_read_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_global_variable_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#164
  def evaluate_hash(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#162
  def evaluate_hash_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#469
  def evaluate_if_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#110
  def evaluate_imaginary_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#771
  def evaluate_implicit_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#316
  def evaluate_index_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#315
  def evaluate_index_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#317
  def evaluate_index_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#359
  def evaluate_instance_variable_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#349
  def evaluate_instance_variable_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#368
  def evaluate_instance_variable_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_instance_variable_read_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_instance_variable_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#104
  def evaluate_integer_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#787
  def evaluate_interpolated_match_last_line_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#143
  def evaluate_interpolated_regular_expression_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#128
  def evaluate_interpolated_string_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#138
  def evaluate_interpolated_symbol_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#133
  def evaluate_interpolated_x_string_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#508
  def evaluate_jump(node, scope, mode); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#163
  def evaluate_keyword_hash_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#426
  def evaluate_lambda_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1091
  def evaluate_list_splat_items(list, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#359
  def evaluate_local_variable_and_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#349
  def evaluate_local_variable_operator_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#368
  def evaluate_local_variable_or_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_local_variable_read_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_local_variable_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#783
  def evaluate_match_last_line_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#973
  def evaluate_match_pattern(value, pattern, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#735
  def evaluate_match_predicate_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#729
  def evaluate_match_required_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#775
  def evaluate_match_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#803
  def evaluate_missing_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#627
  def evaluate_module_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#759
  def evaluate_multi_target_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1049
  def evaluate_multi_write(node, values, scope, evaluated_receivers); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#447
  def evaluate_multi_write_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1063
  def evaluate_multi_write_receiver(node, scope, evaluated_receivers); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#506
  def evaluate_next_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#207
  def evaluate_nil_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#215
  def evaluate_numbered_reference_read_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#301
  def evaluate_or_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#192
  def evaluate_parentheses_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#796
  def evaluate_post_execution_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#792
  def evaluate_pre_execution_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#53
  def evaluate_program_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#741
  def evaluate_range_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#108
  def evaluate_rational_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#538
  def evaluate_redo_node(_node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#223
  def evaluate_reference_read(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#438
  def evaluate_reference_write(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#120
  def evaluate_regular_expression_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#602
  def evaluate_rescue_modifier_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#578
  def evaluate_rescue_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#543
  def evaluate_retry_node(_node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#507
  def evaluate_return_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#201
  def evaluate_self_node(_node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#608
  def evaluate_singleton_class_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#213
  def evaluate_source_encoding_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#209
  def evaluate_source_file_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#211
  def evaluate_source_line_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#765
  def evaluate_splat_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#57
  def evaluate_statements_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#122
  def evaluate_string_concat_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#112
  def evaluate_string_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#550
  def evaluate_super_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#118
  def evaluate_symbol_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#203
  def evaluate_true_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#802
  def evaluate_undef_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#477
  def evaluate_unless_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#489
  def evaluate_until_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#359
  def evaluate_variable_and_write(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#349
  def evaluate_variable_operator_write(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#368
  def evaluate_variable_or_write(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#489
  def evaluate_while_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#489
  def evaluate_while_until(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1033
  def evaluate_write(node, value, scope, evaluated_receivers); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#114
  def evaluate_x_string_node(_node, _scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#533
  def evaluate_yield_node(node, scope); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1129
  def method_call(receiver, method_name, args, kwargs, block, scope, name_match: T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1113
  def partition_to_array(value, method); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1106
  def sized_splat(value, method, size); end

  class << self
    # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#1168
    def calculate_target_type_scope(binding, parents, target); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#10
class ReplTypeCompletor::TypeAnalyzer::DigTarget
  # @return [DigTarget] a new instance of DigTarget
  #
  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#11
  def initialize(parents, receiver, &block); end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#17
  def dig?(node); end

  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#19
  def resolve(type, scope); end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#18
  def target?(node); end
end

# source://repl_type_completor//lib/repl_type_completor/type_analyzer.rb#24
ReplTypeCompletor::TypeAnalyzer::OBJECT_METHODS = T.let(T.unsafe(nil), Hash)

# source://repl_type_completor//lib/repl_type_completor/types.rb#8
module ReplTypeCompletor::Types
  class << self
    # source://repl_type_completor//lib/repl_type_completor/types.rb#388
    def _match_free_variable(vars, rbs_type, value, accumulator); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#291
    def array_of(*types); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#35
    def class_name_of(klass); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#296
    def from_rbs_type(return_type, self_type, extra_vars = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://repl_type_completor//lib/repl_type_completor/types.rb#126
    def intersect?(a, b); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#25
    def load_rbs_builder; end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#380
    def match_free_variables(vars, types, values); end

    # @return [Boolean]
    #
    # source://repl_type_completor//lib/repl_type_completor/types.rb#376
    def method_return_bottom?(method); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#52
    def method_return_type(type, method_name); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#17
    def preload_rbs_builder; end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#11
    def rbs_builder; end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#11
    def rbs_load_error; end

    # @return [Boolean]
    #
    # source://repl_type_completor//lib/repl_type_completor/types.rb#13
    def rbs_load_started?; end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#71
    def rbs_methods(type, method_name, args_types, kwargs_type, has_block); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#40
    def rbs_search_method(klass, method_name, singleton); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#138
    def type_from_object(object); end

    # source://repl_type_completor//lib/repl_type_completor/types.rb#152
    def union_type_from_objects(objects); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/types.rb#228
ReplTypeCompletor::Types::ARRAY = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#289
ReplTypeCompletor::Types::BOOLEAN = T.let(T.unsafe(nil), ReplTypeCompletor::Types::UnionType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#230
ReplTypeCompletor::Types::CLASS = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#227
ReplTypeCompletor::Types::COMPLEX = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#219
ReplTypeCompletor::Types::FALSE = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#225
ReplTypeCompletor::Types::FLOAT = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#229
ReplTypeCompletor::Types::HASH = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#222
ReplTypeCompletor::Types::INTEGER = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#175
class ReplTypeCompletor::Types::InstanceType
  # @return [InstanceType] a new instance of InstanceType
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#177
  def initialize(klass, params = T.unsafe(nil)); end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#183
  def all_methods; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#184
  def constants; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#195
  def inspect; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#203
  def inspect_without_params; end

  # Returns the value of attribute klass.
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#176
  def klass; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#182
  def methods; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#186
  def nillable?; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#187
  def nonnillable; end

  # Returns the value of attribute params.
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#176
  def params; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#188
  def rbs_methods; end

  # @yield [_self]
  # @yieldparam _self [ReplTypeCompletor::Types::InstanceType] the object that the method was called on
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#181
  def transform; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#185
  def types; end
end

# source://repl_type_completor//lib/repl_type_completor/types.rb#231
ReplTypeCompletor::Types::MODULE = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#216
ReplTypeCompletor::Types::NIL = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#217
ReplTypeCompletor::Types::OBJECT = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#9
ReplTypeCompletor::Types::OBJECT_TO_TYPE_SAMPLE_SIZE = T.let(T.unsafe(nil), Integer)

# source://repl_type_completor//lib/repl_type_completor/types.rb#232
ReplTypeCompletor::Types::PROC = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#223
ReplTypeCompletor::Types::RANGE = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#226
ReplTypeCompletor::Types::RATIONAL = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#224
ReplTypeCompletor::Types::REGEXP = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#221
ReplTypeCompletor::Types::STRING = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#220
ReplTypeCompletor::Types::SYMBOL = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#158
class ReplTypeCompletor::Types::SingletonType
  # @return [SingletonType] a new instance of SingletonType
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#160
  def initialize(module_or_class); end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#165
  def all_methods; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#166
  def constants; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#170
  def inspect; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#164
  def methods; end

  # Returns the value of attribute module_or_class.
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#159
  def module_or_class; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#168
  def nillable?; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#169
  def nonnillable; end

  # @yield [_self]
  # @yieldparam _self [ReplTypeCompletor::Types::SingletonType] the object that the method was called on
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#163
  def transform; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#167
  def types; end
end

# source://repl_type_completor//lib/repl_type_completor/types.rb#218
ReplTypeCompletor::Types::TRUE = T.let(T.unsafe(nil), ReplTypeCompletor::Types::InstanceType)

# source://repl_type_completor//lib/repl_type_completor/types.rb#234
class ReplTypeCompletor::Types::UnionType
  # @return [UnionType] a new instance of UnionType
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#237
  def initialize(*types); end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#284
  def all_methods; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#285
  def constants; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#286
  def inspect; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#283
  def methods; end

  # @return [Boolean]
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#264
  def nillable?; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#268
  def nonnillable; end

  # source://repl_type_completor//lib/repl_type_completor/types.rb#260
  def transform(&block); end

  # Returns the value of attribute types.
  #
  # source://repl_type_completor//lib/repl_type_completor/types.rb#235
  def types; end

  class << self
    # source://repl_type_completor//lib/repl_type_completor/types.rb#272
    def [](*types); end
  end
end

# source://repl_type_completor//lib/repl_type_completor/version.rb#4
ReplTypeCompletor::VERSION = T.let(T.unsafe(nil), String)
