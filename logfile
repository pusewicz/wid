chdir(/Applications/MacVim.app/Contents/Resources/vim)
fchdir() to previous dir
sourcing "$VIM/vimrc"
line 1: " System vimrc file for MacVim

line 2: "

line 3: " Author:       Bjorn Winckler <bjorn.winckler@gmail.com>

line 4: " Maintainer:   macvim-dev (https://github.com/macvim-dev)

line 5: 

line 6: set nocompatible

line 7: 

line 8: " The default for 'backspace' is very confusing to new users, so change it to a

line 9: " more sensible value.  Add "set backspace&" to your ~/.vimrc to reset it.

line 10: set backspace+=indent,eol,start

line 11: 

line 12: " Python2

line 13: " MacVim is configured by default in the binary release to use the

line 14: " pre-installed System python2 version. However, following code tries to

line 15: " find a Homebrew, MacPorts or an installation from python.org:

line 16: if exists("&pythondll") && exists("&pythonhome")

line 17:   " Homebrew python 2.7

line 18:   if filereadable("/usr/local/Frameworks/Python.framework/Versions/2.7/Python")

line 19:     set pythondll=/usr/local/Frameworks/Python.framework/Versions/2.7/Python

line 20: 

line 21:   " MacPorts python 2.7

line 22:   elseif filereadable("/opt/local/Library/Frameworks/Python.framework/Versions/2.7/Python")

line 23:     set pythondll=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/Python

line 24: 

line 25:   " https://www.python.org/downloads/mac-osx/

line 26:   elseif filereadable("/Library/Frameworks/Python.framework/Versions/2.7/Python")

line 27:     set pythondll=/Library/Frameworks/Python.framework/Versions/2.7/Python

line 28:   endif

line 29: endif

line 30: 

line 31: " Python3

line 32: " MacVim is configured by default in the binary release to set

line 33: " pythonthreedll to Homebrew python3. If it cannot be found, the following

line 34: " code tries to find Python3 from other popular locations.  Note that we are

line 35: " using "Current" for the version, because Vim supports the stable ABI and

line 36: " therefore any new version of Python3 will work.

line 37: if exists("&pythonthreedll") && exists("&pythonthreehome") && !filereadable(&pythonthreedll)

line 39:   " MacPorts python

line 40:   if filereadable("/opt/local/Library/Frameworks/Python.framework/Versions/Current/Python")

line 41:     set pythonthreedll=/opt/local/Library/Frameworks/Python.framework/Versions/Current/Python

line 42: 

line 43:   " macOS default Python, installed by 'xcode-select --install'

line 44:   elseif filereadable("/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/Current/Python3")

line 45:     set pythonthreedll=/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/Current/Python3

line 46: 

line 47:   " https://www.python.org/downloads/mac-osx/

line 48:   elseif filereadable("/Library/Frameworks/Python.framework/Versions/Current/Python")

line 49:     set pythonthreedll=/Library/Frameworks/Python.framework/Versions/Current/Python

line 50:   endif

line 51: endif

line 52: 

line 53: " vim: sw=2 ts=2 et

finished sourcing $VIM/vimrc
chdir(/Users/piotr)
fchdir() to previous dir
could not source "$HOME/.vimrc"
chdir(/Users/piotr/.vim)
fchdir() to previous dir
could not source "~/.vim/vimrc"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
sourcing "~/.config/vim/vimrc"
line 1: set rubydll=/opt/homebrew/Cellar/ruby@3.2/3.2.3/lib/libruby.dylib

line 2: 

line 3: function! g:ToggleVerbose()

line 12: 

line 13: source ~/.config/vim/init/options.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 13: sourcing "/Users/piotr/.config/vim/init/options.vim"
line 1: " fonts are set in ~/.gvimrc

line 2: scriptencoding utf-8

line 3: 

line 4: set encoding=UTF-8

line 5: set exrc " Enable per-directory .vimrc files

line 6: set secure " Disable unsafe commands in local .vimrc files

line 7: 

line 8: let g:endwise_no_mappings = 1

line 9: 

line 10: " Make cursor change shape in vim & Kitty

line 11: let &t_SI = "\<Esc>[6 q"

line 12: let &t_SR = "\<Esc>[4 q"

line 13: let &t_EI = "\<Esc>[2 q"

line 14: 

line 15: let mapleader = ' '

line 16: let maplocalleader = ','

line 17: 

line 18: " Limit syntax highlighting

line 19: autocmd BufEnter * :syntax sync maxlines=256

line 20: autocmd BufEnter * :syntax sync minlines=256

line 21: " syntax sync minlines=256 " try fromstart

line 22: " syntax sync maxlines=256

line 23: set synmaxcol=512

line 24: 

line 25: " set undodir=~/.vim/undodir

line 26: " set undofile

line 27: " set foldlevel=99 " Open all folds by default

line 28: set autoindent    " Keep the indent when creating a new line

line 29: set breakindent   " Break the line with the same indent

line 30: set clipboard+=unnamed " use system clipboard

line 31: set colorcolumn=72

line 32: set completeopt=menu,menuone,preview,noinsert,noselect,fuzzy " Autocompletion

line 33: set copyindent    " Copy the previous indentation on autoindent

line 34: set expandtab " Use spaces instead of tabs

line 35: set fillchars=vert:\│ " Make window divider nicer

line 36: set foldmethod=indent " Fold based on indent

line 37: set foldnestmax=3 " Maximum number of nested folds

line 38: set hidden " allow buffers to be hidden and not open in any window

line 39: set hlsearch " highlight search results

line 40: set ignorecase " Ignore case when searching

line 41: set lazyredraw " Don't redraw while executing macros (good performance config)

line 42: set list listchars=tab:»·,eol:¬,extends:…,nbsp:␣,trail:· " Show special characters

line 43: set magic " For regular expressions turn magic on

line 44: set mouse=a       " allow mouse interactions in terminal

line 45: set nobackup

line 46: set noerrorbells " No annoying sound on errors

line 47: set nofoldenable " Don't fold by default

line 48: set noshowmode    " mode status is shown in the lightline

line 49: set noswapfile

line 50: set novisualbell

line 51: set nowrap

line 52: set number relativenumber " enable relative numbers

line 53: set numberwidth=4

line 54: set pumheight=20 " Only show X positions in the popup

line 55: set shiftround " Round indent to multiple of shiftwidth

line 56: set shiftwidth=2

line 57: set shortmess+=c " Don't show Match 1 of 2

line 58: set showcmd       " display incomplete commands

line 59: set showmatch " Show matching brackets when text indicator is over them

line 60: set signcolumn=yes

line 61: set signcolumn=yes " Always show the sign column, otherwise it would shift the text each time

line 62: set smartcase " When searching try to be smart about cases

line 63: set smartindent " Make indent smart again

line 64: set softtabstop=2

line 65: set splitbelow splitright " Open new split panes to right and bottom, which feels more natural

line 66: set tabstop=2 " Insert 2 spaces for a tab

line 67: set termguicolors

line 68: set ttyfast " Send more characters to the terminal for faster updates

line 69: set updatetime=250 " Faster completion

line 70: set timeoutlen=300

line 71: set visualbell t_vb=     " no visual bell & flash

line 72: set whichwrap+=<,>,[,],h,l

line 73: set wildmenu " Show the command-line completion options in a nice menu

line 74: set wildmode=longest:full,list:full " show the popup and select the option

line 75: set wildoptions+=fuzzy " Use fuzzy matching for tab completion

line 76: set wildoptions=pum " Show the popup menu when using tab completion for commands

line 77: set wildignore=*.png,*.jpg,*.jpeg,*.gif,*.pdf,*.zip,*.exe,*.xls

line 78: set wildignore+=*.min.js,*.min.css

line 79: set wildignore+=*/node_modules/*,*/venv/*,*/target/*,*/dist/*,*/build/*,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

line 80: set wildignore+=*/tmp/*

line 81: set wildignore+=*/test/vcr_cassettes/*.json

line 82: 

line 83: set winwidth=35 " Set the width of the window to 35 characters

line 84: set winheight=10 " Set the height of the window to 10 lines

line 85: set winminwidth=25 " Set the minimum width of the window to 35 characters

line 86: set winminheight=5 " Set the minimum height of the window to 5 lines

line 87: 

line 88: set diffopt+=iwhite " No whitespace in vimdiff

line 89: set diffopt+=algorithm:patience

line 90: set diffopt+=indent-heuristic

line 91: 

line 92: " Wrapping options

line 93: set formatoptions=tc " wrap text and comments using textwidth

line 94: set formatoptions+=r " continue comments when pressing ENTER in I mode

line 95: set formatoptions+=q " enable formatting of comments with gq

line 96: set formatoptions+=n " detect lists for formatting

line 97: set formatoptions+=b " auto-wrap in insert mode, and do not wrap old long lines

line 98: 

line 99: set tags=./tags,tags,.git/tags " Search for tags in the current directory and up

line 100: 

line 101: set laststatus=2 " Always show the status line

line 102: set showtabline=2 " Always show the tab line

line 103: 

line 104: set cursorlineopt=both

line 105: 

line 106: setlocal spell

Searching for "spell/en.utf-8.spl" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/spell/en.utf-8.spl"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/spell/en.utf-8.spl"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/spell/en.utf-8.spl"
Reading spell file "/Applications/MacVim.app/Contents/Resources/vim/runtime/spell/en.utf-8.spl"
Searching for "spell/en.utf-8.add.spl" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/spell/en.utf-8.add.spl"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/spell/en.utf-8.add.spl"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/spell/en.utf-8.add.spl"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/spell/en.utf-8.add.spl"
Searching for "/Users/piotr/.config/vim/after/spell/en.utf-8.add.spl"
not found in 'runtimepath': "spell/en.utf-8.add.spl"
line 107: set spelllang=en

Searching for "spell/en.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/spell/en.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/spell/en.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/spell/en.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/spell/en.vim"
Searching for "/Users/piotr/.config/vim/after/spell/en.vim"
not found in 'runtimepath': "spell/en.vim"
line 108: filetype plugin indent on

Searching for "filetype.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 108: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
line 1: " Vim support file to detect file types

line 2: "

line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 4: " Last Change:^I2024 May 31

line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 6: 

line 7: " Listen very carefully, I will say this only once

line 8: if exists("did_load_filetypes")

line 9:   finish

line 10: endif

line 11: let did_load_filetypes = 1

line 12: 

line 13: " Line continuation is used here, remove 'C' from 'cpoptions'

line 14: let s:cpo_save = &cpo

line 15: set cpo&vim

line 16: 

line 17: augroup filetypedetect

line 18: 

line 19: " Ignored extensions

line 20: if exists("*fnameescape")

line 21: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))

line 23: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~\+$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short

line 30: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif

line 34: elseif &verbose > 0

line 35:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"

line 36: endif

line 37: 

line 38: " Pattern used to match file names which should not be inspected.

line 39: " Currently finds compressed files.

line 40: if !exists("g:ft_ignore_pat")

line 41:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'

line 42: endif

line 43: 

line 44: " Function used for patterns that end in a star: don't set the filetype if the

line 45: " file name matches ft_ignore_pat.

line 46: " When using this, the entry should probably be further down below with the

line 47: " other StarSetf() calls.

line 48: func s:StarSetf(ft)

line 53: 

line 54: " Vim help file

line 55: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help

line 56: 

line 57: " Abaqus or Trasys

line 58: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()

line 59: 

line 60: " 8th (Firth-derivative)

line 61: au BufNewFile,BufRead *.8th^I^I^Isetf 8th

line 62: 

line 63: " A-A-P recipe

line 64: au BufNewFile,BufRead *.aap^I^I^Isetf aap

line 65: 

line 66: " A2ps printing utility

line 67: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps

line 68: 

line 69: " ABAB/4

line 70: au BufNewFile,BufRead *.abap^I^I^Isetf abap

line 71: 

line 72: " ABC music notation

line 73: au BufNewFile,BufRead *.abc^I^I^Isetf abc

line 74: 

line 75: " ABEL

line 76: au BufNewFile,BufRead *.abl^I^I^Isetf abel

line 77: 

line 78: " AceDB

line 79: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb

line 80: 

line 81: " Ada (83, 9X, 95)

line 82: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada

line 83: if has("vms")

line 84:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada

line 85: else

line 86:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada

line 87: endif

line 88: 

line 89: " AHDL

line 90: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl

line 91: 

line 92: " AIDL

line 93: au BufNewFile,BufRead *.aidl^I^I^Isetf aidl

line 94: 

line 95: " AMPL

line 96: au BufNewFile,BufRead *.run^I^I^Isetf ampl

line 97: 

line 98: " Ant

line 99: au BufNewFile,BufRead build.xml^I^I^Isetf ant

line 100: 

line 101: " ANTLR / PCCTS

line 102: "au BufNewFile,BufRead *.g^I^I^Isetf antlr

line 103: au BufNewFile,BufRead *.g^I^I^Isetf pccts

line 104: 

line 105: " ANTLR 4

line 106: au BufNewFile,BufRead *.g4^I^I^Isetf antlr4

line 107: 

line 108: " Arduino

line 109: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino

line 110: 

line 111: " Ash of busybox

line 112: au BufNewFile,BufRead .ash_history^I^Isetf sh

line 113: 

line 114: " Asymptote

line 115: au BufNewFile,BufRead *.asy^I^Isetf asy

line 116: 

line 117: " Apache config file

line 118: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache

line 119: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache

line 120: 

line 121: " XA65 MOS6510 cross assembler

line 122: au BufNewFile,BufRead *.a65^I^I^Isetf a65

line 123: 

line 124: " Applescript

line 125: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript

line 126: 

line 127: " Automake (must be before the *.am pattern)

line 128: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake

line 129: 

line 130: " Applix ELF

line 131: au BufNewFile,BufRead *.am^I^I^Isetf elf

line 132: 

line 133: " ALSA configuration

line 134: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf

line 135: 

line 136: " Arc Macro Language

line 137: au BufNewFile,BufRead *.aml^I^I^Isetf aml

line 138: 

line 139: " APT config file

line 140: au BufNewFile,BufRead apt.conf^I^I       setf aptconf

line 141: au BufNewFile,BufRead */.aptitude/config       setf aptconf

line 142: " more generic pattern far down

line 143: 

line 144: " Arch Inventory file

line 145: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch

line 146: 

line 147: " ART*Enterprise (formerly ART-IM)

line 148: au BufNewFile,BufRead *.art^I^I^Isetf art

line 149: 

line 150: " AsciiDoc

line 151: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc

line 152: 

line 153: " ASN.1

line 154: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn

line 155: 

line 156: " Active Server Pages (with Visual Basic Script)

line 157: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif

line 163: 

line 164: " Active Server Pages (with Perl or Visual Basic Script)

line 165: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif

line 173: 

line 174: " Grub (must be before pattern *.lst)

line 175: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub

line 176: 

line 177: " Maxima, see:

line 178: " https://maxima.sourceforge.io/docs/manual/maxima_71.html#file_005ftype_005fmaxima

line 179: " Must be before the pattern *.mac.

line 180: " *.dem omitted - also used by gnuplot demos

line 181: " *.mc omitted - used by dist#ft#McSetf()

line 182: au BufNewFile,BufRead *.demo,*.dm{1,2,3,t},*.wxm,maxima-init.mac setf maxima

line 183: 

line 184: " Assembly (all kinds)

line 185: " *.lst is not pure assembly, it has two extra columns (address, byte codes)

line 186: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()

line 187: 

line 188: " Assembly - Macro (VAX)

line 189: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm

line 190: 

line 191: " Astro

line 192: au BufNewFile,BufRead *.astro^I^I^Isetf astro

line 193: 

line 194: " Atlas

line 195: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas

line 196: 

line 197: " Atom is based on XML

line 198: au BufNewFile,BufRead *.atom^I^I^Isetf xml

line 199: 

line 200: " Authzed

line 201: au BufNewFile,BufRead *.zed^I^I^Isetf authzed

line 202: 

line 203: " Autoit v3

line 204: au BufNewFile,BufRead *.au3^I^I^Isetf autoit

line 205: 

line 206: " Autohotkey

line 207: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey

line 208: 

line 209: " Autotest .at files are actually m4

line 210: au BufNewFile,BufRead *.at^I^I^Isetf m4

line 211: 

line 212: " Avenue

line 213: au BufNewFile,BufRead *.ave^I^I^Isetf ave

line 214: 

line 215: " Awk

line 216: au BufNewFile,BufRead *.awk,*.gawk^I^Isetf awk

line 217: 

line 218: " B

line 219: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b

line 220: 

line 221: " BASIC or Visual Basic

line 222: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTbas()

line 223: au BufNewFile,BufRead *.bi,*.bm^I^I^Icall dist#ft#FTbas()

line 224: 

line 225: " Bass

line 226: au BufNewFile,BufRead *.bass^I^I^Isetf bass

line 227: 

line 228: " IBasic file (similar to QBasic)

line 229: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic

line 230: 

line 231: " FreeBasic file (similar to QBasic)

line 232: au BufNewFile,BufRead *.fb^I^I^Isetf freebasic

line 233: 

line 234: " Batch file for MSDOS. See dist#ft#FTsys for *.sys

line 235: au BufNewFile,BufRead *.bat^I^I^Isetf dosbatch

line 236: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.

line 237: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif

line 239: " ABB RAPID or Batch file for MSDOS.

line 240: au BufNewFile,BufRead *.sys\c^I^I^Icall dist#ft#FTsys()

line 241: 

line 242: " Batch file for 4DOS

line 243: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()

line 244: 

line 245: " BC calculator

line 246: au BufNewFile,BufRead *.bc^I^I^Isetf bc

line 247: 

line 248: " BDF font

line 249: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf

line 250: 

line 251: " Beancount

line 252: au BufNewFile,BufRead *.beancount^I^Isetf beancount

line 253: 

line 254: " BibTeX bibliography database file

line 255: au BufNewFile,BufRead *.bib^I^I^Isetf bib

line 256: 

line 257: " BibTeX Bibliography Style

line 258: au BufNewFile,BufRead *.bst^I^I^Isetf bst

line 259: 

line 260: " Bicep

line 261: au BufNewFile,BufRead *.bicep,*.bicepparam^I^I^Isetf bicep

line 262: 

line 263: " BIND configuration

line 264: " sudoedit uses namedXXXX.conf

line 265: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named

line 266: 

line 267: " BIND zone

line 268: au BufNewFile,BufRead named.root^I^Isetf bindzone

line 269: au BufNewFile,BufRead *.zone^I^I^Isetf bindzone

line 270: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')

line 271: 

line 272: " Blade

line 273: au BufNewFile,BufRead *.blade.php^I^Isetf blade

line 274: 

line 275: " Blank

line 276: au BufNewFile,BufRead *.bl^I^I^Isetf blank

line 277: 

line 278: " Bitbake

line 279: au BufNewFile,BufRead *.bb,*.bbappend,*.bbclass,*/build/conf/*.conf,*/meta{-*,}/conf/*.conf^Isetf bitbake

line 280: 

line 281: " Blkid cache file

line 282: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml

line 283: 

line 284: " BSDL

line 285: au BufNewFile,BufRead *.bsd,*.bsdl^I^I^Isetf bsdl

line 286: 

line 287: " Bazel (https://bazel.build) and Buck2 (https://buck2.build/)

line 288: autocmd BufRead,BufNewFile *.bzl,*.bazel,WORKSPACE,WORKSPACE.bzlmod^Isetf bzl

line 289: if has("fname_case")

line 290:   " There is another check for BUILD and BUCK further below.

line 291:   autocmd BufRead,BufNewFile *.BUILD,BUILD,BUCK^I^Isetf bzl

line 292: endif

line 293: 

line 294: " Busted (Lua unit testing framework - configuration files)

line 295: au BufNewFile,BufRead .busted^I^I^Isetf lua

line 296: 

line 297: " Bundle config

line 298: au BufNewFile,BufRead */.bundle/config^I^I^Isetf yaml

line 299: 

line 300: " C or lpc

line 301: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()

line 302: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc

line 303: 

line 304: " Cairo

line 305: au BufNewFile,BufRead *.cairo^I^I^Isetf cairo

line 306: 

line 307: " Calendar

line 308: au BufNewFile,BufRead calendar^I^I^Isetf calendar

line 309: 

line 310: " Cap'n Proto

line 311: au BufNewFile,BufRead *.capnp^I^I^Isetf capnp

line 312: 

line 313: " Cgdb config file

line 314: au BufNewFile,BufRead cgdbrc^I^I^Isetf cgdbrc

line 315: 

line 316: " C#

line 317: au BufNewFile,BufRead *.cs,*.csx^I^Isetf cs

line 318: 

line 319: " CSDL

line 320: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl

line 321: 

line 322: " Ctags

line 323: au BufNewFile,BufRead *.ctags^I^I^Isetf conf

line 324: 

line 325: " Cabal

line 326: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal

line 327: 

line 328: " Cdrdao TOC or LaTeX \tableofcontents files

line 329: au BufNewFile,BufRead *.toc if getline(1) =~# '\\contentsline' |setf tex|else|setf cdrtoc|endif

line 331: 

line 332: " Cdrdao config

line 333: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf

line 334: 

line 335: " Cedar

line 336: au BufNewFile,BufRead *.cedar^I^I^Isetf cedar

line 337: 

line 338: " Cfengine

line 339: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine

line 340: 

line 341: " ChaiScript

line 342: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript

line 343: 

line 344: " Chatito

line 345: au BufNewFile,BufRead *.chatito^I^I^Isetf chatito

line 346: 

line 347: " Chktex

line 348: au BufRead,BufNewFile .chktexrc^I^I^Isetf conf

line 349: 

line 350: " Chuck

line 351: au BufNewFile,BufRead *.ck^I^I^Isetf chuck

line 352: 

line 353: " Comshare Dimension Definition Language

line 354: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl

line 355: 

line 356: " Conary Recipe

line 357: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe

line 358: 

line 359: " Corn config file

line 360: au BufNewFile,BufRead *.corn^I^I^Isetf corn

line 361: 

line 362: " ChainPack Object Notation (CPON)

line 363: au BufNewFile,BufRead *.cpon^I^I^Isetf cpon

line 364: 

line 365: " Controllable Regex Mutilator

line 366: au BufNewFile,BufRead *.crm^I^I^Isetf crm

line 367: 

line 368: " Cyn++

line 369: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp

line 370: 

line 371: " Cynlib

line 372: " .cc and .cpp files can be C++ or Cynlib.

line 373: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif

line 375: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif

line 377: 

line 378: " Cypher query language

line 379: au BufNewFile,BufRead *.cypher^I^I^Isetf cypher

line 380: 

line 381: " C++

line 382: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp

line 383: if has("fname_case")

line 384: ^Iau BufNewFile,BufRead *.C,*.H if !&fileignorecase | setf cpp | endif

line 385: endif

line 386: 

line 387: " C++ 20 modules (clang)

line 388: " https://clang.llvm.org/docs/StandardCPlusPlusModules.html#file-name-requirement

line 389: au BufNewFile,BufRead *.cppm,*.ccm,*.cxxm,*.c++m setf cpp

line 390: 

line 391: " .h files can be C, Ch C++, ObjC or ObjC++.

line 392: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is

line 393: " detected automatically.

line 394: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()

line 395: 

line 396: " Ch (CHscript)

line 397: au BufNewFile,BufRead *.chf^I^I^Isetf ch

line 398: 

line 399: " TLH files are C++ headers generated by Visual C++'s #import from typelibs

line 400: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp

line 401: 

line 402: " Cascading Style Sheets

line 403: au BufNewFile,BufRead *.css^I^I^Isetf css

line 404: 

line 405: " Century Term Command Scripts (*.cmd too)

line 406: au BufNewFile,BufRead *.con^I^I^Isetf cterm

line 407: 

line 408: " Changelog

line 409: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch,*/debian/changelog^Isetf debchangelog

line 411: 

line 412: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif

line 418: 

line 419: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif

line 423: 

line 424: " CHILL

line 425: au BufNewFile,BufRead *..ch^I^I^Isetf chill

line 426: 

line 427: " Changes for WEB and CWEB or CHILL

line 428: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()

line 429: 

line 430: " ChordPro

line 431: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro

line 432: 

line 433: " Clangd

line 434: au BufNewFile,BufRead .clangd^I^I^Isetf yaml

line 435: 

line 436: " Clang-format

line 437: au BufNewFile,BufRead .clang-format^I^Isetf yaml

line 438: 

line 439: " Clang-tidy

line 440: au BufNewFile,BufRead .clang-tidy^I^Isetf yaml

line 441: 

line 442: " Matplotlib

line 443: au BufNewFile,BufRead *.mplstyle,matplotlibrc^Isetf yaml

line 444: 

line 445: " Clean

line 446: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean

line 447: 

line 448: " Clever

line 449: au BufNewFile,BufRead *.eni^I^I^Isetf cl

line 450: 

line 451: " Clever or dtd

line 452: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()

line 453: 

line 454: " Cling

line 455: au BufNewFile,BufRead .cling_history^I^Isetf cpp

line 456: 

line 457: " Clipper, FoxPro, ABB RAPID or eviews

line 458: au BufNewFile,BufRead *.prg\c^I^I^Icall dist#ft#FTprg()

line 459: 

line 460: " Clojure

line 461: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure

line 462: 

line 463: " Cmake

line 464: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake

line 465: 

line 466: " CmakeCache

line 467: autocmd BufRead,BufNewFile CMakeCache.txt^I^I^Isetf cmakecache

line 468: 

line 469: " Cmusrc

line 470: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc

line 471: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc

line 472: 

line 473: " Cobol

line 474: au BufNewFile,BufRead *.cbl,*.cob^Isetf cobol

line 475: "   cobol or zope form controller python script? (heuristic)

line 476: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif

line 482: 

line 483: " Coco/R

line 484: au BufNewFile,BufRead *.atg^I^I^Isetf coco

line 485: 

line 486: " Cold Fusion

line 487: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf

line 488: 

line 489: " Configure scripts

line 490: au BufNewFile,BufRead configure.in,configure.ac setf config

line 491: 

line 492: " Cooklang

line 493: au BufNewFile,BufRead *.cook^I^I^Isetf cook

line 494: 

line 495: " Clinical Quality Language (CQL)

line 496: " .cql is also mentioned as the 'XDCC Catcher queue list' file extension.

line 497: " If support for XDCC Catcher is needed in the future, the contents of the file

line 498: " needs to be inspected.

line 499: au BufNewFile,BufRead *.cql^I^I^Isetf cqlang

line 500: 

line 501: " Crystal

line 502: au BufNewFile,BufRead *.cr^I^I^Isetf crystal

line 503: 

line 504: " CSV Files

line 505: au BufNewFile,BufRead *.csv^I^I^Isetf csv

line 506: 

line 507: " CUDA Compute Unified Device Architecture

line 508: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda

line 509: 

line 510: " Cue

line 511: au BufNewFile,BufRead *.cue^I^I^Isetf cue

line 512: 

line 513: " Debian devscripts

line 514: au BufNewFile,BufRead devscripts.conf,.devscripts^Isetf sh

line 515: 

line 516: " Dockerfile; Podman uses the same syntax with name Containerfile

line 517: " Also see Dockerfile.* below.

line 518: au BufNewFile,BufRead Containerfile,Dockerfile,dockerfile,*.[dD]ockerfile^Isetf dockerfile

line 519: 

line 520: " WildPackets EtherPeek Decoder

line 521: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd

line 522: 

line 523: " Enlightenment configuration files

line 524: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c

line 525: 

line 526: " Eterm

line 527: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm

line 528: 

line 529: " Elixir or Euphoria

line 530: au BufNewFile,BufRead *.ex call dist#ft#ExCheck()

line 531: 

line 532: " Elixir

line 533: au BufRead,BufNewFile mix.lock,*.exs setf elixir

line 534: au BufRead,BufNewFile *.eex,*.leex setf eelixir

line 535: 

line 536: " Elvish

line 537: au BufRead,BufNewFile *.elv setf elvish

line 538: 

line 539: " Euphoria 3 or 4

line 540: au BufNewFile,BufRead *.eu,*.ew,*.exu,*.exw  call dist#ft#EuphoriaCheck()

line 541: if has("fname_case")

line 542:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()

line 543: endif

line 544: 

line 545: " Execline (s6) scripts

line 546: au BufNewFile,BufRead *s6*/\(up\|down\|run\|finish\)    setf execline

line 547: au BufNewFile,BufRead s6-*                              setf execline

line 548: 

line 549: " Fontconfig config files

line 550: au BufNewFile,BufRead fonts.conf^I^I^Isetf xml

line 551: 

line 552: " Faust

line 553: au BufNewFile,BufRead *.lib^I^I^I^Isetf faust

line 554: au BufNewFile,BufRead *.dsp^I^I^I^Icall dist#ft#FTdsp()

line 555: 

line 556: " Libreoffice config files

line 557: au BufNewFile,BufRead *.xcu,*.xlb,*.xlc,*.xba^I^Isetf xml

line 558: au BufNewFile,BufRead psprint.conf,sofficerc^I^Isetf dosini

line 559: 

line 560: " Lynx config files

line 561: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx

line 562: 

line 563: " LyRiCs

line 564: au BufNewFile,BufRead *.lrc^I^I^Isetf lyrics

line 565: 

line 566: " Modula-3 configuration language (must be before *.cfg and *makefile)

line 567: au BufNewFile,BufRead *.quake,cm3.cfg^I^Isetf m3quake

line 568: au BufNewFile,BufRead m3makefile,m3overrides^Isetf m3build

line 569: 

line 570: " XDG mimeapps.list

line 571: au BufNewFile,BufRead mimeapps.list^Isetf dosini

line 572: 

line 573: " Many tools written in Python use dosini as their config

line 574: " like setuptools, pudb, coverage, pypi, gitlint, oelint-adv, pylint, bpython, mypy

line 575: " (must be before *.cfg)

line 576: au BufNewFile,BufRead pip.conf,setup.cfg,pudb.cfg,.coveragerc,.pypirc,.gitlint,.oelint.cfg^Isetf dosini

line 577: au BufNewFile,BufRead {.,}pylintrc,*/bpython/config,*/mypy/config^I^I^Isetf dosini

line 578: 

line 579: " Many tools written in Python use toml as their config, like black

line 580: au BufNewFile,BufRead .black^Isetf toml

line 581: au BufNewFile,BufRead black  if getline(1) =~ 'tool.back'|   setf toml| endif

line 585: 

line 586: " LXQt's programs use dosini as their config

line 587: au BufNewFile,BufRead */{lxqt,screengrab}/*.conf^Isetf dosini

line 588: 

line 589: " Quake

line 590: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake

line 591: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake

line 592: 

line 593: " Quake C

line 594: au BufNewFile,BufRead *.qc^I^I^Isetf c

line 595: 

line 596: " LaTeX packages use LaTeX as their configuration, such as:

line 597: " ~/.texlive/texmf-config/tex/latex/hyperref/hyperref.cfg

line 598: " ~/.texlive/texmf-config/tex/latex/docstrip/docstrip.cfg

line 599: au BufNewFile,BufRead */tex/latex/**.cfg^I^Isetf tex

line 600: 

line 601: " Wakatime config

line 602: au BufNewFile,BufRead .wakatime.cfg^I^Isetf dosini

line 603: 

line 604: " Configure files

line 605: au BufNewFile,BufRead *.cfg\c^I^I^Icall dist#ft#FTcfg()

line 606: 

line 607: " Cucumber

line 608: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber

line 609: 

line 610: " Communicating Sequential Processes

line 611: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp

line 612: 

line 613: " CUPL logic description and simulation

line 614: au BufNewFile,BufRead *.pld^I^I^Isetf cupl

line 615: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim

line 616: 

line 617: " Dafny

line 618: au BufNewFile,BufRead *.dfy^I^I^Isetf dafny

line 619: 

line 620: " Dart

line 621: au BufRead,BufNewfile *.dart,*.drt^I^Isetf dart

line 622: 

line 623: " Debian Control

line 624: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol

line 625: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif

line 629: 

line 630: " Debian Copyright

line 631: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright

line 632: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif

line 636: 

line 637: " Debian Sources.list

line 638: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources

line 639: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources

line 640: au BufNewFile,BufRead */etc/apt/sources.list.d/*.sources^Isetf deb822sources

line 641: 

line 642: " Deny hosts

line 643: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts

line 644: 

line 645: " Dhall

line 646: au BufNewFile,BufRead *.dhall^I^I^Isetf dhall

line 647: 

line 648: " dnsmasq(8) configuration files

line 649: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq

line 650: 

line 651: " ROCKLinux package description

line 652: au BufNewFile,BufRead *.desc^I^I^Isetf desc

line 653: 

line 654: " the D language or dtrace

line 655: au BufNewFile,BufRead */dtrace/*.d^I^Isetf dtrace

line 656: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()

line 657: 

line 658: " Desktop files

line 659: au BufNewFile,BufRead *.desktop,*.directory^Isetf desktop

line 660: 

line 661: " Dict config

line 662: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf

line 663: 

line 664: " Dictd config

line 665: au BufNewFile,BufRead dictd*.conf^I^Isetf dictdconf

line 666: 

line 667: " DEP3 formatted patch files

line 668: au BufNewFile,BufRead */debian/patches/*^Icall dist#ft#Dep3patch()

line 669: 

line 670: " Diff files

line 671: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff

line 672: au BufNewFile,BufRead *.patch if getline(1) =~# '^From [0-9a-f]\{40,\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif

line 678: 

line 679: " Dircolors

line 680: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors

line 681: 

line 682: " Diva (with Skill) or InstallShield

line 683: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif

line 689: 

line 690: " DCL (Digital Command Language - vms) or DNS zone file

line 691: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')

line 692: 

line 693: " DOT

line 694: au BufNewFile,BufRead *.dot,*.gv^I^Isetf dot

line 695: 

line 696: " Dune

line 697: au BufNewFile,BufRead jbuild,dune,dune-project,dune-workspace,dune-file setf dune

line 698: 

line 699: " Dylan - lid files

line 700: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid

line 701: 

line 702: " Dylan - intr files (melange)

line 703: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr

line 704: 

line 705: " Dylan

line 706: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan

line 707: 

line 708: " Microsoft Module Definition or Modula-2

line 709: au BufNewFile,BufRead *.def^I^I^Icall dist#ft#FTdef()

line 710: 

line 711: if has("fname_case")

line 712:   au BufNewFile,BufRead *.DEF^I^I^Isetf modula2

line 713: endif

line 714: 

line 715: " Dracula

line 716: au BufNewFile,BufRead *.drac,*.drc,*.lvs,*.lpe^Isetf dracula

line 717: 

line 718: " Datascript

line 719: au BufNewFile,BufRead *.ds^I^I^Isetf datascript

line 720: 

line 721: " dsl: DSSSL or Structurizr

line 722: au BufNewFile,BufRead *.dsl if getline(1) =~ '^\s*<\!' |   setf dsl | else |   setf structurizr | endif

line 728: 

line 729: " DTD (Document Type Definition for XML)

line 730: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd

line 731: 

line 732: " DTS/DSTI/DTSO (device tree files)

line 733: au BufNewFile,BufRead *.dts,*.dtsi,*.dtso,*.its,*.keymap^Isetf dts

line 734: 

line 735: " Earthfile

line 736: au BufNewFile,BufRead Earthfile^I^I^Isetf earthfile

line 737: 

line 738: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn

line 739: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif

line 740: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif

line 746: 

line 747: " EditorConfig

line 748: au BufNewFile,BufRead .editorconfig^I^Isetf editorconfig

line 749: 

line 750: " Embedix Component Description

line 751: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd

line 752: 

line 753: " Eiffel or Specman or Euphoria

line 754: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()

line 755: 

line 756: " Elinks configuration

line 757: au BufNewFile,BufRead elinks.conf^I^Isetf elinks

line 758: 

line 759: " ERicsson LANGuage; Yaws is erlang too

line 760: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang

line 761: 

line 762: " Elm

line 763: au BufNewFile,BufRead *.elm^I^I^Isetf elm

line 764: 

line 765: " Elm Filter Rules file

line 766: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt

line 767: 

line 768: " Elsa - https://github.com/ucsd-progsys/elsa

line 769: au BufNewFile,BufRead *.lc^I^I^Isetf elsa

line 770: 

line 771: " EdgeDB Schema Definition Language

line 772: au BufNewFile,BufRead *.esdl^I^I^Isetf esdl

line 773: 

line 774: " ESMTP rc file

line 775: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc

line 776: 

line 777: " ESQL-C

line 778: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc

line 779: 

line 780: " Esterel

line 781: au BufNewFile,BufRead *.strl^I^I^Isetf esterel

line 782: 

line 783: " Essbase script

line 784: au BufNewFile,BufRead *.csc^I^I^Isetf csc

line 785: 

line 786: " Exim

line 787: au BufNewFile,BufRead exim.conf^I^I^Isetf exim

line 788: 

line 789: " Expect

line 790: au BufNewFile,BufRead *.exp^I^I^Isetf expect

line 791: 

line 792: " Exports

line 793: au BufNewFile,BufRead exports^I^I^Isetf exports

line 794: 

line 795: " Falcon

line 796: au BufNewFile,BufRead *.fal^I^I^Isetf falcon

line 797: 

line 798: " Fantom

line 799: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan

line 800: 

line 801: " Factor

line 802: au BufNewFile,BufRead *.factor^I^I^Isetf factor

line 803: 

line 804: " Fennel

line 805: autocmd BufRead,BufNewFile *.fnl^I^Isetf fennel

line 806: 

line 807: " Fetchmail RC file

line 808: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail

line 809: 

line 810: " FIRRTL - Flexible Internal Representation for RTL

line 811: au BufNewFile,BufRead *.fir^I^I^Isetf firrtl

line 812: 

line 813: " Fish shell

line 814: au BufNewFile,BufRead *.fish^I^I^Isetf fish

line 815: 

line 816: " Flatpak config

line 817: au BufNewFile,BufRead */flatpak/repo/config^Isetf dosini

line 818: 

line 819: " Focus Executable

line 820: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec

line 821: 

line 822: " Focus Master file (but not for auto.master)

line 823: au BufNewFile,BufRead auto.master^I^Isetf conf

line 824: au BufNewFile,BufRead *.mas,*.master^I^Isetf master

line 825: 

line 826: " Forth

line 827: au BufNewFile,BufRead *.ft,*.fth,*.4th^I^Isetf forth

line 828: 

line 829: " Reva Forth

line 830: au BufNewFile,BufRead *.frt^I^I^Isetf reva

line 831: 

line 832: " Fortran

line 833: if has("fname_case")

line 834:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^Isetf fortran

line 835: endif

line 836: au BufNewFile,BufRead *.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08^Isetf fortran

line 837: 

line 838: " Fortran or Forth

line 839: au BufNewFile,BufRead *.f^I^I^Icall dist#ft#FTf()

line 840: 

line 841: " Framescript

line 842: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript

line 843: 

line 844: " FStab

line 845: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab

line 846: 

line 847: " Func

line 848: au BufNewFile,BufRead *.fc^I^I^Isetf func

line 849: 

line 850: " Fusion

line 851: au BufRead,BufNewFile *.fusion^I^I^Isetf fusion

line 852: 

line 853: " F# or Forth

line 854: au BufNewFile,BufRead *.fs^I^I^Icall dist#ft#FTfs()

line 855: 

line 856: " FHIR Shorthand (FSH)

line 857: au BufNewFile,BufRead *.fsh^I^I^Isetf fsh

line 858: 

line 859: " F#

line 860: au BufNewFile,BufRead *.fsi,*.fsx^I^Isetf fsharp

line 861: 

line 862: " GDB command files

line 863: au BufNewFile,BufRead .gdbinit,gdbinit,.gdbearlyinit,gdbearlyinit,*.gdb^I^Isetf gdb

line 864: 

line 865: " GDMO

line 866: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo

line 867: 

line 868: " GDscript

line 869: au BufNewFile,BufRead *.gd^I^I^Isetf gdscript

line 870: 

line 871: " Godot resource

line 872: au BufRead,BufNewFile *.tscn,*.tres^I^Isetf gdresource

line 873: 

line 874: " Godot shader

line 875: au BufRead,BufNewFile *.gdshader,*.shader^Isetf gdshader

line 876: 

line 877: " Gedcom

line 878: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom

line 879: 

line 880: " Gemtext

line 881: au BufNewFile,BufRead *.gmi,*.gemini^I^Isetf gemtext

line 882: 

line 883: " Gift (Moodle)

line 884: autocmd BufRead,BufNewFile *.gift^I^Isetf gift

line 885: 

line 886: " Git

line 887: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG^Isetf gitcommit

line 888: au BufNewFile,BufRead NOTES_EDITMSG,EDIT_DESCRIPTION^I^Isetf gitcommit

line 889: au BufNewFile,BufRead *.git/config,.gitconfig,*/etc/gitconfig^Isetf gitconfig

line 890: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig

line 891: au BufNewFile,BufRead *.git/config.worktree^I^I^Isetf gitconfig

line 892: au BufNewFile,BufRead *.git/worktrees/*/config.worktree^I^Isetf gitconfig

line 893: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig

line 894: if exists('$XDG_CONFIG_HOME')

line 895:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig

line 896:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/attributes^I^Isetf gitattributes

line 897:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/ignore^I^Isetf gitignore

line 898: endif

line 899: au BufNewFile,BufRead .gitattributes,*.git/info/attributes^Isetf gitattributes

line 900: au BufNewFile,BufRead */.config/git/attributes^I^I^Isetf gitattributes

line 901: au BufNewFile,BufRead */etc/gitattributes^I^I^Isetf gitattributes

line 902: au BufNewFile,BufRead .gitignore,*.git/info/exclude^I^Isetf gitignore

line 903: au BufNewFile,BufRead */.config/git/ignore,*.prettierignore^Isetf gitignore

line 904: au BufNewFile,BufRead git-rebase-todo^I^I^I^Isetf gitrebase

line 905: au BufRead,BufNewFile .gitsendemail.msg.??????^I^I^Isetf gitsendemail

line 906: au BufNewFile,BufRead *.git/* if getline(1) =~# '^\x\{40,\}\>\|^ref: ' |   setf git | endif

line 910: 

line 911: " Gkrellmrc

line 912: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc

line 913: 

line 914: " Gleam

line 915: au BufNewFile,BufRead *.gleam^I^I^Isetf gleam

line 916: 

line 917: " GLSL

line 918: " Extensions supported by Khronos reference compiler (with one exception, ".glsl")

line 919: " https://github.com/KhronosGroup/glslang

line 920: au BufNewFile,BufRead *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp,*.rgen,*.rmiss,*.rchit,*.rahit,*.rint,*.rcall^Isetf glsl

line 921: 

line 922: " GN (generate ninja) files

line 923: au BufNewFile,BufRead *.gn,*.gni^I^Isetf gn

line 924: 

line 925: " GP scripts (2.0 and onward)

line 926: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp

line 927: 

line 928: " GPG

line 929: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg

line 930: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg

line 931: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg

line 932: if !empty($GNUPGHOME)

line 933:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg

line 934:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg

line 935: endif

line 936: 

line 937: " gnash(1) configuration files

line 938: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash

line 939: 

line 940: " Gitolite

line 941: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite

line 942: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl

line 943: 

line 944: " Glimmer-flavored TypeScript and JavaScript

line 945: au BufNewFile,BufRead *.gts^I^I^Isetf typescript.glimmer

line 946: au BufNewFile,BufRead *.gjs^I^I^Isetf javascript.glimmer

line 947: 

line 948: " Gnuplot scripts

line 949: au BufNewFile,BufRead *.gpi,*.gnuplot,.gnuplot_history^Isetf gnuplot

line 950: 

line 951: " Go (Google)

line 952: au BufNewFile,BufRead *.go^I^I^Isetf go

line 953: au BufNewFile,BufRead Gopkg.lock^I^Isetf toml

line 954: au BufRead,BufNewFile go.work^I^I^Isetf gowork

line 955: 

line 956: " GoAccess configuration

line 957: au BufNewFile,BufRead goaccess.conf^I^Isetf goaccess

line 958: 

line 959: " GrADS scripts

line 960: au BufNewFile,BufRead *.gs^I^I^Isetf grads

line 961: 

line 962: " GraphQL

line 963: au BufNewFile,BufRead *.graphql,*.graphqls,*.gql^I^I^Isetf graphql

line 964: 

line 965: " Gretl

line 966: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl

line 967: 

line 968: " Groovy

line 969: au BufNewFile,BufRead *.gradle,*.groovy,Jenkinsfile^I^Isetf groovy

line 970: 

line 971: " GNU Server Pages

line 972: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp

line 973: 

line 974: " Group file

line 975: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group

line 976: 

line 977: " GTK RC

line 978: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc

line 979: 

line 980: " GYP

line 981: au BufNewFile,BufRead *.gyp,*.gypi^I^Isetf gyp

line 982: 

line 983: " Hack

line 984: au BufRead,BufNewFile *.hack,*.hackpartial^I^I^Isetf hack

line 985: 

line 986: " Haml

line 987: au BufNewFile,BufRead *.haml^I^I^Isetf haml

line 988: 

line 989: " Hamster Classic | Playground files

line 990: au BufNewFile,BufRead *.hsm^I^I^Isetf hamster

line 991: 

line 992: " Handlebars

line 993: au BufNewFile,BufRead *.hbs^I^I^Isetf handlebars

line 994: 

line 995: " Hare

line 996: au BufNewFile,BufRead *.ha^I^I^Isetf hare

line 997: au BufNewFile,BufRead README^I^I^Icall dist#ft#FTharedoc()

line 998: 

line 999: " Haskell

line 1000: au BufNewFile,BufRead *.hs,*.hsc,*.hs-boot,*.hsig setf haskell

line 1001: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell

line 1002: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell

line 1003: au BufNewFile,BufRead cabal.project^I^Isetf cabalproject

line 1004: au BufNewFile,BufRead */{.,}cabal/config^Isetf cabalconfig

line 1005: au BufNewFile,BufRead cabal.config^I^Isetf cabalconfig

line 1006: au BufNewFile,BufRead *.persistentmodels^Isetf haskellpersistent

line 1007: 

line 1008: " Haste

line 1009: au BufNewFile,BufRead *.ht^I^I^Isetf haste

line 1010: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc

line 1011: 

line 1012: " HCL

line 1013: au BufRead,BufNewFile *.hcl^I^I^Isetf hcl

line 1014: 

line 1015: " Go checksum file (must be before *.sum Hercules)

line 1016: au BufNewFile,BufRead go.sum,go.work.sum^Isetf gosum

line 1017: 

line 1018: " Hercules

line 1019: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules

line 1020: 

line 1021: " HEEx

line 1022: au BufRead,BufNewFile *.heex^I^I^Isetf heex

line 1023: 

line 1024: " HEX (Intel)

line 1025: au BufNewFile,BufRead *.hex,*.ihex,*.int,*.ihe,*.ihx,*.mcs,*.h32,*.h80,*.h86,*.a43,*.a90^Isetf hex

line 1026: 

line 1027: " Hjson

line 1028: au BufNewFile,BufRead *.hjson^I^I^Isetf hjson

line 1029: 

line 1030: " HLS Playlist (or another form of playlist)

line 1031: au BufNewFile,BufRead *.m3u,*.m3u8^I^Isetf hlsplaylist

line 1032: 

line 1033: " Hollywood

line 1034: au BufRead,BufNewFile *.hws^I^I^Isetf hollywood

line 1035: 

line 1036: " Hoon

line 1037: au BufRead,BufNewFile *.hoon^I^I^Isetf hoon

line 1038: 

line 1039: " Tilde (must be before HTML)

line 1040: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde

line 1041: 

line 1042: " Translate shell

line 1043: au BufNewFile,BufRead init.trans,*/etc/translate-shell,.trans^Isetf clojure

line 1044: 

line 1045: " HTML (.stm for server side, .shtml is server-side or superhtml)

line 1046: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()

line 1047: au BufNewFile,BufRead *.cshtml^I^I^Isetf html

line 1048: 

line 1049: " HTML with Ruby - eRuby

line 1050: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby

line 1051: 

line 1052: " HTML with M4

line 1053: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4

line 1054: 

line 1055: " Some template.  Used to be HTML Cheetah.

line 1056: au BufNewFile,BufRead *.tmpl^I^I^Isetf template

line 1057: 

line 1058: " Host config

line 1059: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf

line 1060: 

line 1061: " Hosts access

line 1062: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess

line 1063: 

line 1064: " Hurl

line 1065: au BufRead,BufNewFile *.hurl^I^I^Isetf hurl

line 1066: 

line 1067: " Hyper Builder

line 1068: au BufNewFile,BufRead *.hb^I^I^Isetf hb

line 1069: 

line 1070: " Hyprlang

line 1071: au BufNewFile,BufRead hypr\(land\|paper\|idle\|lock\).conf^Isetf hyprlang

line 1072: 

line 1073: " Httest

line 1074: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest

line 1075: 

line 1076: " i3

line 1077: au BufNewFile,BufRead */i3/config^I^Isetf i3config

line 1078: au BufNewFile,BufRead */.i3/config^I^Isetf i3config

line 1079: 

line 1080: " sway

line 1081: au BufNewFile,BufRead */sway/config^I^Isetf swayconfig

line 1082: au BufNewFile,BufRead */.sway/config^I^Isetf swayconfig

line 1083: 

line 1084: " Icon

line 1085: au BufNewFile,BufRead *.icn^I^I^Isetf icon

line 1086: 

line 1087: " IDL (Interface Description Language)

line 1088: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()

line 1089: 

line 1090: " Microsoft IDL (Interface Description Language)  Also *.idl

line 1091: " MOF = WMI (Windows Management Instrumentation) Managed Object Format

line 1092: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl

line 1093: 

line 1094: " Icewm menu

line 1095: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu

line 1096: 

line 1097: " Indent profile (must come before IDL *.pro!)

line 1098: au BufNewFile,BufRead .indent.pro^I^Isetf indent

line 1099: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')

line 1100: 

line 1101: " IDL (Interactive Data Language), Prolog, Cproto or zsh module C

line 1102: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')

line 1103: 

line 1104: " Indent RC

line 1105: au BufNewFile,BufRead indentrc^I^I^Isetf indent

line 1106: 

line 1107: " Inform

line 1108: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform

line 1109: 

line 1110: " Initng

line 1111: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng

line 1112: 

line 1113: " Innovation Data Processing

line 1114: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c^Isetf upstreamdat

line 1115: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c^Isetf upstreamlog

line 1116: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog

line 1117: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c^Isetf usserverlog

line 1118: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c^Isetf usw2kagtlog

line 1119: 

line 1120: " Ipfilter

line 1121: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter

line 1122: 

line 1123: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)

line 1124: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl

line 1125: 

line 1126: " .INI file for MSDOS

line 1127: au BufNewFile,BufRead *.ini,*.INI^I^Isetf dosini

line 1128: 

line 1129: " SysV Inittab

line 1130: au BufNewFile,BufRead inittab^I^I^Isetf inittab

line 1131: 

line 1132: " Inko

line 1133: au BufNewFile,BufRead *.inko^I^I^Isetf inko

line 1134: 

line 1135: " Inno Setup

line 1136: au BufNewFile,BufRead *.iss^I^I^Isetf iss

line 1137: 

line 1138: " J

line 1139: au BufNewFile,BufRead *.ijs^I^I^Isetf j

line 1140: 

line 1141: " JAL

line 1142: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal

line 1143: 

line 1144: " Jam

line 1145: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam

line 1146: 

line 1147: " Janet

line 1148: au BufNewFile,BufRead *.janet^I^I^Isetf janet

line 1149: 

line 1150: " Java

line 1151: au BufNewFile,BufRead *.java,*.jav^I^Isetf java

line 1152: 

line 1153: " JavaCC

line 1154: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc

line 1155: 

line 1156: " JavaScript, ECMAScript, ES module script, CommonJS script

line 1157: au BufNewFile,BufRead *.js,*.jsm,*.javascript,*.es,*.mjs,*.cjs   setf javascript

line 1158: au BufNewFile,BufRead .node_repl_history^Isetf javascript

line 1159: 

line 1160: " JavaScript with React

line 1161: au BufNewFile,BufRead *.jsx^I^I^Isetf javascriptreact

line 1162: 

line 1163: " Java Server Pages

line 1164: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp

line 1165: 

line 1166: " Java Properties resource file (note: doesn't catch font.properties.pl)

line 1167: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties

line 1168: " Eclipse preference files use Java Properties syntax

line 1169: au BufNewFile,BufRead org.eclipse.*.prefs^Isetf jproperties

line 1170: 

line 1171: " Jess

line 1172: au BufNewFile,BufRead *.clp^I^I^Isetf jess

line 1173: 

line 1174: " Jgraph

line 1175: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph

line 1176: 

line 1177: " Jujutsu

line 1178: au BufNewFile,BufRead *.jjdescription^I^Isetf jj

line 1179: 

line 1180: " Jovial

line 1181: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial

line 1182: 

line 1183: " Jq

line 1184: au BufNewFile,BufRead *.jq^I^I^Isetf jq

line 1185: 

line 1186: " JSON5

line 1187: au BufNewFile,BufRead *.json5^I^I^Isetf json5

line 1188: 

line 1189: " JSON Patch (RFC 6902)

line 1190: au BufNewFile,BufRead *.json-patch^I^Isetf json

line 1191: 

line 1192: " Geojson is also json

line 1193: au BufNewFile,BufRead *.geojson^I^I^Isetf json

line 1194: 

line 1195: " Jupyter Notebook and jupyterlab config is also json

line 1196: au BufNewFile,BufRead *.ipynb,*.jupyterlab-settings^Isetf json

line 1197: 

line 1198: " Sublime config

line 1199: au BufNewFile,BufRead *.sublime-project,*.sublime-settings,*.sublime-workspace^Isetf json

line 1200: 

line 1201: " Other files that look like json

line 1202: au BufNewFile,BufRead .prettierrc,.firebaserc,.stylelintrc,.lintstagedrc,flake.lock,deno.lock^Isetf json

line 1203: 

line 1204: " JSONC (JSON with comments)

line 1205: au BufNewFile,BufRead *.jsonc,.babelrc,.eslintrc,.jsfmtrc^Isetf jsonc

line 1206: au BufNewFile,BufRead .jshintrc,.jscsrc,.vsconfig,.hintrc,.swrc,[jt]sconfig*.json^Isetf jsonc

line 1207: 

line 1208: " JSON

line 1209: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json

line 1210: 

line 1211: " JSON Lines

line 1212: au BufNewFile,BufRead *.jsonl^I^I^Isetf jsonl

line 1213: 

line 1214: " Jsonnet

line 1215: au BufNewFile,BufRead *.jsonnet,*.libsonnet^Isetf jsonnet

line 1216: 

line 1217: " Julia

line 1218: au BufNewFile,BufRead *.jl^I^I^Isetf julia

line 1219: 

line 1220: " Just

line 1221: au BufNewFile,BufRead [jJ]ustfile,.justfile,*.just setf just

line 1222: 

line 1223: " KDL

line 1224: au BufNewFile,BufRead *.kdl^I^I^Isetf kdl

line 1225: 

line 1226: " Kixtart

line 1227: au BufNewFile,BufRead *.kix^I^I^Isetf kix

line 1228: 

line 1229: " Kuka Robot Language

line 1230: au BufNewFile,BufRead *.src\c^I^I^Icall dist#ft#FTsrc()

line 1231: au BufNewFile,BufRead *.dat\c^I^I^Icall dist#ft#FTdat()

line 1232: au BufNewFile,BufRead *.sub\c^I^I^Isetf krl

line 1233: 

line 1234: " Kimwitu[++]

line 1235: au BufNewFile,BufRead *.k^I^I^Isetf kwt

line 1236: 

line 1237: " Kivy

line 1238: au BufNewFile,BufRead *.kv^I^I^Isetf kivy

line 1239: 

line 1240: " Kotlin

line 1241: au BufNewFile,BufRead *.kt,*.ktm,*.kts^I^Isetf kotlin

line 1242: 

line 1243: " KDE script

line 1244: au BufNewFile,BufRead *.ks^I^I^Isetf kscript

line 1245: 

line 1246: " Kconfig

line 1247: au BufNewFile,BufRead Kconfig,Kconfig.debug,Config.in^Isetf kconfig

line 1248: 

line 1249: " Lace (ISE)

line 1250: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace

line 1251: 

line 1252: " Larch Shared Language

line 1253: au BufNewFile,BufRead .lsl^I^I^Icall dist#ft#FTlsl()

line 1254: 

line 1255: " Latexmkrc

line 1256: au BufNewFile,BufRead .latexmkrc,latexmkrc^Isetf perl

line 1257: 

line 1258: " Latte

line 1259: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte

line 1260: 

line 1261: " Limits

line 1262: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits

line 1263: 

line 1264: " LambdaProlog or SML (see dist#ft#FTmod for *.mod)

line 1265: au BufNewFile,BufRead *.sig^I^I^Icall dist#ft#FTsig()

line 1266: 

line 1267: " LDAP configuration

line 1268: au BufNewFile,BufRead ldaprc,.ldaprc,ldap.conf^Isetf ldapconf

line 1269: 

line 1270: " LDAP LDIF

line 1271: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif

line 1272: 

line 1273: " Luadoc, Ldoc (must be before *.ld)

line 1274: au BufNewFile,BufRead config.ld^I^I^Isetf lua

line 1275: 

line 1276: " Ld loader

line 1277: au BufNewFile,BufRead *.ld,*/ldscripts/*^Isetf ld

line 1278: 

line 1279: " Lean

line 1280: au BufNewFile,BufRead *.lean^I^I^Isetf lean

line 1281: 

line 1282: " Ledger

line 1283: au BufRead,BufNewFile *.ldg,*.ledger,*.journal^I^I^Isetf ledger

line 1284: 

line 1285: " Less

line 1286: au BufNewFile,BufRead *.less^I^I^Isetf less

line 1287: 

line 1288: " Lex

line 1289: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex

line 1290: 

line 1291: " Libao

line 1292: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao

line 1293: 

line 1294: " Libsensors

line 1295: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors

line 1296: 

line 1297: " LFTP

line 1298: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp

line 1299: 

line 1300: " Lifelines (or Lex for C++!)

line 1301: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines

line 1302: 

line 1303: " Lilo: Linux loader

line 1304: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo

line 1305: 

line 1306: " Lilypond

line 1307: au BufNewFile,BufRead *.ly,*.ily^I^Isetf lilypond

line 1308: 

line 1309: " Lisp (*.el = ELisp, *.cl = Common Lisp)

line 1310: " *.jl was removed, it's also used for Julia, better skip than guess wrong.

line 1311: if has("fname_case")

line 1312:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,*.L,.emacs,.sawfishrc,*.stsg,*/supertux2/config setf lisp

line 1313: else

line 1314:   au BufNewFile,BufRead *.lsp,*.lisp,*.asd,*.el,*.cl,.emacs,.sawfishrc,*.stsg,*/supertux2/config setf lisp

line 1315: endif

line 1316: 

line 1317: " SBCL implementation of Common Lisp

line 1318: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp

line 1319: 

line 1320: " Liquidsoap

line 1321: au BufNewFile,BufRead *.liq^I^I^Isetf liquidsoap

line 1322: 

line 1323: " Liquid

line 1324: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid

line 1325: 

line 1326: " Lite

line 1327: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite

line 1328: 

line 1329: " LiteStep RC files

line 1330: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep

line 1331: 

line 1332: " Livebook

line 1333: au BufNewFile,BufRead *.livemd^I^I^Isetf livebook

line 1334: 

line 1335: " Login access

line 1336: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess

line 1337: 

line 1338: " Login defs

line 1339: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs

line 1340: 

line 1341: " Logtalk

line 1342: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk

line 1343: 

line 1344: " LOTOS

line 1345: au BufNewFile,BufRead *.lotos^I^Isetf lotos

line 1346: 

line 1347: " LOTOS or LaTeX \listoftables files

line 1348: au BufNewFile,BufRead *.lot if getline(1) =~# '\\contentsline' |setf tex|else|setf lotos|endif

line 1350: 

line 1351: " Lout (also: *.lt)

line 1352: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout

line 1353: 

line 1354: " Lua, Texlua

line 1355: au BufNewFile,BufRead *.lua,*.tlu,.lua_history^Isetf lua

line 1356: 

line 1357: " Luau

line 1358: au BufNewFile,BufRead *.luau^I^Isetf luau

line 1359: 

line 1360: " Luau config

line 1361: au BufNewFile,BufRead .luaurc^I^Isetf jsonc

line 1362: 

line 1363: " Luacheck

line 1364: au BufNewFile,BufRead .luacheckrc^I^Isetf lua

line 1365: 

line 1366: " Luarocks

line 1367: au BufNewFile,BufRead *.rockspec,rock_manifest^Isetf lua

line 1368: 

line 1369: " Linden Scripting Language (Second Life)

line 1370: au BufNewFile,BufRead *.lsl^I^I^Icall dist#ft#FTlsl()

line 1371: 

line 1372: " Lynx style file (or LotusScript!)

line 1373: au BufNewFile,BufRead *.lss^I^I^Isetf lss

line 1374: 

line 1375: " M4

line 1376: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif

line 1378: au BufNewFile,BufRead .m4_history^I^Isetf m4

line 1379: 

line 1380: " MaGic Point

line 1381: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp

line 1382: 

line 1383: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)

line 1384: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail

line 1385: 

line 1386: " Mail aliases

line 1387: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases

line 1388: 

line 1389: " Mailcap configuration file

line 1390: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap

line 1391: 

line 1392: " Makefile

line 1393: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak^Icall dist#ft#FTmake()

line 1394: au BufNewFile,BufRead Kbuild^I^I^Isetf make

line 1395: 

line 1396: " MakeIndex

line 1397: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist

line 1398: 

line 1399: " Mallard

line 1400: au BufNewFile,BufRead *.page^I^I^Isetf mallard

line 1401: 

line 1402: " Manpage

line 1403: au BufNewFile,BufRead *.man^I^I^Isetf man

line 1404: 

line 1405: " Man config

line 1406: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf

line 1407: 

line 1408: " Maple V

line 1409: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple

line 1410: 

line 1411: " Map (UMN mapserver config file)

line 1412: au BufNewFile,BufRead *.map^I^I^Isetf map

line 1413: 

line 1414: " Markdown

line 1415: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md if exists("g:filetype_md") |   exe "setf " . g:filetype_md | else |   setf markdown | endif

line 1421: 

line 1422: " Mason (it used to include *.comp, are those Mason files?)

line 1423: au BufNewFile,BufRead *.mason,*.mhtml^Isetf mason

line 1424: 

line 1425: " Mathematica, Matlab, Murphi, Objective C or Octave

line 1426: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()

line 1427: 

line 1428: " Mathematica notebook and package files

line 1429: au BufNewFile,BufRead *.nb,*.wl^I^I^Isetf mma

line 1430: 

line 1431: " Maya Extension Language

line 1432: au BufNewFile,BufRead *.mel^I^I^Isetf mel

line 1433: 

line 1434: " mbsync

line 1435: au BufNewFile,BufRead .mbsyncrc^I^I^Isetf conf

line 1436: 

line 1437: " mcmeta

line 1438: au BufNewFile,BufRead *.mcmeta^I^I^Isetf json

line 1439: 

line 1440: " MediaWiki

line 1441: au BufNewFile,BufRead *.mw,*.wiki^I^Isetf mediawiki

line 1442: 

line 1443: " Mercurial (hg) commit file

line 1444: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit

line 1445: 

line 1446: " Mercurial config (looks like generic config file)

line 1447: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg

line 1448: 

line 1449: " Mermaid

line 1450: au BufNewFile,BufRead *.mmd,*.mmdc,*.mermaid^Isetf mermaid

line 1451: 

line 1452: " Meson Build system config

line 1453: au BufNewFile,BufRead meson.build,meson.options,meson_options.txt setf meson

line 1454: au BufNewFile,BufRead *.wrap^I^I^Isetf dosini

line 1455: 

line 1456: " Messages (logs mostly)

line 1457: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages

line 1458: 

line 1459: " Metafont

line 1460: au BufNewFile,BufRead *.mf^I^I^Isetf mf

line 1461: 

line 1462: " MetaPost

line 1463: au BufNewFile,BufRead *.mp^I^I^Isetf mp

line 1464: au BufNewFile,BufRead *.mpxl,*.mpiv,*.mpvi^Ilet b:mp_metafun = 1 | setf mp

line 1465: 

line 1466: " MGL

line 1467: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl

line 1468: 

line 1469: " MIX - Knuth assembly

line 1470: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix

line 1471: 

line 1472: " MMIX or VMS makefile

line 1473: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()

line 1474: 

line 1475: " msmtp

line 1476: au BufNewFile,BufRead .msmtprc^I^I^Isetf msmtp

line 1477: 

line 1478: " Symbian meta-makefile definition (MMP)

line 1479: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp

line 1480: 

line 1481: " ABB Rapid, Modula-2, Modsim III or LambdaProlog

line 1482: au BufNewFile,BufRead *.mod\c^I^I^Icall dist#ft#FTmod()

line 1483: 

line 1484: " Modula-3 (.m3, .i3, .mg, .ig)

line 1485: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3

line 1486: 

line 1487: " Larch/Modula-3

line 1488: au BufNewFile,BufRead *.lm3^I^I^Isetf modula3

line 1489: 

line 1490: " Modconf

line 1491: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf

line 1492: 

line 1493: " Monk

line 1494: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk

line 1495: 

line 1496: " MOO

line 1497: au BufNewFile,BufRead *.moo^I^I^Isetf moo

line 1498: 

line 1499: " Moonscript

line 1500: au BufNewFile,BufRead *.moon^I^I^Isetf moonscript

line 1501: 

line 1502: " Move language

line 1503: au BufNewFile,BufRead *.move^I^I^Isetf move

line 1504: 

line 1505: " MPD is based on XML

line 1506: au BufNewFile,BufRead *.mpd^I^I^Isetf xml

line 1507: 

line 1508: " Mplayer config

line 1509: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf

line 1510: 

line 1511: " Motorola S record

line 1512: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec

line 1513: 

line 1514: " Mrxvtrc

line 1515: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc

line 1516: 

line 1517: " Msql

line 1518: au BufNewFile,BufRead *.msql^I^I^Isetf msql

line 1519: 

line 1520: " Mysql

line 1521: au BufNewFile,BufRead *.mysql,.mysql_history^Isetf mysql

line 1522: 

line 1523: " Tcl Shell RC file

line 1524: au BufNewFile,BufRead tclsh.rc^I^I^Isetf tcl

line 1525: 

line 1526: " M$ Resource files

line 1527: " /etc/Muttrc.d/file.rc is muttrc

line 1528: au BufNewFile,BufRead *.rc,*.rch if expand("<afile>") !~ "/etc/Muttrc.d/" |   setf rc | endif

line 1532: 

line 1533: " Mojo

line 1534: " Mojo files use either .mojo or .🔥 as extension

line 1535: au BufNewFile,BufRead *.mojo,*.🔥^I^Isetf mojo

line 1536: 

line 1537: " MuPAD source

line 1538: au BufRead,BufNewFile *.mu^I^I^Isetf mupad

line 1539: 

line 1540: " Mush

line 1541: au BufNewFile,BufRead *.mush^I^I^Isetf mush

line 1542: 

line 1543: " Mustache

line 1544: au BufNewFile,BufRead *.mustache^I^Isetf mustache

line 1545: 

line 1546: " Mutt setup file (also for Muttng)

line 1547: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc

line 1548: 

line 1549: " N1QL

line 1550: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql

line 1551: 

line 1552: " Nano

line 1553: au BufNewFile,BufRead */etc/nanorc,*.nanorc^Isetf nanorc

line 1554: 

line 1555: " Nastran input/DMAP

line 1556: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran

line 1557: 

line 1558: " Natural

line 1559: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural

line 1560: 

line 1561: " Noemutt setup file

line 1562: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc

line 1563: 

line 1564: " Netrc

line 1565: au BufNewFile,BufRead .netrc^I^I^Isetf netrc

line 1566: 

line 1567: " Neofetch

line 1568: au BufNewFile,BufRead */neofetch/config.conf^Isetf sh

line 1569: 

line 1570: " Nginx

line 1571: au BufNewFile,BufRead *.nginx,nginx*.conf,*nginx.conf,*/etc/nginx/*,*/usr/local/nginx/conf/*,*/nginx/*.conf^I^I^Isetf nginx

line 1572: 

line 1573: " Nim file

line 1574: au BufNewFile,BufRead *.nim,*.nims,*.nimble^Isetf nim

line 1575: 

line 1576: " Ninja file

line 1577: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja

line 1578: 

line 1579: " Nix

line 1580: au BufRead,BufNewFile *.nix^I^I^Isetf nix

line 1581: 

line 1582: " Norg

line 1583: au BufNewFile,BufRead *.norg^I^Isetf norg

line 1584: 

line 1585: " NPM RC file

line 1586: au BufNewFile,BufRead npmrc,.npmrc^I^Isetf dosini

line 1587: 

line 1588: " Novell netware batch files

line 1589: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf

line 1590: 

line 1591: " Nroff/Troff (*.ms and *.t are checked below)

line 1592: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif

line 1596: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff

line 1597: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()

line 1598: 

line 1599: " Nroff or Objective C++

line 1600: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()

line 1601: 

line 1602: " Not Quite C

line 1603: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc

line 1604: 

line 1605: " notmuch

line 1606: au BufNewFile,BufRead .notmuch-config^I^Isetf dosini

line 1607: 

line 1608: " NSE - Nmap Script Engine - uses Lua syntax

line 1609: au BufNewFile,BufRead *.nse^I^I^Isetf lua

line 1610: 

line 1611: " NSIS

line 1612: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis

line 1613: 

line 1614: " Nu

line 1615: au BufNewFile,BufRead *.nu^I^Isetf nu

line 1616: 

line 1617: " Oblivion Language and Oblivion Script Extender

line 1618: au BufNewFile,BufRead *.obl,*.obse,*.oblivion,*.obscript  setf obse

line 1619: 

line 1620: " Objdump

line 1621: au BufNewFile,BufRead *.objdump,*.cppobjdump  setf objdump

line 1622: 

line 1623: " OCaml

line 1624: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo setf ocaml

line 1625: 

line 1626: " Occam

line 1627: au BufNewFile,BufRead *.occ^I^I^Isetf occam

line 1628: 

line 1629: " Octave

line 1630: au BufNewFile,BufRead octave.conf,.octaverc,octaverc,*/octave/history^Isetf octave

line 1631: 

line 1632: " Odin

line 1633: au BufNewFile,BufRead *.odin^I^I^Isetf odin

line 1634: 

line 1635: " Omnimark

line 1636: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark

line 1637: 

line 1638: " ondir

line 1639: au BufNewFile,BufRead .ondirrc^I^I^Isetf ondir

line 1640: 

line 1641: " OPAM

line 1642: au BufNewFile,BufRead opam,*.opam,*.opam.template,opam.locked,*.opam.locked setf opam

line 1643: 

line 1644: " OpenFOAM

line 1645: au BufNewFile,BufRead [a-zA-Z0-9]*Dict\(.*\)\=,[a-zA-Z]*Properties\(.*\)\=,*Transport\(.*\),fvSchemes,fvSolution,fvConstrains,fvModels,*/constant/g,*/0\(\.orig\)\=/* call dist#ft#FTfoam()

line 1646: 

line 1647: " OpenROAD

line 1648: au BufNewFile,BufRead *.or^I^I^I^Isetf openroad

line 1649: 

line 1650: " OPL

line 1651: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^I^Isetf opl

line 1652: 

line 1653: " OpenSCAD

line 1654: au BufNewFile,BufRead *.scad^I^I^I^Isetf openscad

line 1655: 

line 1656: " Oracle config file

line 1657: au BufNewFile,BufRead *.ora^I^I^I^Isetf ora

line 1658: 

line 1659: " Org

line 1660: au BufNewFile,BufRead *.org,*.org_archive^I^Isetf org

line 1661: 

line 1662: " Packet filter conf

line 1663: au BufNewFile,BufRead pf.conf^I^I^I^Isetf pf

line 1664: 

line 1665: " ini style config files, using # comments

line 1666: au BufNewFile,BufRead pacman.conf,mpv.conf^I^Isetf confini

line 1667: au BufNewFile,BufRead */.aws/config,*/.aws/credentials^Isetf confini

line 1668: au BufNewFile,BufRead *.nmconnection^I^I^Isetf confini

line 1669: au BufNewFile,BufRead paru.conf^I^I^I^Isetf confini

line 1670: 

line 1671: " Pacman hooks

line 1672: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf confini | endif

line 1676: 

line 1677: " Pacman makepkg

line 1678: au BufNewFile,BufRead {.,}makepkg.conf^I^I^Isetf sh

line 1679: 

line 1680: " Pacman log

line 1681: au BufNewFile,BufRead pacman.log^I^I^Isetf pacmanlog

line 1682: 

line 1683: " Pam conf

line 1684: au BufNewFile,BufRead */etc/pam.conf^I^I^Isetf pamconf

line 1685: 

line 1686: " Pam environment

line 1687: au BufNewFile,BufRead pam_env.conf,.pam_environment^Isetf pamenv

line 1688: 

line 1689: " PApp

line 1690: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^I^Isetf papp

line 1691: 

line 1692: " Password file

line 1693: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd

line 1694: 

line 1695: " Pascal (also *.p, *.pp, *.inc)

line 1696: au BufNewFile,BufRead *.pas^I^I^I^Isetf pascal

line 1697: 

line 1698: " Pascal or Puppet manifest

line 1699: au BufNewFile,BufRead *.pp^I^I^I^Icall dist#ft#FTpp()

line 1700: 

line 1701: " Delphi

line 1702: au BufNewFile,BufRead *.dpr^I^I^I^Isetf pascal

line 1703: 

line 1704: " Xilinx labtools project file or Lazarus program file

line 1705: au BufNewFile,BufRead *.lpr if getline(1) =~# "<?xml" |   setf xml | else |   setf pascal | endif

line 1711: 

line 1712: " Free Pascal makefile definition file

line 1713: au BufNewFile,BufRead *.fpc^I^I^I^Isetf fpcmake

line 1714: 

line 1715: " Path of Exile item filter

line 1716: au BufNewFile,BufRead *.filter^I^I^I^Isetf poefilter

line 1717: 

line 1718: " PDF

line 1719: au BufNewFile,BufRead *.pdf^I^I^I^Isetf pdf

line 1720: 

line 1721: " PCMK - HAE - crm configure edit

line 1722: au BufNewFile,BufRead *.pcmk^I^I^I^Isetf pcmk

line 1723: 

line 1724: " PEM (Privacy-Enhanced Mail)

line 1725: au BufNewFile,BufRead *.pem,*.cer,*.crt,*.csr^I^Isetf pem

line 1726: 

line 1727: " Perl or Prolog

line 1728: if has("fname_case")

line 1729:   au BufNewFile,BufRead *.pl,*.PL^I^I^Icall dist#ft#FTpl()

line 1730: else

line 1731:   au BufNewFile,BufRead *.pl^I^I^I^Icall dist#ft#FTpl()

line 1732: endif

line 1733: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^I^Isetf perl

line 1734: 

line 1735: " Perl Reply

line 1736: au BufNewFile,BufRead .replyrc^I^I^I^Isetf dosini

line 1737: 

line 1738: " Perl, XPM or XPM2

line 1739: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif

line 1747: 

line 1748: " Perl POD

line 1749: au BufNewFile,BufRead *.pod^I^I^Isetf pod

line 1750: 

line 1751: " Php, php3, php4, etc.

line 1752: " Also Phtml (was used for PHP 2 in the past).

line 1753: " Also .ctp for Cake template file.

line 1754: " Also .phpt for php tests.

line 1755: " Also .theme for Drupal theme files.

line 1756: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp,*.phpt,*.theme^Isetf php

line 1757: 

line 1758: " PHP config

line 1759: au BufNewFile,BufRead php.ini-*^I^I^Isetf dosini

line 1760: 

line 1761: " Pike and Cmod

line 1762: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike

line 1763: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod

line 1764: 

line 1765: " Pinfo config

line 1766: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo

line 1767: 

line 1768: " Palm Resource compiler

line 1769: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc

line 1770: 

line 1771: " Pine config

line 1772: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine

line 1773: 

line 1774: " Pip requirements

line 1775: au BufNewFile,BufRead *.pip^I^I^Isetf requirements

line 1776: au BufNewFile,BufRead requirements.txt^I^Isetf requirements

line 1777: au BufNewFile,BufRead *-requirements.txt^Isetf requirements

line 1778: au BufNewFile,BufRead constraints.txt^I^Isetf requirements

line 1779: au BufNewFile,BufRead requirements.in^I^Isetf requirements

line 1780: au BufNewFile,BufRead requirements/*.txt^Isetf requirements

line 1781: au BufNewFile,BufRead requires/*.txt^I^Isetf requirements

line 1782: 

line 1783: " Pipenv Pipfiles

line 1784: au BufNewFile,BufRead Pipfile^I^I^Isetf toml

line 1785: au BufNewFile,BufRead Pipfile.lock^I^Isetf json

line 1786: 

line 1787: " PL/1, PL/I

line 1788: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli

line 1789: 

line 1790: " PL/M (also: *.inp)

line 1791: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm

line 1792: 

line 1793: " PL/SQL

line 1794: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql

line 1795: 

line 1796: " PLP

line 1797: au BufNewFile,BufRead *.plp^I^I^Isetf plp

line 1798: 

line 1799: " PO and PO template (GNU gettext)

line 1800: au BufNewFile,BufRead *.po,*.pot^I^Isetf po

line 1801: 

line 1802: " Pony

line 1803: au BufNewFile,BufRead *.pony^I^I^Isetf pony

line 1804: 

line 1805: " Postfix main config

line 1806: au BufNewFile,BufRead main.cf,main.cf.proto^Isetf pfmain

line 1807: 

line 1808: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)

line 1809: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr

line 1810: 

line 1811: " PostScript Printer Description

line 1812: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd

line 1813: 

line 1814: " Povray

line 1815: au BufNewFile,BufRead *.pov^I^I^Isetf pov

line 1816: 

line 1817: " Povray configuration

line 1818: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini

line 1819: 

line 1820: " Povray, Pascal, PHP or assembly

line 1821: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()

line 1822: 

line 1823: " PowerShell

line 1824: au BufNewFile,BufRead^I*.ps1,*.psd1,*.psm1,*.pssc^Isetf ps1

line 1825: au BufNewFile,BufRead^I*.ps1xml^I^I^Isetf ps1xml

line 1826: au BufNewFile,BufRead^I*.cdxml,*.psc1^I^I^Isetf xml

line 1827: 

line 1828: " Printcap and Termcap

line 1829: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap

line 1831: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap

line 1833: 

line 1834: " Prisma

line 1835: au BufRead,BufNewFile *.prisma^I^I^Isetf prisma

line 1836: 

line 1837: " PPWizard

line 1838: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz

line 1839: 

line 1840: " Pug

line 1841: au BufRead,BufNewFile *.pug^I^I^Isetf pug

line 1842: 

line 1843: " Puppet

line 1844: au BufNewFile,BufRead Puppetfile^I^Isetf ruby

line 1845: 

line 1846: " Embedded Puppet

line 1847: au BufNewFile,BufRead *.epp^I^I^Isetf epuppet

line 1848: 

line 1849: " Obj 3D file format

line 1850: " TODO: is there a way to avoid MS-Windows Object files?

line 1851: au BufNewFile,BufRead *.obj^I^I^Isetf obj

line 1852: 

line 1853: " Oracle Pro*C/C++

line 1854: au BufNewFile,BufRead *.pc^I^I^Isetf proc

line 1855: 

line 1856: " Privoxy actions file

line 1857: au BufNewFile,BufRead *.action^I^I^Isetf privoxy

line 1858: 

line 1859: " Procmail

line 1860: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail

line 1861: 

line 1862: " Progress or CWEB

line 1863: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()

line 1864: 

line 1865: " Progress or assembly or Swig

line 1866: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTi()

line 1867: 

line 1868: " Progress or Pascal

line 1869: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()

line 1870: 

line 1871: " Software Distributor Product Specification File (POSIX 1387.2-1995)

line 1872: au BufNewFile,BufRead *.psf^I^I^Isetf psf

line 1873: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif

line 1877: 

line 1878: " Prolog

line 1879: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog

line 1880: 

line 1881: " Promela

line 1882: au BufNewFile,BufRead *.pml^I^I^Isetf promela

line 1883: 

line 1884: " Property Specification Language (PSL)

line 1885: au BufNewFile,BufRead *.psl^I^I^Isetf psl

line 1886: 

line 1887: " Google protocol buffers

line 1888: au BufNewFile,BufRead *.proto^I^I^Isetf proto

line 1889: au BufNewFile,BufRead *.txtpb,*.textproto,*.textpb,*.pbtxt setf pbtxt

line 1890: 

line 1891: " Poke

line 1892: au BufNewFile,BufRead *.pk^I^I^Isetf poke

line 1893: 

line 1894: " Protocols

line 1895: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols

line 1896: 

line 1897: " Purescript

line 1898: au BufNewFile,BufRead *.purs^I^I^Isetf purescript

line 1899: 

line 1900: " PyPA manifest files

line 1901: au BufNewFile,BufRead MANIFEST.in^I^Isetf pymanifest

line 1902: 

line 1903: " Pyret

line 1904: au BufNewFile,BufRead *.arr^I^I^Isetf pyret

line 1905: 

line 1906: " Pyrex

line 1907: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex

line 1908: 

line 1909: " Python, Python Shell Startup and Python Stub Files

line 1910: " Quixote (Python-based web framework)

line 1911: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc,.python_history,.jline-jython.history^Isetf python

line 1912: au BufNewFile,BufRead *.ptl,*.pyi,SConstruct^I^I   setf python

line 1913: 

line 1914: " QL

line 1915: au BufRead,BufNewFile *.ql,*.qll^I^Isetf ql

line 1916: 

line 1917: " QML

line 1918: au BufRead,BufNewFile *.qml,*.qbs^I^I^Isetf qml

line 1919: 

line 1920: " QMLdir

line 1921: au BufRead,BufNewFile qmldir^I^I^Isetf qmldir

line 1922: 

line 1923: " Quarto

line 1924: au BufRead,BufNewFile *.qmd^I^I^Isetf quarto

line 1925: 

line 1926: " Racket (formerly detected as "scheme")

line 1927: au BufNewFile,BufRead *.rkt,*.rktd,*.rktl^Isetf racket

line 1928: 

line 1929: " Radiance

line 1930: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance

line 1931: 

line 1932: " Raku (formerly Perl6)

line 1933: au BufNewFile,BufRead *.pm6,*.p6,*.t6,*.pod6,*.raku,*.rakumod,*.rakudoc,*.rakutest  setf raku

line 1934: 

line 1935: " Ratpoison config/command files

line 1936: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison

line 1937: 

line 1938: " RCS file

line 1939: au BufNewFile,BufRead *\,v^I^I^Isetf rcs

line 1940: 

line 1941: " Readline

line 1942: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline

line 1943: 

line 1944: " Registry for MS-Windows

line 1945: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif

line 1947: 

line 1948: " Renderman Interface Bytestream

line 1949: au BufNewFile,BufRead *.rib^I^I^Isetf rib

line 1950: 

line 1951: " Rego Policy Language

line 1952: au BufNewFile,BufRead *.rego^I^I^Isetf rego

line 1953: 

line 1954: " Rexx

line 1955: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx

line 1956: 

line 1957: " Ripgrep rc

line 1958: au BufNewFile,BufRead {.,}ripgreprc^I^I^Isetf conf

line 1959: 

line 1960: " R Help file

line 1961: if has("fname_case")

line 1962:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp

line 1963: else

line 1964:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp

line 1965: endif

line 1966: 

line 1967: " R noweb file

line 1968: if has("fname_case")

line 1969:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb

line 1970: else

line 1971:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb

line 1972: endif

line 1973: 

line 1974: " R Markdown file

line 1975: if has("fname_case")

line 1976:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd

line 1977: else

line 1978:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd

line 1979: endif

line 1980: 

line 1981: " R profile file

line 1982: au BufNewFile,BufRead .Rhistory,.Rprofile,Rprofile,Rprofile.site^Isetf r

line 1983: 

line 1984: " RSS looks like XML

line 1985: au BufNewFile,BufRead *.rss^I^I^I^Isetf xml

line 1986: 

line 1987: " R reStructuredText file

line 1988: if has("fname_case")

line 1989:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst

line 1990: else

line 1991:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst

line 1992: endif

line 1993: 

line 1994: " Rexx, Rebol or R

line 1995: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()

line 1996: 

line 1997: " Remind

line 1998: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind

line 1999: 

line 2000: " ReScript

line 2001: au BufNewFile,BufRead *.res,*.resi^I^I^Isetf rescript

line 2002: 

line 2003: " Resolv.conf

line 2004: au BufNewFile,BufRead resolv.conf^I^Isetf resolv

line 2005: 

line 2006: " Relax NG Compact

line 2007: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc

line 2008: 

line 2009: " Relax NG XML

line 2010: au BufNewFile,BufRead *.rng^I^I^Isetf rng

line 2011: 

line 2012: " ILE RPG

line 2013: au BufNewFile,BufRead *.rpgle,*.rpgleinc^Isetf rpgle

line 2014: 

line 2015: " RPL/2

line 2016: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl

line 2017: 

line 2018: " Robot Framework

line 2019: au BufNewFile,BufRead *.robot,*.resource^Isetf robot

line 2020: 

line 2021: " Robots.txt

line 2022: au BufNewFile,BufRead robots.txt^I^Isetf robots

line 2023: 

line 2024: " Roc

line 2025: au BufNewFile,BufRead *.roc^I^I^Isetf roc

line 2026: 

line 2027: " RON (Rusty Object Notation)

line 2028: au BufNewFile,BufRead *.ron^I^I^Isetf ron

line 2029: 

line 2030: " MikroTik RouterOS script

line 2031: au BufRead,BufNewFile *.rsc^I^I^Isetf routeros

line 2032: 

line 2033: " Rpcgen

line 2034: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen

line 2035: 

line 2036: " reStructuredText Documentation Format

line 2037: au BufNewFile,BufRead *.rst^I^I^Isetf rst

line 2038: 

line 2039: " RTF

line 2040: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf

line 2041: 

line 2042: " Interactive Ruby shell

line 2043: au BufNewFile,BufRead .irbrc,irbrc,.irb_history,irb_history^Isetf ruby

line 2044: 

line 2045: " Ruby

line 2046: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby

line 2047: 

line 2048: " RubyGems

line 2049: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby

line 2050: 

line 2051: " RBS (Ruby Signature)

line 2052: au BufNewFile,BufRead *.rbs^I^I^Isetf rbs

line 2053: 

line 2054: " Rackup

line 2055: au BufNewFile,BufRead *.ru^I^I^Isetf ruby

line 2056: 

line 2057: " Bundler

line 2058: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby

line 2059: 

line 2060: " Ruby on Rails

line 2061: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby

line 2062: 

line 2063: " Rantfile and Rakefile is like Ruby

line 2064: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby

line 2065: 

line 2066: " Rust

line 2067: au BufNewFile,BufRead *.rs^I^I^Isetf rust

line 2068: au BufNewFile,BufRead Cargo.lock,*/.cargo/config,*/.cargo/credentials^Isetf toml

line 2069: 

line 2070: " S-lang (or shader language, or SmallLisp)

line 2071: au BufNewFile,BufRead *.sl^I^I^Isetf slang

line 2072: 

line 2073: " Sage

line 2074: au BufNewFile,BufRead *.sage^I^I^Isetf sage

line 2075: 

line 2076: " Samba config

line 2077: au BufNewFile,BufRead smb.conf^I^I^Isetf samba

line 2078: 

line 2079: " SAS script

line 2080: au BufNewFile,BufRead *.sas^I^I^Isetf sas

line 2081: 

line 2082: " Sass

line 2083: au BufNewFile,BufRead *.sass^I^I^Isetf sass

line 2084: 

line 2085: " Sather

line 2086: au BufNewFile,BufRead *.sa^I^I^Isetf sather

line 2087: 

line 2088: " Scala

line 2089: au BufNewFile,BufRead *.scala^I^I^Isetf scala

line 2090: 

line 2091: " SBT - Scala Build Tool

line 2092: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt

line 2093: 

line 2094: " Slint

line 2095: au BufNewFile,BufRead *.slint^I^I^Isetf slint

line 2096: 

line 2097: " SuperCollider

line 2098: au BufNewFile,BufRead *.sc^I^I^Icall dist#ft#FTsc()

line 2099: 

line 2100: au BufNewFile,BufRead *.quark^I^I^Isetf supercollider

line 2101: 

line 2102: " scdoc

line 2103: au BufNewFile,BufRead *.scd^I^I^Icall dist#ft#FTscd()

line 2104: 

line 2105: " Scilab

line 2106: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab

line 2107: 

line 2108: 

line 2109: " SCSS

line 2110: au BufNewFile,BufRead *.scss^I^I^Isetf scss

line 2111: 

line 2112: " SD: Streaming Descriptors

line 2113: au BufNewFile,BufRead *.sd^I^I^Isetf sd

line 2114: 

line 2115: " SDL

line 2116: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl

line 2117: 

line 2118: " sed

line 2119: au BufNewFile,BufRead *.sed^I^I^Isetf sed

line 2120: 

line 2121: " SubRip

line 2122: au BufNewFile,BufRead *.srt^I^I^Isetf srt

line 2123: 

line 2124: " SubStation Alpha

line 2125: au BufNewFile,BufRead *.ass,*.ssa^I^Isetf ssa

line 2126: 

line 2127: " svelte

line 2128: au BufNewFile,BufRead *.svelte^I^I^Isetf svelte

line 2129: 

line 2130: " Sieve (RFC 3028, 5228)

line 2131: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve

line 2132: 

line 2133: " Sendmail

line 2134: au BufNewFile,BufRead sendmail.cf^I^Isetf sm

line 2135: 

line 2136: " Sendmail .mc files are actually m4.  Could also be MS Message text file or

line 2137: " Maxima.

line 2138: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()

line 2139: 

line 2140: " Services

line 2141: au BufNewFile,BufRead */etc/services^I^Isetf services

line 2142: 

line 2143: " Service Location config

line 2144: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf

line 2145: 

line 2146: " Service Location registration

line 2147: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg

line 2148: 

line 2149: " Service Location SPI

line 2150: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi

line 2151: 

line 2152: " Setserial config

line 2153: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial

line 2154: 

line 2155: " SGML

line 2156: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif

line 2166: 

line 2167: " SGMLDECL

line 2168: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif

line 2172: 

line 2173: " SGML catalog file

line 2174: au BufNewFile,BufRead catalog^I^I^Isetf catalog

line 2175: 

line 2176: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.

line 2177: " Gentoo ebuilds, Arch Linux PKGBUILDs and Alpine Linux APKBUILDs are actually

line 2178: " bash scripts.

line 2179: " NOTE: Patterns ending in a star are further down, these have lower priority.

line 2180: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,.bash[_-]history,bash-fc[-.],*.ebuild,*.bash,*.eclass,PKGBUILD,APKBUILD,*.bats,*.cygport call dist#ft#SetFileTypeSH("bash")

line 2181: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")

line 2182: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env{rc,} call dist#ft#SetFileTypeSH(getline(1))

line 2183: 

line 2184: " Shell script (Arch Linux) or PHP file (Drupal)

line 2185: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif

line 2191: 

line 2192: " tcsh scripts (patterns ending in a star further below)

line 2193: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")

line 2194: 

line 2195: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)

line 2196: " (patterns ending in a start further below)

line 2197: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()

line 2198: 

line 2199: " Zig and Zig Object Notation (ZON)

line 2200: au BufNewFile,BufRead *.zig,*.zon^I^Isetf zig

line 2201: 

line 2202: " Ziggy and Ziggy Schema

line 2203: au BufNewFile,BufRead *.ziggy                   setf ziggy

line 2204: au BufNewFile,BufRead *.ziggy-schema            setf ziggy_schema

line 2205: 

line 2206: " Zserio

line 2207: au BufNewFile,BufRead *.zs^I^I^Isetf zserio

line 2208: 

line 2209: " Z-Shell script (patterns ending in a star further below)

line 2210: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh

line 2211: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump,.zsh_history setf zsh

line 2212: au BufNewFile,BufRead *.zsh,*.zsh-theme,*.zunit^I^Isetf zsh

line 2213: 

line 2214: " Scheme ("racket" patterns are now separate, see above)

line 2215: au BufNewFile,BufRead *.scm,*.ss,*.sld^I^Isetf scheme

line 2216: 

line 2217: " Screen RC

line 2218: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen

line 2219: 

line 2220: " Sexplib

line 2221: au BufNewFile,BufRead *.sexp setf sexplib

line 2222: 

line 2223: " Simula

line 2224: au BufNewFile,BufRead *.sim^I^I^Isetf simula

line 2225: 

line 2226: " SINDA

line 2227: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda

line 2228: 

line 2229: " SiSU

line 2230: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu

line 2231: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu

line 2232: 

line 2233: " SKILL

line 2234: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill

line 2235: 

line 2236: " Cadence

line 2237: au BufNewFile,BufRead *.cdc^I^I^Isetf cdc

line 2238: 

line 2239: " SLRN

line 2240: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc

line 2241: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc

line 2242: 

line 2243: " Smali

line 2244: au BufNewFile,BufRead *.smali^I^I^Isetf smali

line 2245: 

line 2246: " Smalltalk

line 2247: au BufNewFile,BufRead *.st^I^I^Isetf st

line 2248: 

line 2249: " Smalltalk (and Rexx, TeX, and Visual Basic)

line 2250: au BufNewFile,BufRead *.cls^I^I^Icall dist#ft#FTcls()

line 2251: 

line 2252: " Smarty templates

line 2253: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty

line 2254: 

line 2255: " SMIL or XML

line 2256: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif

line 2262: 

line 2263: " SMIL or SNMP MIB file

line 2264: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif

line 2270: 

line 2271: " SMITH

line 2272: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith

line 2273: 

line 2274: " Smithy

line 2275: au BufNewFile,BufRead *.smithy^I^I^Isetf smithy

line 2276: 

line 2277: " Snakemake

line 2278: au BufNewFile,BufRead Snakefile,*.smk^I^Isetf snakemake

line 2279: 

line 2280: " Snobol4 and spitbol

line 2281: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4

line 2282: 

line 2283: " SNMP MIB files

line 2284: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib

line 2285: 

line 2286: " Snort Configuration

line 2287: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog

line 2288: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()

line 2289: 

line 2290: " Solidity

line 2291: au BufRead,BufNewFile *.sol^I^I^Isetf solidity

line 2292: 

line 2293: " SPARQL queries

line 2294: au BufNewFile,BufRead *.rq,*.sparql^I^Isetf sparql

line 2295: 

line 2296: " Spec (Linux RPM)

line 2297: au BufNewFile,BufRead *.spec^I^I^Isetf spec

line 2298: 

line 2299: " Speedup (AspenTech plant simulator)

line 2300: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup

line 2301: 

line 2302: " Slice

line 2303: au BufNewFile,BufRead *.ice^I^I^Isetf slice

line 2304: 

line 2305: " Microsoft Visual Studio Solution

line 2306: au BufNewFile,BufRead *.sln^I^I^Isetf solution

line 2307: au BufNewFile,BufRead *.slnf^I^I^Isetf json

line 2308: 

line 2309: " Spice

line 2310: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice

line 2311: 

line 2312: " Spyce

line 2313: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce

line 2314: 

line 2315: " Squid

line 2316: au BufNewFile,BufRead squid.conf^I^Isetf squid

line 2317: 

line 2318: " SQL for Oracle Designer

line 2319: au BufNewFile,BufRead *.tyb,*.tyc,*.pkb,*.pks^Isetf sql

line 2320: 

line 2321: " *.typ can be either SQL or Typst files

line 2322: au BufNewFile,BufRead *.typ^I^I^Icall dist#ft#FTtyp()

line 2323: 

line 2324: " SQL

line 2325: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()

line 2326: au BufNewFile,BufRead .sqlite_history^I^Isetf sql

line 2327: 

line 2328: " SQLJ

line 2329: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj

line 2330: 

line 2331: " PRQL

line 2332: au BufNewFile,BufRead *.prql^I^I^Isetf prql

line 2333: 

line 2334: " SQR

line 2335: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr

line 2336: 

line 2337: " Squirrel

line 2338: au BufNewFile,BufRead *.nut^I^I^Isetf squirrel

line 2339: 

line 2340: " OpenSSH configuration

line 2341: au BufNewFile,BufRead ssh_config,*/.ssh/config,*/.ssh/*.conf^Isetf sshconfig

line 2342: au BufNewFile,BufRead */etc/ssh/ssh_config.d/*.conf^I^Isetf sshconfig

line 2343: 

line 2344: " OpenSSH server configuration

line 2345: au BufNewFile,BufRead sshd_config^I^I^Isetf sshdconfig

line 2346: au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf^Isetf sshdconfig

line 2347: 

line 2348: " Starlark

line 2349: au BufNewFile,BufRead *.ipd,*.star,*.starlark^Isetf starlark

line 2350: 

line 2351: " OpenVPN configuration

line 2352: au BufNewFile,BufRead *.ovpn^I^I^Isetf openvpn

line 2353: au BufNewFile,BufRead */openvpn/*/*.conf^Isetf openvpn

line 2354: 

line 2355: " Stata

line 2356: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata

line 2357: " Also *.class, but not when it's a Java bytecode file

line 2358: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif

line 2360: 

line 2361: " SMCL

line 2362: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl

line 2363: 

line 2364: " Stored Procedures

line 2365: au BufNewFile,BufRead *.stp^I^I^Isetf stp

line 2366: 

line 2367: " Standard ML

line 2368: au BufNewFile,BufRead *.sml^I^I^Isetf sml

line 2369: 

line 2370: " Sratus VOS command macro

line 2371: au BufNewFile,BufRead *.cm^I^I^Isetf voscm

line 2372: 

line 2373: " Swift

line 2374: au BufNewFile,BufRead *.swift,*.swiftinterface^Isetf swift

line 2375: au BufNewFile,BufRead *.swift.gyb^I^Isetf swiftgyb

line 2376: 

line 2377: " Swift Intermediate Language or SILE

line 2378: au BufNewFile,BufRead *.sil^I^I^Icall dist#ft#FTsil()

line 2379: 

line 2380: " Swig

line 2381: au BufNewFile,BufRead *.swg,*.swig setf swig

line 2382: 

line 2383: " Sysctl

line 2384: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl

line 2385: 

line 2386: " Systemd unit files

line 2387: au BufNewFile,BufRead */systemd/*.{automount,dnssd,link,mount,netdev,network,nspawn,path,service,slice,socket,swap,target,timer}^Isetf systemd

line 2388: " Systemd overrides

line 2389: au BufNewFile,BufRead */etc/systemd/*.conf.d/*.conf^Isetf systemd

line 2390: au BufNewFile,BufRead */etc/systemd/system/*.d/*.conf^Isetf systemd

line 2391: au BufNewFile,BufRead */.config/systemd/user/*.d/*.conf^Isetf systemd

line 2392: " Systemd temp files

line 2393: au BufNewFile,BufRead */etc/systemd/system/*.d/.#*^Isetf systemd

line 2394: au BufNewFile,BufRead */etc/systemd/system/.#*^I^Isetf systemd

line 2395: au BufNewFile,BufRead */.config/systemd/user/*.d/.#*^Isetf systemd

line 2396: au BufNewFile,BufRead */.config/systemd/user/.#*^Isetf systemd

line 2397: 

line 2398: " Synopsys Design Constraints

line 2399: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc

line 2400: 

line 2401: " Sudoers

line 2402: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers

line 2403: 

line 2404: " SVG (Scalable Vector Graphics)

line 2405: au BufNewFile,BufRead *.svg^I^I^Isetf svg

line 2406: 

line 2407: " Surface

line 2408: au BufRead,BufNewFile *.sface^I^I^Isetf surface

line 2409: 

line 2410: " LLVM TableGen

line 2411: au BufNewFile,BufRead *.td^I^I^Isetf tablegen

line 2412: 

line 2413: " Tads (or Nroff or Perl test file)

line 2414: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif

line 2416: 

line 2417: " Tags

line 2418: au BufNewFile,BufRead tags^I^I^Isetf tags

line 2419: 

line 2420: " TAK

line 2421: au BufNewFile,BufRead *.tak^I^I^Isetf tak

line 2422: 

line 2423: " Unx Tal

line 2424: au BufNewFile,BufRead *.tal^I^I^Isetf tal

line 2425: 

line 2426: " Task

line 2427: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata

line 2428: au BufRead,BufNewFile *.task^I^I^Isetf taskedit

line 2429: 

line 2430: " Tcl (JACL too)

line 2431: au BufNewFile,BufRead *.tcl,*.tm,*.tk,*.itcl,*.itk,*.jacl,.tclshrc,.wishrc,.tclsh-history^Isetf tcl

line 2432: 

line 2433: " Xilinx's xsct and xsdb use tcl

line 2434: au BufNewFile,BufRead .xsctcmdhistory,.xsdbcmdhistory^Isetf tcl

line 2435: 

line 2436: " templ

line 2437: au BufNewFile,BufRead *.templ^I^I^Isetf templ

line 2438: 

line 2439: " Teal

line 2440: au BufRead,BufNewFile *.tl^I^I^Isetf teal

line 2441: 

line 2442: " TealInfo

line 2443: au BufNewFile,BufRead *.tli^I^I^Isetf tli

line 2444: 

line 2445: " Telix Salt

line 2446: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt

line 2447: 

line 2448: " Tera Term Language or Turtle

line 2449: au BufRead,BufNewFile *.ttl if getline(1) =~ '^@\?\(prefix\|base\)' |   setf turtle | else |   setf teraterm | endif

line 2455: 

line 2456: " Terminfo

line 2457: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo

line 2458: 

line 2459: " Terraform variables

line 2460: au BufRead,BufNewFile *.tfvars^I^I^Isetf terraform-vars

line 2461: 

line 2462: " TeX

line 2463: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex

line 2464: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()

line 2465: au BufNewFile,BufRead texdoc.cnf^I^Isetf conf

line 2466: 

line 2467: " LaTeX packages will generate some medium LaTeX files during compiling

line 2468: " They should be ignored by .gitignore https://github.com/github/gitignore/blob/main/TeX.gitignore

line 2469: " Sometime we need to view its content for debugging

line 2470: au BufNewFile,BufRead *.{pgf,nlo,nls,thm,eps_tex,pygtex,pygstyle,clo,aux,brf,ind,lof,loe,nav,vrb,ins,tikz,bbx,cbx,beamer}^Isetf tex

line 2471: 

line 2472: " LaTeX files generated by Inkscape

line 2473: au BufNewFile,BufRead *.pdf_tex^I^I^Isetf tex

line 2474: 

line 2475: " ConTeXt

line 2476: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi,*.mkxl,*.mklx   setf context

line 2477: 

line 2478: " Texinfo

line 2479: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo

line 2480: 

line 2481: " TeX configuration

line 2482: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf

line 2483: 

line 2484: " Thrift (Apache)

line 2485: au BufNewFile,BufRead *.thrift^I^I^Isetf thrift

line 2486: 

line 2487: " Tidy config

line 2488: au BufNewFile,BufRead .tidyrc,tidyrc,tidy.conf^Isetf tidy

line 2489: 

line 2490: " TF (TinyFugue) mud client

line 2491: au BufNewFile,BufRead .tfrc,tfrc^I^Isetf tf

line 2492: 

line 2493: " TF (TinyFugue) mud client or terraform

line 2494: au BufNewFile,BufRead *.tf^I^I^Icall dist#ft#FTtf()

line 2495: 

line 2496: " TLA+

line 2497: au BufNewFile,BufRead *.tla^I^I^Isetf tla

line 2498: 

line 2499: " tmux configuration

line 2500: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux

line 2501: 

line 2502: " TOML

line 2503: au BufNewFile,BufRead *.toml^I^I^Isetf toml

line 2504: 

line 2505: " TPP - Text Presentation Program

line 2506: au BufNewFile,BufRead *.tpp^I^I^Isetf tpp

line 2507: 

line 2508: " TRACE32 Script Language

line 2509: au BufNewFile,BufRead *.cmm,*.t32^I^Isetf trace32

line 2510: 

line 2511: " Treetop

line 2512: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop

line 2513: 

line 2514: " Trustees

line 2515: au BufNewFile,BufRead trustees.conf^I^Isetf trustees

line 2516: 

line 2517: " TSS - Geometry

line 2518: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm

line 2519: 

line 2520: " TSS - Optics

line 2521: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop

line 2522: 

line 2523: " TSS - Command Line (temporary)

line 2524: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl

line 2525: 

line 2526: " TSV Files

line 2527: au BufNewFile,BufRead *.tsv^I^I^Isetf tsv

line 2528: 

line 2529: " TWIG files

line 2530: au BufNewFile,BufReadPost *.twig^I^Isetf twig

line 2531: 

line 2532: " TypeScript or Qt translation file (which is XML)

line 2533: au BufNewFile,BufReadPost *.ts if getline(1) =~ '<?xml' |   setf xml | else |   setf typescript | endif

line 2539: au BufNewFile,BufRead .ts_node_repl_history^Isetf typescript

line 2540: 

line 2541: " TypeScript module and common

line 2542: au BufNewFile,BufRead *.mts,*.cts^I^Isetf typescript

line 2543: 

line 2544: " TypeScript with React

line 2545: au BufNewFile,BufRead *.tsx^I^I^Isetf typescriptreact

line 2546: 

line 2547: " TypeSpec files

line 2548: au BufNewFile,BufRead *.tsp^I^I^Isetf typespec

line 2549: 

line 2550: " Motif UIT/UIL files

line 2551: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil

line 2552: 

line 2553: " Udev conf

line 2554: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf

line 2555: 

line 2556: " Udev permissions

line 2557: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm

line 2558: "

line 2559: " Udev symlinks config

line 2560: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh

line 2561: 

line 2562: " Ungrammar, AKA Un-grammar

line 2563: au BufNewFile,BufRead *.ungram^I^I^Isetf ungrammar

line 2564: 

line 2565: " UnrealScript

line 2566: au BufNewFile,BufRead *.uc^I^I^Isetf uc

line 2567: 

line 2568: " Updatedb

line 2569: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb

line 2570: 

line 2571: " Upstart (init(8)) config files

line 2572: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart

line 2573: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart

line 2574: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart

line 2575: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart

line 2576: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart

line 2577: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart

line 2578: 

line 2579: " URL shortcut

line 2580: au BufNewFile,BufRead *.url^I^I^Isetf urlshortcut

line 2581: 

line 2582: " V

line 2583: au BufNewFile,BufRead *.vsh,*.vv^I^I^Isetf v

line 2584: 

line 2585: " Vala

line 2586: au BufNewFile,BufRead *.vala^I^I^Isetf vala

line 2587: 

line 2588: " VDF

line 2589: au BufNewFile,BufRead *.vdf^I^I^Isetf vdf

line 2590: 

line 2591: " VDM

line 2592: au BufRead,BufNewFile *.vdmpp,*.vpp^I^Isetf vdmpp

line 2593: au BufRead,BufNewFile *.vdmrt^I^I^Isetf vdmrt

line 2594: au BufRead,BufNewFile *.vdmsl,*.vdm^I^Isetf vdmsl

line 2595: 

line 2596: " Vento

line 2597: au BufNewFile,BufRead *.vto^I^I^Isetf vento

line 2598: 

line 2599: " Vera

line 2600: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera

line 2601: 

line 2602: " Vagrant (uses Ruby syntax)

line 2603: au BufNewFile,BufRead Vagrantfile^I^Isetf ruby

line 2604: 

line 2605: " Verilog HDL, V or Coq

line 2606: au BufNewFile,BufRead *.v^I^I^Icall dist#ft#FTv()

line 2607: 

line 2608: " Verilog-AMS HDL

line 2609: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams

line 2610: 

line 2611: " SystemVerilog

line 2612: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog

line 2613: 

line 2614: " VHS tape

line 2615: " .tape is also used by TapeCalc, which we do not support ATM.  If TapeCalc

line 2616: " support is needed the contents of the file needs to be inspected.

line 2617: au BufNewFile,BufRead *.tape^I^I^Isetf vhs

line 2618: 

line 2619: " VHDL

line 2620: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst,*.vho  setf vhdl

line 2621: 

line 2622: " Vim script

line 2623: au BufNewFile,BufRead *.vim,.exrc,_exrc,.netrwhist^Isetf vim

line 2624: 

line 2625: " Viminfo file

line 2626: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo

line 2627: 

line 2628: " Virata Config Script File or Drupal module

line 2629: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif

line 2635: 

line 2636: " Visual Basic (see also *.bas *.cls)

line 2637: 

line 2638: " Visual Basic or FORM

line 2639: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTfrm()

line 2640: 

line 2641: " Visual Basic

line 2642: " user control, ActiveX document form, active designer, property page

line 2643: au BufNewFile,BufRead *.ctl,*.dob,*.dsr,*.pag^Isetf vb

line 2644: 

line 2645: " Visual Basic or Vimball Archiver

line 2646: au BufNewFile,BufRead *.vba^I^I^Icall dist#ft#FTvba()

line 2647: 

line 2648: " Visual Basic Project

line 2649: au BufNewFile,BufRead *.vbp^I^I^Isetf dosini

line 2650: 

line 2651: " VBScript (close to Visual Basic)

line 2652: au BufNewFile,BufRead *.vbs^I^I^Isetf vb

line 2653: 

line 2654: " Visual Basic .NET (close to Visual Basic)

line 2655: au BufNewFile,BufRead *.vb^I^I^Isetf vb

line 2656: 

line 2657: " Visual Studio Macro

line 2658: au BufNewFile,BufRead *.dsm^I^I^Isetf vb

line 2659: 

line 2660: " SaxBasic (close to Visual Basic)

line 2661: au BufNewFile,BufRead *.sba^I^I^Isetf vb

line 2662: 

line 2663: " Vgrindefs file

line 2664: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs

line 2665: 

line 2666: " VRML V1.0c

line 2667: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml

line 2668: 

line 2669: " Vroom (vim testing and executable documentation)

line 2670: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom

line 2671: 

line 2672: " Vue.js Single File Component

line 2673: au BufNewFile,BufRead *.vue^I^I^Isetf vue

line 2674: 

line 2675: " WebAssembly

line 2676: au BufNewFile,BufRead *.wat,*.wast^I^Isetf wat

line 2677: 

line 2678: " WebAssembly Interface Type (WIT)

line 2679: au BufNewFile,BufRead *.wit^I^I^Isetf wit

line 2680: 

line 2681: " Webmacro

line 2682: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro

line 2683: 

line 2684: " Wget config

line 2685: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget

line 2686: 

line 2687: " Wget2 config

line 2688: au BufNewFile,BufRead .wget2rc,wget2rc^I^Isetf wget2

line 2689: 

line 2690: " WebGPU Shading Language (WGSL)

line 2691: au BufNewFile,BufRead *.wgsl^I^I^Isetf wgsl

line 2692: 

line 2693: " Website MetaLanguage

line 2694: au BufNewFile,BufRead *.wml^I^I^Isetf wml

line 2695: 

line 2696: " Winbatch

line 2697: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch

line 2698: 

line 2699: " WSML

line 2700: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml

line 2701: 

line 2702: " WPL

line 2703: au BufNewFile,BufRead *.wpl^I^I^Isetf xml

line 2704: 

line 2705: " WvDial

line 2706: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial

line 2707: 

line 2708: " CVS RC file

line 2709: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc

line 2710: 

line 2711: " CVS commit file

line 2712: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs

line 2713: 

line 2714: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment

line 2715: " lines in a WEB file).

line 2716: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif

line 2722: 

line 2723: " Windows Scripting Host and Windows Script Component

line 2724: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh

line 2725: 

line 2726: " Xdg-user-dirs

line 2727: au BufNewFile,BufRead user-dirs.dirs,user-dirs.defaults^I^Isetf sh

line 2728: 

line 2729: " XHTML

line 2730: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml

line 2731: 

line 2732: " X11vnc

line 2733: au BufNewFile,BufRead .x11vncrc^I^I^Isetf conf

line 2734: 

line 2735: " Xprofile

line 2736: au BufNewFile,BufRead .xprofile^I^I^Isetf sh

line 2737: 

line 2738: " X Pixmap (dynamically sets colors, this used to trigger on BufEnter to make

line 2739: " it work better, but that breaks setting 'filetype' manually)

line 2740: au BufNewFile,BufRead *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif

line 2746: au BufNewFile,BufRead *.xpm2^I^I^Isetf xpm2

line 2747: 

line 2748: " XFree86 config

line 2749: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf

line 2754: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf

line 2757: 

line 2758: " Xorg config

line 2759: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf

line 2760: 

line 2761: " Xinetd conf

line 2762: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd

line 2763: 

line 2764: " Xilinx Vivado/Vitis project files and block design files

line 2765: au BufNewFile,BufRead *.xpr,*.xpfm,*.spfm,*.bxml^I^Isetf xml

line 2766: au BufNewFile,BufRead *.bd,*.bda,*.xci^I^I^I^Isetf json

line 2767: 

line 2768: " XS Perl extension interface language

line 2769: au BufNewFile,BufRead *.xs^I^I^Isetf xs

line 2770: 

line 2771: " X compose file

line 2772: au BufNewFile,BufRead .XCompose,Compose^Isetf xcompose

line 2773: 

line 2774: " X resources file

line 2775: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults

line 2776: 

line 2777: " Xmath

line 2778: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath

line 2779: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif

line 2781: 

line 2782: " XML  specific variants: docbk and xbl

line 2783: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()

line 2784: 

line 2785: " XMI (holding UML models) is also XML

line 2786: au BufNewFile,BufRead *.xmi^I^I^Isetf xml

line 2787: 

line 2788: " CSPROJ files are Visual Studio.NET's XML-based C# project config files

line 2789: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml

line 2790: 

line 2791: " FSPROJ files are Visual Studio.NET's XML-based F# project config files

line 2792: au BufNewFile,BufRead *.fsproj,*.fsproj.user^Isetf xml

line 2793: 

line 2794: " VBPROJ files are Visual Studio.NET's XML-based Visual Basic project config files

line 2795: au BufNewFile,BufRead *.vbproj,*.vbproj.user^Isetf xml

line 2796: 

line 2797: " Unison Language

line 2798: au BufNewFile,BufRead *.u,*.uu^I^I^I^Isetf unison

line 2799: 

line 2800: " Qt Linguist translation source and Qt User Interface Files are XML

line 2801: " However, for .ts TypeScript is more common.

line 2802: au BufNewFile,BufRead *.ui^I^I^Isetf xml

line 2803: 

line 2804: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)

line 2805: au BufNewFile,BufRead *.tpm^I^I^Isetf xml

line 2806: 

line 2807: " Xdg menus

line 2808: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml

line 2809: 

line 2810: " ATI graphics driver configuration

line 2811: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml

line 2812: 

line 2813: " Web Services Description Language (WSDL)

line 2814: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml

line 2815: 

line 2816: " Workflow Description Language (WDL)

line 2817: au BufNewFile,BufRead *.wdl^I^I^Isetf wdl

line 2818: 

line 2819: " XLIFF (XML Localisation Interchange File Format) is also XML

line 2820: au BufNewFile,BufRead *.xlf^I^I^Isetf xml

line 2821: au BufNewFile,BufRead *.xliff^I^I^Isetf xml

line 2822: 

line 2823: " XML User Interface Language

line 2824: au BufNewFile,BufRead *.xul^I^I^Isetf xml

line 2825: 

line 2826: " X11 xmodmap (also see below)

line 2827: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap

line 2828: 

line 2829: " Xquery

line 2830: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery

line 2831: 

line 2832: " XSD

line 2833: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd

line 2834: 

line 2835: " Xslt

line 2836: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt

line 2837: 

line 2838: " Yacc

line 2839: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc

line 2840: 

line 2841: " Yacc or racc

line 2842: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()

line 2843: 

line 2844: " Yaml

line 2845: au BufNewFile,BufRead *.yaml,*.yml,*.eyaml^I^Isetf yaml

line 2846: 

line 2847: " Raml

line 2848: au BufNewFile,BufRead *.raml^I^I^Isetf raml

line 2849: 

line 2850: " yum conf (close enough to dosini)

line 2851: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini

line 2852: 

line 2853: " YANG

line 2854: au BufRead,BufNewFile *.yang^I^I^Isetf yang

line 2855: 

line 2856: " Yuck

line 2857: au BufNewFile,BufRead *.yuck^I^I^Isetf yuck

line 2858: 

line 2859: " Zimbu

line 2860: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu

line 2861: " Zimbu Templates

line 2862: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl

line 2863: 

line 2864: " Zope

line 2865: "   dtml (zope dynamic template markup language), pt (zope page template),

line 2866: "   cpt (zope form controller page template)

line 2867: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()

line 2868: "   zsql (zope sql method)

line 2869: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()

line 2870: 

line 2871: " Z80 assembler asz80

line 2872: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a

line 2873: 

line 2874: augroup END

line 2875: 

line 2876: 

line 2877: " Source the user-specified filetype file, for backwards compatibility with

line 2878: " Vim 5.x.

line 2879: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))

line 2880:   execute "source " . myfiletypefile

line 2881: endif

line 2882: 

line 2883: 

line 2884: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used

line 2885: " when there are no matching file name extensions.

line 2886: " Don't do this for compressed files.

line 2887: augroup filetypedetect

line 2888: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

line 2891: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif

line 2892: 

line 2893: 

line 2894: " Plain text files, needs to be far down to not override others.  This avoids

line 2895: " the "conf" type being used if there is a line starting with '#'.

line 2896: " But before patterns matching everything in a directory.

line 2897: au BufNewFile,BufRead *.text,README,LICENSE,COPYING,AUTHORS^Isetf text

line 2898: 

line 2899: " What should *.out files be? Text?

line 2900: " Disabled until it is clear, to what this should be set

line 2901: "au BufNewFile,BufRead *.out^Isetf text

line 2902: 

line 2903: 

line 2904: " Extra checks for when no filetype has been detected now.  Mostly used for

line 2905: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim

line 2906: " script file.

line 2907: " Most of these should call s:StarSetf() to avoid names ending in .gz and the

line 2908: " like are used.

line 2909: 

line 2910: " More Apache style config files

line 2911: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')

line 2912: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')

line 2913: 

line 2914: " More Apache config files

line 2915: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')

line 2916: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.*/*,*/etc/httpd/mods-*/*,*/etc/httpd/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')

line 2917: 

line 2918: " APT config file

line 2919: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} call s:StarSetf('aptconf')

line 2920: 

line 2921: " Asterisk config file

line 2922: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')

line 2923: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')

line 2924: 

line 2925: " Bazaar version control

line 2926: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr

line 2927: 

line 2928: " Bazel and Buck2 build file

line 2929: if !has("fname_case")

line 2930:   au BufNewFile,BufRead *.BUILD,BUILD,BUCK^Isetf bzl

line 2931: endif

line 2932: 

line 2933: " BIND zone

line 2934: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')

line 2935: 

line 2936: au BufNewFile,BufRead cabal.project.*^I^Icall s:StarSetf('cabalproject')

line 2937: 

line 2938: " Calendar

line 2939: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')

line 2942: 

line 2943: " Changelog

line 2944: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif

line 2950: 

line 2951: " Crontab

line 2952: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')

line 2953: 

line 2954: " dnsmasq(8) configuration

line 2955: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')

line 2956: 

line 2957: " Dockerfile

line 2958: au BufNewFile,BufRead Dockerfile.*,Containerfile.*^Icall s:StarSetf('dockerfile')

line 2959: 

line 2960: " Dracula

line 2961: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')

line 2962: 

line 2963: " Fvwm

line 2964: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')

line 2965: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')

line 2967: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif

line 2973: 

line 2974: " Gedcom

line 2975: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')

line 2976: 

line 2977: " Git

line 2978: au BufNewFile,BufRead */.gitconfig.d/*,*/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')

line 2979: 

line 2980: " Gitolite

line 2981: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')

line 2982: 

line 2983: " GTK RC

line 2984: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')

line 2985: 

line 2986: " Jam

line 2987: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')

line 2988: 

line 2989: " Jargon

line 2990: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif

line 2994: 

line 2995: " Java Properties resource file (note: doesn't catch font.properties.pl)

line 2996: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')

line 2997: 

line 2998: " Kconfig

line 2999: au BufNewFile,BufRead Kconfig.*,Config.in.*^Icall s:StarSetf('kconfig')

line 3000: 

line 3001: " Lilo: Linux loader

line 3002: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')

line 3003: 

line 3004: " Libsensors

line 3005: au BufNewFile,BufRead */etc/sensors.d/[^.]*^Icall s:StarSetf('sensors')

line 3006: 

line 3007: " Logcheck

line 3008: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')

line 3009: 

line 3010: " Makefile

line 3011: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')

line 3012: 

line 3013: " Ruby Makefile

line 3014: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')

line 3015: 

line 3016: " Mail (also matches muttrc.vim, so this is below the other checks)

line 3017: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail

line 3018: 

line 3019: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')

line 3020: 

line 3021: " Modconf

line 3022: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif

line 3026: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')

line 3027: 

line 3028: " Mutt setup files (must be before catch *.rc)

line 3029: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')

line 3030: 

line 3031: " Mutt setup file

line 3032: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')

line 3033: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')

line 3034: 

line 3035: " Neomutt setup file

line 3036: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')

line 3037: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')

line 3038: 

line 3039: " Nfs

line 3040: au BufNewFile,BufRead nfs.conf,nfsmount.conf^I^Isetf dosini

line 3041: 

line 3042: " Nroff macros

line 3043: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')

line 3044: 

line 3045: " OpenBSD hostname.if

line 3046: au BufNewFile,BufRead */etc/hostname.*^I^Icall s:StarSetf('config')

line 3047: 

line 3048: " Pam conf

line 3049: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')

line 3050: 

line 3051: " Pandoc

line 3052: au BufNewFile,BufRead,BufFilePost *.pandoc,*.pdk,*.pd,*.pdc^Isetf pandoc

line 3053: 

line 3054: " Printcap and Termcap

line 3055: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif

line 3059: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif

line 3063: 

line 3064: " ReDIF

line 3065: " Only used when the .rdf file was not detected to be XML.

line 3066: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()

line 3067: 

line 3068: " Remind

line 3069: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')

line 3070: 

line 3071: " SGML catalog file

line 3072: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')

line 3073: 

line 3074: " Stylus

line 3075: au BufNewFile,BufReadPost *.styl,*.stylus^Isetf stylus

line 3076: 

line 3077: " avoid doc files being recognized a shell files

line 3078: au BufNewFile,BufRead */doc/{,.}bash[_-]completion{,.d,.sh}{,/*} setf text

line 3079: 

line 3080: " Shell scripts ending in a star

line 3081: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD*,APKBUILD*,*/{,.}bash[_-]completion{,.d,.sh}{,/*} call dist#ft#SetFileTypeSH("bash")

line 3082: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")

line 3083: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))

line 3084: 

line 3085: " Sudoers

line 3086: au BufNewFile,BufRead */etc/sudoers.d/*^I^Icall s:StarSetf('sudoers')

line 3087: 

line 3088: " tcsh scripts ending in a star

line 3089: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")

line 3090: 

line 3091: " csh scripts ending in a star

line 3092: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()

line 3093: 

line 3094: " tmux configuration with arbitrary extension

line 3095: au BufNewFile,BufRead {.,}tmux*.conf*^I^Isetf tmux

line 3096: 

line 3097: " Universal Scene Description

line 3098: au BufNewFile,BufRead *.usda,*.usd^I^Isetf usd

line 3099: 

line 3100: " UCI

line 3101: " UCI files are normally in /etc/config, but that might be mounted over sshfs or similar, so we match more loosely.

line 3102: " There was some concern[1] that this pattern would match too much, so now we check the file content as well.

line 3103: " [1]: https://github.com/vim/vim/pull/14385#discussion_r1558878741

line 3104: au BufNewFile,BufRead */etc/config/*^I^Iif dist#ft#Detect_UCI_statements() | call s:StarSetf('uci') | endif

line 3105: 

line 3106: " VHDL

line 3107: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')

line 3108: 

line 3109: " Vim script

line 3110: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')

line 3111: 

line 3112: " Subversion commit file

line 3113: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn

line 3114: 

line 3115: " X resources file

line 3116: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')

line 3117: 

line 3118: " XFree86 config

line 3119: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')

line 3121: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')

line 3126: 

line 3127: " XKB

line 3128: au BufNewFile,BufRead */usr/share/X11/xkb/{compat,geometry,keycodes,symbols,types}/*^Icall s:StarSetf('xkb')

line 3129: 

line 3130: " X11 xmodmap

line 3131: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')

line 3132: 

line 3133: " Xinetd conf

line 3134: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')

line 3135: 

line 3136: " yum conf (close enough to dosini)

line 3137: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')

line 3138: 

line 3139: " Z-Shell script ending in a star

line 3140: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')

line 3141: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')

line 3142: 

line 3143: " Zsh module

line 3144: " mdd: https://github.com/zsh-users/zsh/blob/57248b88830ce56adc243a40c7773fb3825cab34/Etc/zsh-development-guide#L285-L288

line 3145: " mdh, pro: https://github.com/zsh-users/zsh/blob/57248b88830ce56adc243a40c7773fb3825cab34/Etc/zsh-development-guide#L268-L271

line 3146: " *.mdd will generate *.mdh, *.pro and *.epro.

line 3147: " module's *.c will #include *.mdh containing module dependency information and

line 3148: " *.pro containing all static declarations of *.c

line 3149: " *.epro contains all external declarations of *.c

line 3150: au BufNewFile,BufRead *.mdh,*.epro^I^Isetf c

line 3151: au BufNewFile,BufRead *.mdd^I^I^Isetf sh

line 3152: 

line 3153: " Help files match *.txt but should have a last line that is a modeline.

line 3154: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif

line 3158: 

line 3159: " Blueprint markup files

line 3160: au BufNewFile,BufRead *.blp^I^I^Isetf blueprint

line 3161: 

line 3162: " Blueprint build system file

line 3163: au BufNewFile,BufRead *.bp^I^I^Isetf bp

line 3164: 

line 3165: " Use the filetype detect plugins.  They may overrule any of the previously

line 3166: " detected filetypes.

line 3167: runtime! ftdetect/*.vim

Searching for "ftdetect/*.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/ftdetect/*.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/ftdetect/*.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftdetect/*.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/ftdetect/*.vim"
Searching for "/Users/piotr/.config/vim/after/ftdetect/*.vim"
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/json.vim"
line 1: au BufNewFile,BufRead .parcelrc set filetype=json

finished sourcing /Users/piotr/.config/vim/after/ftdetect/json.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/ruby.vim"
line 1: au BufNewFile,BufRead *.jbuilder set filetype=ruby

line 2: au BufNewFile,BufRead Guardfile set filetype=ruby

finished sourcing /Users/piotr/.config/vim/after/ftdetect/ruby.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/todo.vim"
line 1: autocmd BufRead,BufNewFile todo.md call VimTodoListsInit()

line 2: autocmd FileType todo call VimTodoListsInit()

finished sourcing /Users/piotr/.config/vim/after/ftdetect/todo.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
chdir(/Users/piotr/.config/vim/after/ftdetect)
fchdir() to previous dir
line 3167: sourcing "/Users/piotr/.config/vim/after/ftdetect/yaml.vim"
line 1: au BufNewFile,BufRead .prettierrc set filetype=yaml

finished sourcing /Users/piotr/.config/vim/after/ftdetect/yaml.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
line 3168: 

line 3169: " NOTE: The above command could have ended the filetypedetect autocmd group

line 3170: " and started another one. Let's make sure it has ended to get to a consistent

line 3171: " state.

line 3172: augroup END

line 3173: 

line 3174: " Generic configuration file. Use FALLBACK, it's just guessing!

line 3175: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (expand("<amatch>") =~# '\.conf$'^I|| getline(1) =~ '^#' || getline(2) =~ '^#'^I|| getline(3) =~ '^#' || getline(4) =~ '^#'^I|| getline(5) =~ '^#') |   setf FALLBACK conf | endif

line 3183: 

line 3184: " Yarn lock

line 3185: au BufNewFile,BufRead yarn.lock^I^I^Isetf yaml

line 3186: 

line 3187: " Zathurarc

line 3188: au BufNewFile,BufRead zathurarc^I^I^Isetf zathurarc

line 3189: 

line 3190: " Rofi stylesheet

line 3191: au BufNewFile,BufRead *.rasi^I^I^Isetf rasi

line 3192: 

line 3193: " If the GUI is already running, may still need to install the Syntax menu.

line 3194: " Don't do it when the 'M' flag is included in 'guioptions'.

line 3195: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"

line 3197:   source <sfile>:p:h/menu.vim

chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 3197: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim"
line 1: " Vim support file to define the default menus

line 2: " You can also use this as a start for your own set of menus.

line 3: "

line 4: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 5: " Last Change:^I2023 Aug 10

line 6: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 7: 

line 8: " Note that ":an" (short for ":anoremenu") is often used to make a menu work

line 9: " in all modes and avoid side effects from mappings defined by the user.

line 10: 

line 11: " Make sure the '<' and 'C' flags are not included in 'cpoptions', otherwise

line 12: " <CR> would not be recognized.  See ":help 'cpoptions'".

line 13: let s:cpo_save = &cpo

line 14: set cpo&vim

line 15: 

line 16: " Avoid installing the menus twice

line 17: if !exists("did_install_default_menus")

line 18: let did_install_default_menus = 1

line 19: 

line 20: 

line 21: if exists("v:lang") || &langmenu != ""

line 22:   " Try to find a menu translation file for the current language.

line 23:   if &langmenu != ""

line 24:     if &langmenu =~ "none"

line 25:       let s:lang = ""

line 26:     else

line 27:       let s:lang = &langmenu

line 28:     endif

line 29:   else

line 30:     let s:lang = v:lang

line 31:   endif

line 32:   " A language name must be at least two characters, don't accept "C"

line 33:   " Also skip "en_US" to avoid picking up "en_gb" translations.

line 34:   if strlen(s:lang) > 1 && s:lang !~? '^en_us'

line 35:     " When the language does not include the charset add 'encoding'

line 36:     if s:lang =~ '^\a\a$\|^\a\a_\a\a$'

line 37:       let s:lang = s:lang .. '.' .. &enc

line 38:     endif

line 39: 

line 40:     " We always use a lowercase name.

line 41:     " Change "iso-8859" to "iso_8859" and "iso8859" to "iso_8859", some

line 42:     " systems appear to use this.

line 43:     " Change spaces to underscores.

line 44:     let s:lang = substitute(tolower(s:lang), '\.iso-', ".iso_", "")

line 45:     let s:lang = substitute(s:lang, '\.iso8859', ".iso_8859", "")

line 46:     let s:lang = substitute(s:lang, " ", "_", "g")

line 47:     " Remove "@euro", otherwise "LC_ALL=de_DE@euro gvim" will show English menus

line 48:     let s:lang = substitute(s:lang, "@euro", "", "")

line 49:     " Change "iso_8859-1" and "iso_8859-15" to "latin1", we always use the

line 50:     " same menu file for them.

line 51:     let s:lang = substitute(s:lang, 'iso_8859-15\=$', "latin1", "")

line 52:     menutrans clear

line 53:     exe "runtime! lang/menu_" .. s:lang .. ".vim"

line 54: 

line 55:     if !exists("did_menu_trans")

line 56:       " There is no exact match, try matching with a wildcard added

line 57:       " (e.g. find menu_de_de.iso_8859-1.vim if s:lang == de_DE).

line 58:       let s:lang = substitute(s:lang, '\.[^.]*', "", "")

line 59:       exe "runtime! lang/menu_" .. s:lang .. "[^a-z]*vim"

line 60: 

line 61:       if !exists("did_menu_trans") && s:lang =~ '_'

line 62: ^I" If the language includes a region try matching without that region.

line 63: ^I" (e.g. find menu_de.vim if s:lang == de_DE).

line 64: ^Ilet langonly = substitute(s:lang, '_.*', "", "")

line 65: ^Iexe "runtime! lang/menu_" .. langonly .. "[^a-z]*vim"

line 66:       endif

line 67: 

line 68:       if !exists("did_menu_trans") && strlen($LANG) > 1 && s:lang !~ '^en_us'

line 69: ^I" On windows locale names are complicated, try using $LANG, it might

line 70: ^I" have been set by set_init_1().  But don't do this for "en" or "en_us".

line 71: ^I" But don't match "slovak" when $LANG is "sl".

line 72: ^Iexe "runtime! lang/menu_" .. tolower($LANG) .. "[^a-z]*vim"

line 73:       endif

line 74:     endif

line 75:   endif

line 76: endif

line 77: 

line 78: 

line 79: " MacVim Window menu (should be next to Help so give it a high priority)

line 80: if has("gui_macvim")

line 81:   an <silent> 9998.300 Window.Minimize^I^I    <Nop>

line 82:   an <silent> 9998.301 Window.Minimize\ All^I    <Nop>

line 83:   an <silent> 9998.310 Window.Zoom^I^I    <Nop>

line 84:   an <silent> 9998.311 Window.Zoom\ All^I^I    <Nop>

line 85:   an 9998.318 Window.-SEP1-^I^I^I    <Nop>

line 86:   an <silent> 9998.320 Window.Toggle\ Full\ Screen\ Mode :set invfullscreen<CR>

line 87:   tln <silent> 9998.320 Window.Toggle\ Full\ Screen\ Mode <C-W>:set invfullscreen<CR>

line 88:   an 9998.330 Window.-SEP2-^I^I^I    <Nop>

line 89:   " TODO! Grey out if no tabs are visible.

line 90:   an <silent> 9998.340 Window.Show\ Next\ Tab^I    :tabnext<CR>

line 91:   tln <silent> 9998.340 Window.Show\ Next\ Tab^I<C-W>:tabnext<CR>

line 92:   an <silent> 9998.350 Window.Show\ Previous\ Tab :tabprevious<CR>

line 93:   tln <silent> 9998.350 Window.Show\ Previous\ Tab <C-W>:tabprevious<CR>

line 94:   an 9998.360 Window.-SEP3-^I^I^I    <Nop>

line 95:   an <silent> 9998.370 Window.Bring\ All\ To\ Front <Nop>

line 96:   an <silent> 9998.380 Window.Stay\ in\ Front <Nop>

line 97:   an <silent> 9998.390 Window.Stay\ in\ Back <Nop>

line 98:   an <silent> 9998.400 Window.Stay\ Level\ Normal <Nop>

line 99: endif

line 100: 

line 101: " Help menu

line 102: if has("gui_macvim")

line 103:   an 9999.1 &Help.MacVim\ Help^I^I    :h gui_mac<CR>

line 104:   tln 9999.1 &Help.MacVim\ Help^I^I    <C-W>:h gui_mac<CR>

line 105:   an <silent> 9999.2 &Help.MacVim\ Website   <Nop>

line 106:   an 9999.3 &Help.What's\ New        <Nop>

line 107:   tln 9999.3 &Help.What's\ New        <Nop>

line 108:   an 9999.4 &Help.Release\ Notes        <Cmd>silent !open https://github.com/macvim-dev/macvim/releases<CR>

line 109:   tln 9999.4 &Help.Release\ Notes        <Cmd>silent !open https://github.com/macvim-dev/macvim/releases<CR>

line 110:   an 9999.5 &Help.-sep0-^I^I    <Nop>

line 111: endif

line 112: if has("gui_macvim")

line 113:   " Run vimtutor in GUI mode. Need to make sure to override the PATH so we use

line 114:   " this app instead of accidentally opening another installed Vim/MacVim.

line 115:   an 9999.6 &Help.Vim\ Tutor       :silent call system('PATH="$VIM/../../bin":/usr/bin:/bin:/usr/sbin:/sbin $VIM/../../bin/vimtutor -g&')<CR>

line 116:   tln 9999.6 &Help.Vim\ Tutor      <C-W>:silent call system('PATH="$VIM/../../bin":/usr/bin:/bin:/usr/sbin:/sbin $VIM/../../bin/vimtutor -g&')<CR>

line 117:   an 9999.7 &Help.-sep-vim-tutor-  <Nop>

line 118: endif

line 119: an 9999.10 &Help.&Overview<Tab><F1>^I:help<CR>

line 120: an 9999.20 &Help.&User\ Manual^I^I:help usr_toc<CR>

line 121: an 9999.30 &Help.&How-To\ Links^I^I:help how-to<CR>

line 122: an <silent> 9999.40 &Help.&Find\.\.\.^I:call <SID>Helpfind()<CR>

line 123: an 9999.45 &Help.-sep1-^I^I^I<Nop>

line 124: an 9999.50 &Help.&Credits^I^I:help credits<CR>

line 125: an 9999.60 &Help.Co&pying^I^I:help copying<CR>

line 126: an 9999.70 &Help.&Sponsor/Register^I:help sponsor<CR>

line 127: an 9999.70 &Help.O&rphans^I^I:help kcc<CR>

line 128: an 9999.75 &Help.-sep2-^I^I^I<Nop>

line 129: an 9999.80 &Help.&Version^I^I:version<CR>

line 130: an 9999.90 &Help.&About^I^I^I:intro<CR>

line 131: 

line 132: if exists(':tlmenu')

line 133:   tlnoremenu 9999.10 &Help.&Overview<Tab><F1>^I^I<C-W>:help<CR>

line 134:   tlnoremenu 9999.20 &Help.&User\ Manual^I^I<C-W>:help usr_toc<CR>

line 135:   tlnoremenu 9999.30 &Help.&How-To\ Links^I^I<C-W>:help how-to<CR>

line 136:   tlnoremenu <silent> 9999.40 &Help.&Find\.\.\.^I^I<C-W>:call <SID>Helpfind()<CR>

line 137:   tlnoremenu 9999.45 &Help.-sep1-^I^I^I<Nop>

line 138:   tlnoremenu 9999.50 &Help.&Credits^I^I^I<C-W>:help credits<CR>

line 139:   tlnoremenu 9999.60 &Help.Co&pying^I^I^I<C-W>:help copying<CR>

line 140:   tlnoremenu 9999.70 &Help.&Sponsor/Register^I^I<C-W>:help sponsor<CR>

line 141:   tlnoremenu 9999.70 &Help.O&rphans^I^I^I<C-W>:help kcc<CR>

line 142:   tlnoremenu 9999.75 &Help.-sep2-^I^I^I<Nop>

line 143:   tlnoremenu 9999.80 &Help.&Version^I^I^I<C-W>:version<CR>

line 144:   tlnoremenu 9999.90 &Help.&About^I^I^I<C-W>:intro<CR>

line 145: endif

line 146: 

line 147: def s:Helpfind()

line 160: 

line 161: " File menu

line 162: if has("gui_macvim")

line 163:   an <silent> 10.290 &File.New\ Window                          <Nop>

line 164:   an <silent> 10.291 &File.New\ Clean\ Window^I^I        <Nop>

line 165:   an <silent> 10.292 &File.New\ Clean\ Window\ (No\ Defaults)   <Nop>

line 166:   an  10.295 &File.New\ Tab^I^I^I    :tabnew<CR>

line 167:   tln 10.295 &File.New\ Tab^I^I^I    <C-W>:tabnew<CR>

line 168:   an <silent> 10.310 &File.Open…^I^I    <Nop>

line 169:   an <silent> 10.325 &File.Open\ Recent^I^I    <Nop>

line 170:   an 10.328 &File.-SEP0-^I^I^I    <Nop>

line 171:   an <silent> 10.330 &File.Close\ Window<Tab>:qa    :conf qa<CR>

line 172:   tln <silent> 10.330 &File.Close\ Window<Tab>:qa   <C-W>:conf qa<CR>

line 173:   an <silent> 10.332 &File.Close<Tab>:q^I^I    :conf q<CR>

line 174:   tln <silent> 10.332 &File.Close<Tab>:q^I^I    <C-W>:conf q<CR>

line 175:   an <silent> 10.341 &File.Save\ All^I^I    :browse conf wa<CR>

line 176:   an 10.350 &File.Save\ As…<Tab>:sav^I    :browse confirm saveas<CR>

line 177: else

line 178: endif

line 179: if !has("gui_macvim")

line 180:   an 10.310 &File.&Open\.\.\.<Tab>:e^I^I:browse confirm e<CR>

line 181: endif

line 182: an 10.320 &File.Sp&lit-Open\.\.\.<Tab>:sp^I:browse sp<CR>

line 183: an 10.320 &File.Open\ &Tab\.\.\.<Tab>:tabnew^I:browse tabnew<CR>

line 184: if !has("gui_macvim")

line 185:   an 10.325 &File.&New<Tab>:enew^I^I:confirm enew<CR>

line 186:   an <silent> 10.330 &File.&Close<Tab>:close :if winheight(2) < 0 && tabpagewinnr(2) == 0 <Bar>   confirm enew <Bar> else <Bar>   confirm close <Bar> endif<CR>

line 192:   tln <silent> 10.330 &File.&Close<Tab>:close <C-W>:if winheight(2) < 0 && tabpagewinnr(2) == 0 <Bar>   confirm enew <Bar> else <Bar>   confirm close <Bar> endif<CR>

line 198: endif

line 199: an 10.335 &File.-SEP1-^I^I^I^I<Nop>

line 200: an <silent> 10.340 &File.&Save<Tab>:w^I^I:if expand("%") == ""<Bar>browse confirm w<Bar>else<Bar>confirm w<Bar>endif<CR>

line 201: if !has("gui_macvim")

line 202:   an 10.350 &File.Save\ &As\.\.\.<Tab>:sav^I:browse confirm saveas<CR>

line 203: endif

line 204: 

line 205: if has("diff")

line 206:   an 10.400 &File.-SEP2-^I^I^I<Nop>

line 207:   an 10.410 &File.Split\ &Diff\ With\.\.\.^I:browse vert diffsplit<CR>

line 208:   an 10.420 &File.Split\ Patched\ &By\.\.\.^I:browse vert diffpatch<CR>

line 209: endif

line 210: 

line 211: if has("printer")

line 212:   an 10.500 &File.-SEP3-^I^I^I<Nop>

line 213:   an 10.510 &File.&Print^I^I^I:hardcopy<CR>

line 214:   vunmenu   &File.&Print

line 215:   vnoremenu &File.&Print^I^I^I:hardcopy<CR>

line 216: elseif has("unix")

line 217:   an 10.500 &File.-SEP3-^I^I^I<Nop>

line 218:   an 10.510 &File.&Print^I^I^I:w !lpr<CR>

line 219:   vunmenu   &File.&Print

line 220:   vnoremenu &File.&Print^I^I^I:w !lpr<CR>

line 221: endif

line 222: if !has("gui_macvim")

line 223:   an 10.600 &File.-SEP4-^I^I^I^I<Nop>

line 224:   an 10.610 &File.Sa&ve-Exit<Tab>:wqa^I^I:confirm wqa<CR>

line 225:   an 10.620 &File.E&xit<Tab>:qa^I^I^I:confirm qa<CR>

line 226: endif

line 227: 

line 228: def s:SelectAll()

line 231: 

line 232: " Edit menu

line 233: an 20.310 &Edit.&Undo<Tab>u^I^I^Iu

line 234: an 20.320 &Edit.&Redo<Tab>^R^I^I^I<C-R>

line 235: an 20.330 &Edit.Rep&eat<Tab>\.^I^I^I.

line 236: 

line 237: an 20.335 &Edit.-SEP1-^I^I^I^I<Nop>

line 238: vnoremenu 20.340 &Edit.Cu&t<Tab>"+x^I^I"+x

line 239: vnoremenu 20.350 &Edit.&Copy<Tab>"+y^I^I"+y

line 240: cnoremenu 20.350 &Edit.&Copy<Tab>"+y^I^I<C-Y>

line 241: if exists(':tlmenu')

line 242:   tlnoremenu 20.350 &Edit.&Copy<Tab>"+y ^I<C-W>:<C-Y><CR>

line 243: endif

line 244: nnoremenu 20.360 &Edit.&Paste<Tab>"+gP^I^I"+gP

line 245: cnoremenu^I &Edit.&Paste<Tab>"+gP^I^I<C-R>+

line 246: if exists(':tlmenu')

line 247:   tlnoremenu^I &Edit.&Paste<Tab>"+gP^I^I<C-W>"+

line 248: endif

line 249: exe 'vnoremenu <script> &Edit.&Paste<Tab>"+gP^I' .. paste#paste_cmd['v']

Searching for "autoload/paste.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/paste.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/autoload/paste.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload)
fchdir() to previous dir
line 249: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim"
line 1: " Vim support file to help with paste mappings and menus

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " Define the string to use for items that are present both in Edit, Popup and

line 7: " Toolbar menu.  Also used in mswin.vim and macmap.vim.

line 8: 

line 9: let paste#paste_cmd = {'n': ":call paste#Paste()<CR>"}

line 10: let paste#paste_cmd['v'] = '"-c<Esc>' . paste#paste_cmd['n']

line 11: let paste#paste_cmd['i'] = "\<c-\>\<c-o>\"+gP"

line 12: 

line 13: func! paste#Paste()

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/autoload/paste.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim
line 249: vnoremenu <script> &Edit.&Paste<Tab>"+gP^I"-c<Esc>:call paste#Paste()<CR>

line 250: exe 'inoremenu <script> &Edit.&Paste<Tab>"+gP^I' .. paste#paste_cmd['i']

line 250: inoremenu <script> &Edit.&Paste<Tab>"+gP^I^\^O"+gP

line 251: nnoremenu 20.370 &Edit.Put\ &Before<Tab>[p^I[p

line 252: inoremenu^I &Edit.Put\ &Before<Tab>[p^I<C-O>[p

line 253: nnoremenu 20.380 &Edit.Put\ &After<Tab>]p^I]p

line 254: inoremenu^I &Edit.Put\ &After<Tab>]p^I<C-O>]p

line 255: if has("win32")

line 256:   vnoremenu 20.390 &Edit.&Delete<Tab>x^I^Ix

line 257: endif

line 258: noremenu  <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I:<C-U>call <SID>SelectAll()<CR>

line 259: inoremenu <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I<C-O>:call <SID>SelectAll()<CR>

line 260: cnoremenu <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I<C-U>call <SID>SelectAll()<CR>

line 261: 

line 262: an 20.405^I &Edit.-SEP2-^I^I^I^I<Nop>

line 263: if has("win32") || has("gui_gtk") || has("gui_kde") || has("gui_motif")

line 264:   an 20.410^I &Edit.&Find\.\.\.^I^I^I:promptfind<CR>

line 265:   vunmenu^I &Edit.&Find\.\.\.

line 266:   vnoremenu <silent>^I &Edit.&Find\.\.\.^I^Iy:promptfind <C-R>=<SID>FixFText()<CR><CR>

line 267:   an 20.420^I &Edit.Find\ and\ Rep&lace\.\.\.^I:promptrepl<CR>

line 268:   vunmenu^I &Edit.Find\ and\ Rep&lace\.\.\.

line 269:   vnoremenu <silent>^I &Edit.Find\ and\ Rep&lace\.\.\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>

line 270: elseif has("gui_macvim")

line 271:   an <silent> 20.410.10 &Edit.Find.Find…^I:promptfind<CR>

line 272:   vunmenu &Edit.Find.Find…

line 273:   vnoremenu <silent> &Edit.Find.Find…^Iy:promptfind <C-R>=<SID>FixFText()<CR><CR>

line 274:   an 20.410.20 &Edit.Find.Find\ Next^I^I^I<Nop>

line 275:   an 20.410.30 &Edit.Find.Find\ Previous^I^I<Nop>

line 276:   vnoremenu 20.410.35 &Edit.Find.Use\ Selection\ for\ Find^I<Nop>

line 277: else

line 278:   an 20.410^I &Edit.&Find<Tab>/^I^I^I/

line 279:   an 20.420^I &Edit.Find\ and\ Rep&lace<Tab>:%s^I:%s/

line 280:   vunmenu^I &Edit.Find\ and\ Rep&lace<Tab>:%s

line 281:   vnoremenu^I &Edit.Find\ and\ Rep&lace<Tab>:s^I:s/

line 282: endif

line 283: 

line 284: an 20.425^I &Edit.-SEP3-^I^I^I^I<Nop>

line 285: an 20.430^I &Edit.Settings\ &Window^I^I:options<CR>

line 286: an 20.435^I &Edit.Startup\ &Settings^I^I:call <SID>EditVimrc()<CR>

line 287: 

line 288: def s:EditVimrc()

line 310: 

line 311: def s:FixFText(): string

line 315: 

line 316: " Edit/Global Settings

line 317: an 20.440.100 &Edit.&Global\ Settings.Toggle\ Pattern\ &Highlight<Tab>:set\ hls!^I:set hls! hls?<CR>

line 318: an 20.440.110 &Edit.&Global\ Settings.Toggle\ &Ignoring\ Case<Tab>:set\ ic!^I:set ic! ic?<CR>

line 319: an 20.440.110 &Edit.&Global\ Settings.Toggle\ &Showing\ Matched\ Pairs<Tab>:set\ sm!^I:set sm! sm?<CR>

line 320: 

line 321: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 1\  :set so=1<CR>

line 322: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 2\  :set so=2<CR>

line 323: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 3\  :set so=3<CR>

line 324: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 4\  :set so=4<CR>

line 325: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 5\  :set so=5<CR>

line 326: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 7\  :set so=7<CR>

line 327: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 10\  :set so=10<CR>

line 328: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 100\  :set so=100<CR>

line 329: 

line 330: an 20.440.130.40 &Edit.&Global\ Settings.&Virtual\ Edit.Never :set ve=<CR>

line 331: an 20.440.130.50 &Edit.&Global\ Settings.&Virtual\ Edit.Block\ Selection :set ve=block<CR>

line 332: an 20.440.130.60 &Edit.&Global\ Settings.&Virtual\ Edit.Insert\ Mode :set ve=insert<CR>

line 333: an 20.440.130.70 &Edit.&Global\ Settings.&Virtual\ Edit.Block\ and\ Insert :set ve=block,insert<CR>

line 334: an 20.440.130.80 &Edit.&Global\ Settings.&Virtual\ Edit.Always :set ve=all<CR>

line 335: an 20.440.140 &Edit.&Global\ Settings.Toggle\ Insert\ &Mode<Tab>:set\ im!^I:set im!<CR>

line 336: an 20.440.145 &Edit.&Global\ Settings.Toggle\ Vi\ C&ompatibility<Tab>:set\ cp!^I:set cp!<CR>

line 337: an <silent> 20.440.150 &Edit.&Global\ Settings.Search\ &Path\.\.\.  :call <SID>SearchP()<CR>

line 338: an <silent> 20.440.160 &Edit.&Global\ Settings.Ta&g\ Files\.\.\.  :call <SID>TagFiles()<CR>

line 339: "

line 340: " GUI options

line 341: an 20.440.300 &Edit.&Global\ Settings.-SEP1-^I^I^I^I<Nop>

line 342: an <silent> 20.440.310 &Edit.&Global\ Settings.Toggle\ &Toolbar^I^I:call <SID>ToggleGuiOption("T")<CR>

line 343: an <silent> 20.440.320 &Edit.&Global\ Settings.Toggle\ &Bottom\ Scrollbar :call <SID>ToggleGuiOption("b")<CR>

line 344: an <silent> 20.440.330 &Edit.&Global\ Settings.Toggle\ &Left\ Scrollbar^I:call <SID>ToggleGuiOption("l")<CR>

line 345: an <silent> 20.440.340 &Edit.&Global\ Settings.Toggle\ &Right\ Scrollbar :call <SID>ToggleGuiOption("r")<CR>

line 346: 

line 347: def s:SearchP()

line 356: 

line 357: def s:TagFiles()

line 366: 

line 367: def s:ToggleGuiOption(option: string)

line 375: 

line 376: " Edit/File Settings

line 377: 

line 378: " Boolean options

line 379: an 20.440.100 &Edit.F&ile\ Settings.Toggle\ Line\ &Numbering<Tab>:set\ nu!^I:set nu! nu?<CR>

line 380: an 20.440.105 &Edit.F&ile\ Settings.Toggle\ Relati&ve\ Line\ Numbering<Tab>:set\ rnu!^I:set rnu! rnu?<CR>

line 381: an 20.440.110 &Edit.F&ile\ Settings.Toggle\ &List\ Mode<Tab>:set\ list!^I:set list! list?<CR>

line 382: an 20.440.120 &Edit.F&ile\ Settings.Toggle\ Line\ &Wrapping<Tab>:set\ wrap!^I:set wrap! wrap?<CR>

line 383: an 20.440.130 &Edit.F&ile\ Settings.Toggle\ W&rapping\ at\ Word<Tab>:set\ lbr!^I:set lbr! lbr?<CR>

line 384: an 20.440.160 &Edit.F&ile\ Settings.Toggle\ Tab\ &Expanding<Tab>:set\ et!^I:set et! et?<CR>

line 385: an 20.440.170 &Edit.F&ile\ Settings.Toggle\ &Auto\ Indenting<Tab>:set\ ai!^I:set ai! ai?<CR>

line 386: an 20.440.180 &Edit.F&ile\ Settings.Toggle\ &C-Style\ Indenting<Tab>:set\ cin!^I:set cin! cin?<CR>

line 387: 

line 388: " other options

line 389: an 20.440.600 &Edit.F&ile\ Settings.-SEP2-^I^I<Nop>

line 390: an 20.440.610.20 &Edit.F&ile\ Settings.&Shiftwidth.2^I:set sw=2 sw?<CR>

line 391: an 20.440.610.30 &Edit.F&ile\ Settings.&Shiftwidth.3^I:set sw=3 sw?<CR>

line 392: an 20.440.610.40 &Edit.F&ile\ Settings.&Shiftwidth.4^I:set sw=4 sw?<CR>

line 393: an 20.440.610.50 &Edit.F&ile\ Settings.&Shiftwidth.5^I:set sw=5 sw?<CR>

line 394: an 20.440.610.60 &Edit.F&ile\ Settings.&Shiftwidth.6^I:set sw=6 sw?<CR>

line 395: an 20.440.610.80 &Edit.F&ile\ Settings.&Shiftwidth.8^I:set sw=8 sw?<CR>

line 396: 

line 397: an 20.440.620.20 &Edit.F&ile\ Settings.Soft\ &Tabstop.2^I:set sts=2 sts?<CR>

line 398: an 20.440.620.30 &Edit.F&ile\ Settings.Soft\ &Tabstop.3^I:set sts=3 sts?<CR>

line 399: an 20.440.620.40 &Edit.F&ile\ Settings.Soft\ &Tabstop.4^I:set sts=4 sts?<CR>

line 400: an 20.440.620.50 &Edit.F&ile\ Settings.Soft\ &Tabstop.5^I:set sts=5 sts?<CR>

line 401: an 20.440.620.60 &Edit.F&ile\ Settings.Soft\ &Tabstop.6^I:set sts=6 sts?<CR>

line 402: an 20.440.620.80 &Edit.F&ile\ Settings.Soft\ &Tabstop.8^I:set sts=8 sts?<CR>

line 403: 

line 404: an <silent> 20.440.630 &Edit.F&ile\ Settings.Te&xt\ Width\.\.\.  :call <SID>TextWidth()<CR>

line 405: an <silent> 20.440.640 &Edit.F&ile\ Settings.&File\ Format\.\.\.  :call <SID>FileFormat()<CR>

line 406: 

line 407: def s:TextWidth()

line 419: 

line 420: def s:FileFormat()

line 444: 

line 445: let s:did_setup_color_schemes = 0

line 446: 

line 447: " Setup the Edit.Color Scheme submenu

line 448: def s:SetupColorSchemes()

line 469: 

line 470: if exists("do_no_lazyload_menus")

line 471:   call s:SetupColorSchemes()

line 472: else

line 473:   an <silent> 20.450 &Edit.Show\ C&olor\ Schemes\ in\ Menu :call <SID>SetupColorSchemes()<CR>

line 474: endif

line 475: 

line 476: 

line 477: " Setup the Edit.Keymap submenu

line 478: if has("keymap")

line 479:   let s:did_setup_keymaps = 0

line 480: 

line 481:   def s:SetupKeymaps()

line 500: 

line 501:   if exists("do_no_lazyload_menus")

line 502:     call s:SetupKeymaps()

line 503:   else

line 504:     an <silent> 20.460 &Edit.Show\ &Keymaps\ in\ Menu :call <SID>SetupKeymaps()<CR>

line 505:   endif

line 506: endif

line 507: 

line 508: if has("win32") || has("gui_motif") || has("gui_gtk") || has("gui_kde") || has("gui_photon") || has("gui_mac")

line 509:   an 20.470 &Edit.Select\ Fo&nt\.\.\.^I:set guifont=*<CR>

line 510: elseif has("gui_macvim")

line 511:   an 20.470 &Edit.-SEP4-                       <Nop>

line 512:   an 20.475.10 &Edit.Font.Show\ Fonts          <Nop>

line 513:   an 20.475.20 &Edit.Font.-SEP5-               <Nop>

line 514:   an 20.475.30 &Edit.Font.Bigger               <Nop>

line 515:   an 20.475.40 &Edit.Font.Smaller              <Nop>

line 516: endif

line 517: 

line 518: " Programming menu

line 519: if !exists("g:ctags_command")

line 520:   if has("vms")

line 521:     let g:ctags_command = "mc vim:ctags *.*"

line 522:   else

line 523:     let g:ctags_command = "ctags -R ."

line 524:   endif

line 525: endif

line 526: 

line 527: an 40.300 &Tools.&Jump\ to\ This\ Tag<Tab>g^]^Ig<C-]>

line 528: vunmenu &Tools.&Jump\ to\ This\ Tag<Tab>g^]

line 529: vnoremenu &Tools.&Jump\ to\ This\ Tag<Tab>g^]^Ig<C-]>

line 530: an 40.310 &Tools.Jump\ &Back<Tab>^T^I^I<C-T>

line 531: an 40.320 &Tools.Build\ &Tags\ File^I^I:exe "!" .. g:ctags_command<CR>

line 532: 

line 533: if has("folding") || has("spell")

line 534:   an 40.330 &Tools.-SEP1-^I^I^I^I^I^I<Nop>

line 535: endif

line 536: 

line 537: " Tools.Spelling Menu

line 538: if has("spell")

line 539:   an 40.335.110 &Tools.&Spelling.&Spell\ Check\ On^I^I:set spell<CR>

line 540:   an 40.335.120 &Tools.&Spelling.Spell\ Check\ &Off^I^I:set nospell<CR>

line 541:   an 40.335.130 &Tools.&Spelling.To\ &Next\ Error<Tab>]s^I]s

line 542:   an 40.335.130 &Tools.&Spelling.To\ &Previous\ Error<Tab>[s^I[s

line 543:   an 40.335.140 &Tools.&Spelling.Suggest\ &Corrections<Tab>z=^Iz=

line 544:   an 40.335.150 &Tools.&Spelling.&Repeat\ Correction<Tab>:spellrepall^I:spellrepall<CR>

line 545:   an 40.335.200 &Tools.&Spelling.-SEP1-^I^I^I^I<Nop>

line 546:   an 40.335.210 &Tools.&Spelling.Set\ Language\ to\ "en"^I:set spl=en spell<CR>

line 547:   an 40.335.220 &Tools.&Spelling.Set\ Language\ to\ "en_au"^I:set spl=en_au spell<CR>

line 548:   an 40.335.230 &Tools.&Spelling.Set\ Language\ to\ "en_ca"^I:set spl=en_ca spell<CR>

line 549:   an 40.335.240 &Tools.&Spelling.Set\ Language\ to\ "en_gb"^I:set spl=en_gb spell<CR>

line 550:   an 40.335.250 &Tools.&Spelling.Set\ Language\ to\ "en_nz"^I:set spl=en_nz spell<CR>

line 551:   an 40.335.260 &Tools.&Spelling.Set\ Language\ to\ "en_us"^I:set spl=en_us spell<CR>

line 552:   an <silent> 40.335.270 &Tools.&Spelling.&Find\ More\ Languages^I:call <SID>SpellLang()<CR>

line 553: 

line 554:   let s:undo_spelllang = ['aun &Tools.&Spelling.&Find\ More\ Languages']

line 555:   def s:SpellLang(encChanged = false)

line 598: endif

line 599: 

line 600: " Tools.Fold Menu

line 601: if has("folding")

line 602:   " open close folds

line 603:   an 40.340.110 &Tools.&Folding.&Enable/Disable\ Folds<Tab>zi^I^Izi

line 604:   an 40.340.120 &Tools.&Folding.&View\ Cursor\ Line<Tab>zv^I^Izv

line 605:   an 40.340.120 &Tools.&Folding.Vie&w\ Cursor\ Line\ Only<Tab>zMzx^IzMzx

line 606:   inoremenu 40.340.120 &Tools.&Folding.Vie&w\ Cursor\ Line\ Only<Tab>zMzx  <C-O>zM<C-O>zx

line 607:   an 40.340.130 &Tools.&Folding.C&lose\ More\ Folds<Tab>zm^I^Izm

line 608:   an 40.340.140 &Tools.&Folding.&Close\ All\ Folds<Tab>zM^I^IzM

line 609:   an 40.340.150 &Tools.&Folding.O&pen\ More\ Folds<Tab>zr^I^Izr

line 610:   an 40.340.160 &Tools.&Folding.&Open\ All\ Folds<Tab>zR^I^IzR

line 611:   " fold method

line 612:   an 40.340.200 &Tools.&Folding.-SEP1-^I^I^I<Nop>

line 613:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.M&anual^I:set fdm=manual<CR>

line 614:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.I&ndent^I:set fdm=indent<CR>

line 615:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.E&xpression :set fdm=expr<CR>

line 616:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.S&yntax^I:set fdm=syntax<CR>

line 617:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.&Diff^I:set fdm=diff<CR>

line 618:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.Ma&rker^I:set fdm=marker<CR>

line 619:   " create and delete folds

line 620:   vnoremenu 40.340.220 &Tools.&Folding.Create\ &Fold<Tab>zf^Izf

line 621:   an 40.340.230 &Tools.&Folding.&Delete\ Fold<Tab>zd^I^Izd

line 622:   an 40.340.240 &Tools.&Folding.Delete\ &All\ Folds<Tab>zD^IzD

line 623:   " moving around in folds

line 624:   an 40.340.300 &Tools.&Folding.-SEP2-^I^I^I^I<Nop>

line 625:   an 40.340.310.10 &Tools.&Folding.Fold\ Col&umn\ Width.\ &0\ ^I:set fdc=0<CR>

line 626:   an 40.340.310.20 &Tools.&Folding.Fold\ Col&umn\ Width.\ &2\ ^I:set fdc=2<CR>

line 627:   an 40.340.310.30 &Tools.&Folding.Fold\ Col&umn\ Width.\ &3\ ^I:set fdc=3<CR>

line 628:   an 40.340.310.40 &Tools.&Folding.Fold\ Col&umn\ Width.\ &4\ ^I:set fdc=4<CR>

line 629:   an 40.340.310.50 &Tools.&Folding.Fold\ Col&umn\ Width.\ &5\ ^I:set fdc=5<CR>

line 630:   an 40.340.310.60 &Tools.&Folding.Fold\ Col&umn\ Width.\ &6\ ^I:set fdc=6<CR>

line 631:   an 40.340.310.70 &Tools.&Folding.Fold\ Col&umn\ Width.\ &7\ ^I:set fdc=7<CR>

line 632:   an 40.340.310.80 &Tools.&Folding.Fold\ Col&umn\ Width.\ &8\ ^I:set fdc=8<CR>

line 633: endif  " has folding

line 634: 

line 635: if has("diff")

line 636:   an 40.350.100 &Tools.&Diff.&Update^I^I:diffupdate<CR>

line 637:   an 40.350.110 &Tools.&Diff.&Get\ Block^I:diffget<CR>

line 638:   vunmenu &Tools.&Diff.&Get\ Block

line 639:   vnoremenu &Tools.&Diff.&Get\ Block^I^I:diffget<CR>

line 640:   an 40.350.120 &Tools.&Diff.&Put\ Block^I:diffput<CR>

line 641:   vunmenu &Tools.&Diff.&Put\ Block

line 642:   vnoremenu &Tools.&Diff.&Put\ Block^I^I:diffput<CR>

line 643: endif

line 644: 

line 645: an 40.358 &Tools.-SEP2-^I^I^I^I^I<Nop>

line 646: an 40.360 &Tools.&Make<Tab>:make^I^I^I:make<CR>

line 647: an 40.370 &Tools.&List\ Errors<Tab>:cl^I^I^I:cl<CR>

line 648: an 40.380 &Tools.L&ist\ Messages<Tab>:cl!^I^I:cl!<CR>

line 649: an 40.390 &Tools.&Next\ Error<Tab>:cn^I^I^I:cn<CR>

line 650: an 40.400 &Tools.&Previous\ Error<Tab>:cp^I^I:cp<CR>

line 651: an 40.410 &Tools.&Older\ List<Tab>:cold^I^I^I:colder<CR>

line 652: an 40.420 &Tools.N&ewer\ List<Tab>:cnew^I^I^I:cnewer<CR>

line 653: an 40.430.50 &Tools.Error\ &Window.&Update<Tab>:cwin^I:cwin<CR>

line 654: an 40.430.60 &Tools.Error\ &Window.&Open<Tab>:copen^I:copen<CR>

line 655: an 40.430.70 &Tools.Error\ &Window.&Close<Tab>:cclose^I:cclose<CR>

line 656: 

line 657: an 40.520 &Tools.-SEP3-^I^I^I^I^I<Nop>

line 658: an <silent> 40.530 &Tools.&Convert\ to\ HEX<Tab>:%!xxd :call <SID>XxdConv()<CR>

line 660: an <silent> 40.540 &Tools.Conve&rt\ Back<Tab>:%!xxd\ -r :call <SID>XxdBack()<CR>

line 662: 

line 663: " Use a function to do the conversion, so that it also works with 'insertmode'

line 664: " set.

line 665: def s:XxdConv()

line 678: 

line 679: def s:XxdBack()

line 693: 

line 694: def s:XxdFind()

line 707: 

line 708: let s:did_setup_compilers = 0

line 709: 

line 710: " Setup the Tools.Compiler submenu

line 711: def s:SetupCompilers()

line 727: 

line 728: if exists("do_no_lazyload_menus")

line 729:   call s:SetupCompilers()

line 730: else

line 731:   an <silent> 30.440 &Tools.Show\ Compiler\ Se&ttings\ in\ Menu :call <SID>SetupCompilers()<CR>

line 732: endif

line 733: 

line 734: " Load ColorScheme, Compiler Setting and Keymap menus when idle.

line 735: if !exists("do_no_lazyload_menus")

line 736:   def s:SetupLazyloadMenus()

line 743:   augroup SetupLazyloadMenus

line 744:     au!

line 745:     au CursorHold,CursorHoldI * call <SID>SetupLazyloadMenus() | au! SetupLazyloadMenus

line 746:   augroup END

line 747: endif

line 748: 

line 749: 

line 750: if !exists("no_buffers_menu")

line 751: 

line 752: " Buffer list menu -- Setup functions & actions

line 753: 

line 754: " wait with building the menu until after loading 'session' files. Makes

line 755: " startup faster.

line 756: let s:bmenu_wait = 1

line 757: 

line 758: " Dictionary of buffer number to name. This helps prevent problems where a

line 759: " buffer as renamed and we didn't keep track of that.

line 760: let s:bmenu_items = {}

line 761: 

line 762: if !exists("bmenu_priority")

line 763:   let bmenu_priority = 60

line 764: endif

line 765: 

line 766: " invoked from a BufCreate or BufFilePost autocommand

line 767: def s:BMAdd()

line 782: 

line 783: " invoked from a BufDelete or BufFilePre autocommand

line 784: def s:BMRemove()

line 795: 

line 796: " Return non-zero if buffer with number "name" / "num" is useful to add in the

line 797: " buffer menu.

line 798: def s:BMCanAdd(name: string, num: number): bool

line 818: 

line 819: " Create the buffer menu (delete an existing one first).

line 820: def s:BMShow()

line 875: 

line 876: def s:BMHash(name: string): number

line 891: 

line 892: def s:BMHash2(name: string): string

line 910: 

line 911: " Insert a buffer name into the buffer menu.

line 912: def s:BMFilename(name: string, num: number)

line 926: 

line 927: " Truncate a long path to fit it in a menu item.

line 928: if !exists("g:bmenu_max_pathlen")

line 929:   let g:bmenu_max_pathlen = 35

line 930: endif

line 931: 

line 932: def s:BMTruncName(fname: string): string

line 951: 

line 952: def s:BMMunge(fname: string, bnum: number): string

line 973: 

line 974: " When just starting Vim, load the buffer menu later.  Don't do this for MacVim

line 975: " because it makes the menu flicker each time a new editor window is opened.

line 976: if has("vim_starting") && !has("gui_macvim")

line 977:   augroup LoadBufferMenu

line 978:     au! VimEnter * if !exists("no_buffers_menu") | call <SID>BMShow() | endif

line 979:     au  VimEnter * au! LoadBufferMenu

line 980:   augroup END

line 981: else

line 982:   call <SID>BMShow()

line 9:     unmenu &Buffers 

Exception thrown: Vim(unmenu):E329: No menu "&Buffers"

Exception caught: Vim(unmenu):E329: No menu "&Buffers"

Exception discarded: Vim(unmenu):E329: No menu "&Buffers"

line 12: noremenu 60.1 &Buffers.Dummy l

line 14:     unmenu! &Buffers 

Exception thrown: Vim(unmenu):E328: Menu only exists in another mode

Exception caught: Vim(unmenu):E328: Menu only exists in another mode

Exception discarded: Vim(unmenu):E328: Menu only exists in another mode

line 19: an <silent> 60.2 &Buffers.&Refresh\ menu :call <SID>BMShow()<CR>

line 20: an 60.4 &Buffers.&Delete :confirm bd<CR>

line 21: an 60.6 &Buffers.&Alternate :confirm b #<CR>

line 22: an 60.7 &Buffers.&Next :confirm bnext<CR>

line 23: an 60.8 &Buffers.&Previous :confirm bprev<CR>

line 24: an 60.9 &Buffers.-SEP- :

line 25:   unmenu &Buffers.Dummy

line 12: an 60.501157422 &Buffers.[No\ Name]\ (1)\^I\. :confirm b1<CR>

line 49:   aug buffer_list

line 50:     au!

line 51:     au BufCreate,BufFilePost * call s:BMAdd()

line 52:     au BufDelete,BufFilePre * call s:BMRemove()

line 53:   aug END

line 983: endif

line 984: 

line 985: endif " !exists("no_buffers_menu")

line 986: 

line 987: " Window menu

line 988: if !has("gui_macvim")

line 989: an 70.300 &Window.&New<Tab>^Wn^I^I^I<C-W>n

line 990: an 70.310 &Window.S&plit<Tab>^Ws^I^I<C-W>s

line 991: an 70.320 &Window.Sp&lit\ To\ #<Tab>^W^^^I<C-W><C-^>

line 992: an 70.330 &Window.Split\ &Vertically<Tab>^Wv^I<C-W>v

line 993: an <silent> 70.332 &Window.Split\ File\ E&xplorer^I:call MenuExplOpen()<CR>

line 994: if !exists("*MenuExplOpen")

line 995:   def MenuExplOpen()

line 1002: endif

line 1003: an 70.335 &Window.-SEP1-^I^I^I^I<Nop>

line 1004: an 70.340 &Window.&Close<Tab>^Wc^I^I^I:confirm close<CR>

line 1005: an 70.345 &Window.Close\ &Other(s)<Tab>^Wo^I^I:confirm only<CR>

line 1006: an 70.350 &Window.-SEP2-^I^I^I^I<Nop>

line 1007: an 70.355 &Window.Move\ &To.&Top<Tab>^WK^I^I<C-W>K

line 1008: an 70.355 &Window.Move\ &To.&Bottom<Tab>^WJ^I^I<C-W>J

line 1009: an 70.355 &Window.Move\ &To.&Left\ Side<Tab>^WH^I^I<C-W>H

line 1010: an 70.355 &Window.Move\ &To.&Right\ Side<Tab>^WL^I<C-W>L

line 1011: an 70.360 &Window.Rotate\ &Up<Tab>^WR^I^I^I<C-W>R

line 1012: an 70.362 &Window.Rotate\ &Down<Tab>^Wr^I^I^I<C-W>r

line 1013: an 70.365 &Window.-SEP3-^I^I^I^I<Nop>

line 1014: an 70.370 &Window.&Equal\ Size<Tab>^W=^I^I^I<C-W>=

line 1015: an 70.380 &Window.&Max\ Height<Tab>^W_^I^I^I<C-W>_

line 1016: an 70.390 &Window.M&in\ Height<Tab>^W1_^I^I^I<C-W>1_

line 1017: an 70.400 &Window.Max\ &Width<Tab>^W\|^I^I^I<C-W>\|

line 1018: an 70.410 &Window.Min\ Widt&h<Tab>^W1\|^I^I^I<C-W>1\|

line 1019: endif " !has("gui_macvim")

line 1020: 

line 1021: " The popup menu

line 1022: if has("gui_macvim")

line 1023:   vnoremenu 1.05 PopUp.Look\ Up     :<C-U>call macvim#ShowDefinitionSelected()<CR>

line 1024:   vnoremenu 1.06 PopUp.-SEPLookUp-      <Nop>

line 1025: endif

line 1026: 

line 1027: an 1.10 PopUp.&Undo^I^I^Iu

line 1028: an 1.15 PopUp.-SEP1-^I^I^I<Nop>

line 1029: vnoremenu 1.20 PopUp.Cu&t^I^I"+x

line 1030: vnoremenu 1.30 PopUp.&Copy^I^I"+y

line 1031: cnoremenu 1.30 PopUp.&Copy^I^I<C-Y>

line 1032: nnoremenu 1.40 PopUp.&Paste^I^I"+gP

line 1033: cnoremenu 1.40 PopUp.&Paste^I^I<C-R>+

line 1034: exe 'vnoremenu <script> 1.40 PopUp.&Paste^I' .. paste#paste_cmd['v']

line 1034: vnoremenu <script> 1.40 PopUp.&Paste^I"-c<Esc>:call paste#Paste()<CR>

line 1035: exe 'inoremenu <script> 1.40 PopUp.&Paste^I' .. paste#paste_cmd['i']

line 1035: inoremenu <script> 1.40 PopUp.&Paste^I^\^O"+gP

line 1036: vnoremenu 1.50 PopUp.&Delete^I^Ix

line 1037: an 1.55 PopUp.-SEP2-^I^I^I<Nop>

line 1038: vnoremenu 1.60 PopUp.Select\ Blockwise^I<C-V>

line 1039: 

line 1040: nnoremenu 1.70 PopUp.Select\ &Word^Ivaw

line 1041: onoremenu 1.70 PopUp.Select\ &Word^Iaw

line 1042: vnoremenu 1.70 PopUp.Select\ &Word^I<C-C>vaw

line 1043: inoremenu 1.70 PopUp.Select\ &Word^I<C-O>vaw

line 1044: cnoremenu 1.70 PopUp.Select\ &Word^I<C-C>vaw

line 1045: 

line 1046: nnoremenu 1.73 PopUp.Select\ &Sentence^Ivas

line 1047: onoremenu 1.73 PopUp.Select\ &Sentence^Ias

line 1048: vnoremenu 1.73 PopUp.Select\ &Sentence^I<C-C>vas

line 1049: inoremenu 1.73 PopUp.Select\ &Sentence^I<C-O>vas

line 1050: cnoremenu 1.73 PopUp.Select\ &Sentence^I<C-C>vas

line 1051: 

line 1052: nnoremenu 1.77 PopUp.Select\ Pa&ragraph^Ivap

line 1053: onoremenu 1.77 PopUp.Select\ Pa&ragraph^Iap

line 1054: vnoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-C>vap

line 1055: inoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-O>vap

line 1056: cnoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-C>vap

line 1057: 

line 1058: nnoremenu 1.80 PopUp.Select\ &Line^IV

line 1059: onoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1060: vnoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1061: inoremenu 1.80 PopUp.Select\ &Line^I<C-O>V

line 1062: cnoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1063: 

line 1064: nnoremenu 1.90 PopUp.Select\ &Block^I<C-V>

line 1065: onoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1066: vnoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1067: inoremenu 1.90 PopUp.Select\ &Block^I<C-O><C-V>

line 1068: cnoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1069: 

line 1070: noremenu  <script> <silent> 1.100 PopUp.Select\ &All^I:<C-U>call <SID>SelectAll()<CR>

line 1071: inoremenu <script> <silent> 1.100 PopUp.Select\ &All^I<C-O>:call <SID>SelectAll()<CR>

line 1072: cnoremenu <script> <silent> 1.100 PopUp.Select\ &All^I<C-U>call <SID>SelectAll()<CR>

line 1073: 

line 1074: if has("spell")

line 1075:   " Spell suggestions in the popup menu.  Note that this will slow down the

line 1076:   " appearance of the menu!

line 1077:   def s:SpellPopup()

line 1130: 

line 1131:   def s:SpellReplace(n: number)

line 1138: 

line 1139:   def s:SpellDel()

line 1146: 

line 1147:   augroup SpellPopupMenu

line 1148:     au! MenuPopup * call <SID>SpellPopup()

line 1149:   augroup END

line 1150: endif

line 1151: 

line 1152: " The GUI toolbar (for MS-Windows and GTK)

line 1153: if has("toolbar")

line 1154:   an 1.10 ToolBar.Open^I^I^I:browse confirm e<CR>

line 1155:   an <silent> 1.20 ToolBar.Save^I^I:if expand("%") == ""<Bar>browse confirm w<Bar>else<Bar>confirm w<Bar>endif<CR>

line 1156:   an 1.30 ToolBar.SaveAll^I^I:browse confirm wa<CR>

line 1157: 

line 1158:   if has("printer")

line 1159:     an 1.40   ToolBar.Print^I^I:hardcopy<CR>

line 1160:     vunmenu   ToolBar.Print

line 1161:     vnoremenu ToolBar.Print^I^I:hardcopy<CR>

line 1162:   elseif has("unix")

line 1163:     an 1.40   ToolBar.Print^I^I:w !lpr<CR>

line 1164:     vunmenu   ToolBar.Print

line 1165:     vnoremenu ToolBar.Print^I^I:w !lpr<CR>

line 1166:   endif

line 1167: 

line 1168:   an 1.45 ToolBar.-sep1-^I^I<Nop>

line 1169:   an 1.50 ToolBar.Undo^I^I^Iu

line 1170:   an 1.60 ToolBar.Redo^I^I^I<C-R>

line 1171: 

line 1172:   an 1.65 ToolBar.-sep2-^I^I<Nop>

line 1173:   vnoremenu 1.70 ToolBar.Cut^I^I"+x

line 1174:   vnoremenu 1.80 ToolBar.Copy^I^I"+y

line 1175:   cnoremenu 1.80 ToolBar.Copy^I^I<C-Y>

line 1176:   nnoremenu 1.90 ToolBar.Paste^I^I"+gP

line 1177:   cnoremenu^I ToolBar.Paste^I^I<C-R>+

line 1178:   exe 'vnoremenu <script>^I ToolBar.Paste^I' .. paste#paste_cmd['v']

line 1178: vnoremenu <script>^I ToolBar.Paste^I"-c<Esc>:call paste#Paste()<CR>

line 1179:   exe 'inoremenu <script>^I ToolBar.Paste^I' .. paste#paste_cmd['i']

line 1179: inoremenu <script>^I ToolBar.Paste^I^\^O"+gP

line 1180: 

line 1181:   if !has("gui_athena") && !has("gui_macvim")

line 1182:     an 1.95   ToolBar.-sep3-^I^I<Nop>

line 1183:     an 1.100  ToolBar.Replace^I^I:promptrepl<CR>

line 1184:     vunmenu   ToolBar.Replace

line 1185:     vnoremenu ToolBar.Replace^I^Iy:promptrepl <C-R>=<SID>FixFText()<CR><CR>

line 1186:     an 1.110  ToolBar.FindNext^I^In

line 1187:     an 1.120  ToolBar.FindPrev^I^IN

line 1188:   endif

line 1189: 

line 1190:   if !has("gui_macvim")

line 1191:     an 1.215 ToolBar.-sep5-^I^I<Nop>

line 1192:   endif

line 1193:   an <silent> 1.220 ToolBar.LoadSesn^I:call <SID>LoadVimSesn()<CR>

line 1194:   an <silent> 1.230 ToolBar.SaveSesn^I:call <SID>SaveVimSesn()<CR>

line 1195:   an 1.240 ToolBar.RunScript^I^I:browse so<CR>

line 1196: 

line 1197:   if !has("gui_macvim")

line 1198:     an 1.245 ToolBar.-sep6-^I^I<Nop>

line 1199:   endif

line 1200:   an 1.250 ToolBar.Make^I^I^I:make<CR>

line 1201:   if !has("gui_macvim")

line 1202:     an 1.270 ToolBar.RunCtags^I^I:exe "!" .. g:ctags_command<CR>

line 1203:     an 1.280 ToolBar.TagJump^I^Ig<C-]>

line 1204:   endif

line 1205: 

line 1206:   an 1.295 ToolBar.-sep7-^I^I<Nop>

line 1207:   an 1.300 ToolBar.Help^I^I^I:help<CR>

line 1208:   if !has("gui_macvim")

line 1209:     an <silent> 1.310 ToolBar.FindHelp^I:call <SID>Helpfind()<CR>

line 1210:   endif

line 1211: 

line 1212: " Only set the tooltips here if not done in a language menu file

line 1213: if exists("*Do_toolbar_tmenu")

line 1214:   call Do_toolbar_tmenu()

line 1215: else

line 1216:   let did_toolbar_tmenu = 1

line 1217:   tmenu ToolBar.Open^I^IOpen file

line 1218:   tmenu ToolBar.Save^I^ISave current file

line 1219:   tmenu ToolBar.SaveAll^I^ISave all files

line 1220:   tmenu ToolBar.Print^I^IPrint

line 1221:   tmenu ToolBar.Undo^I^IUndo

line 1222:   tmenu ToolBar.Redo^I^IRedo

line 1223:   tmenu ToolBar.Cut^I^ICut to clipboard

line 1224:   tmenu ToolBar.Copy^I^ICopy to clipboard

line 1225:   tmenu ToolBar.Paste^I^IPaste from Clipboard

line 1226:   if !has("gui_athena")

line 1227:     tmenu ToolBar.Replace^IFind / Replace...

line 1228:     tmenu ToolBar.FindNext^IFind Next

line 1229:     tmenu ToolBar.FindPrev^IFind Previous

line 1230:   endif

line 1231:   tmenu ToolBar.LoadSesn^IChoose a session to load

line 1232:   tmenu ToolBar.SaveSesn^ISave current session

line 1233:   tmenu ToolBar.RunScript^IChoose a Vim Script to run

line 1234:   tmenu ToolBar.Make^I^IMake current project (:make)

line 1235:   tmenu ToolBar.RunCtags^IBuild tags in current directory tree (!ctags -R .)

line 1236:   tmenu ToolBar.TagJump^I^IJump to tag under cursor

line 1237:   tmenu ToolBar.Help^I^IVim Help

line 1238:   tmenu ToolBar.FindHelp^ISearch Vim Help

line 1239: endif

line 1240: 

line 1241: " Select a session to load; default to current session name if present

line 1242: def s:LoadVimSesn()

line 1251: 

line 1252: " Select a session to save; default to current session name if present

line 1253: def s:SaveVimSesn()

line 1259: 

line 1260: endif

line 1261: 

line 1262: 

line 1263: if has("gui_macvim")

line 1264:   "

line 1265:   " Set up menu key equivalents (these should always have the 'D' modifier

line 1266:   " set), action bindings, and alternate items.

line 1267:   "

line 1268:   " Note: menu items which should execute an action are bound to <Nop>; the

line 1269:   " action message is specified here via the :macmenu command.

line 1270:   "

line 1271:   macm File.New\ Window^I^I^I^Ikey=<D-n> action=newWindow:

line 1272:   macm File.New\ Clean\ Window^I^I        key=<D-N> action=newWindowClean:

line 1273:   macm File.New\ Clean\ Window\ (No\ Defaults)  key=<D-M-N> action=newWindowCleanNoDefaults: alt=YES

line 1274:   macm File.New\ Tab^I^I^I^Ikey=<D-t>

line 1275:   macm File.Open…^I^I^I^Ikey=<D-o> action=fileOpen:

line 1276:   macm File.Open\ Tab\.\.\.<Tab>:tabnew^I^Ikey=<D-T>

line 1277:   macm File.Open\ Recent^I^I^Iaction=recentFilesDummy:

line 1278:   macm File.Close\ Window<Tab>:qa^I^Ikey=<D-W>

line 1279:   macm File.Close^I^I^I^Ikey=<D-w> action=performClose:

line 1280:   macm File.Save<Tab>:w^I^I^I^Ikey=<D-s>

line 1281:   macm File.Save\ All^I^I^I^Ikey=<D-M-s> alt=YES

line 1282:   macm File.Save\ As…<Tab>:sav^I^Ikey=<D-S>

line 1283:   macm File.Print^I^I^I^Ikey=<D-p>

line 1284: 

line 1285:   macm Edit.Undo<Tab>u^I^I^I^Ikey=<D-z> action=undo:

line 1286:   macm Edit.Redo<Tab>^R^I^I^I^Ikey=<D-Z> action=redo:

line 1287:   macm Edit.Cut<Tab>"+x^I^I^I^Ikey=<D-x> action=cut:

line 1288:   macm Edit.Copy<Tab>"+y^I^I^Ikey=<D-c> action=copy:

line 1289:   macm Edit.Paste<Tab>"+gP^I^I^Ikey=<D-v> action=paste:

line 1290:   macm Edit.Select\ All<Tab>ggVG^I^Ikey=<D-a> action=selectAll:

line 1291:   macm Edit.Find.Find…^I^I^Ikey=<D-f>

line 1292:   macm Edit.Find.Find\ Next^I^I^Ikey=<D-g> action=findNext:

line 1293:   macm Edit.Find.Find\ Previous^I^I^Ikey=<D-G> action=findPrevious:

line 1294:   macm Edit.Find.Use\ Selection\ for\ Find^Ikey=<D-e> action=useSelectionForFind:

line 1295:   macm Edit.Font.Show\ Fonts^I^I^Iaction=orderFrontFontPanel:

line 1296:   macm Edit.Font.Bigger^I^I^I^Ikey=<D-=> action=fontSizeUp:

line 1297:   macm Edit.Font.Smaller^I^I^Ikey=<D--> action=fontSizeDown:

line 1298: 

line 1299:   macm Tools.Spelling.To\ Next\ Error<Tab>]s^Ikey=<D-;>

line 1300:   macm Tools.Spelling.Suggest\ Corrections<Tab>z=   key=<D-:>

line 1301:   macm Tools.Make<Tab>:make^I^I^Ikey=<D-b>

line 1302:   macm Tools.List\ Errors<Tab>:cl^I^Ikey=<D-l>

line 1303:   macm Tools.Next\ Error<Tab>:cn^I^Ikey=<D-C-Right>

line 1304:   macm Tools.Previous\ Error<Tab>:cp^I^Ikey=<D-C-Left>

line 1305:   macm Tools.Older\ List<Tab>:cold^I^Ikey=<D-C-Up>

line 1306:   macm Tools.Newer\ List<Tab>:cnew^I^Ikey=<D-C-Down>

line 1307: 

line 1308:   macm Window.Minimize^I^Ikey=<D-m>^Iaction=performMiniaturize:

line 1309:   macm Window.Minimize\ All^Ikey=<D-M-m>^Iaction=miniaturizeAll:^Ialt=YES

line 1310:   macm Window.Zoom^I^Ikey=<D-C-z>^Iaction=performZoom:

line 1311:   macm Window.Zoom\ All^I^Ikey=<D-M-C-z>^Iaction=zoomAll:^I^Ialt=YES

line 1312:   macm Window.Toggle\ Full\ Screen\ Mode^Ikey=<D-C-f>

line 1313:   macm Window.Show\ Next\ Tab^I^I^Ikey=<D-}>

line 1314:   macm Window.Show\ Previous\ Tab^I^Ikey=<D-{>

line 1315:   macm Window.Bring\ All\ To\ Front^I^Iaction=arrangeInFront:

line 1316:   macm Window.Stay\ in\ Front ^Iaction=stayInFront:

line 1317:   macm Window.Stay\ in\ Back ^Iaction=stayInBack:

line 1318:   macm Window.Stay\ Level\ Normal action=stayLevelNormal:

line 1319: 

line 1320:   macm Help.MacVim\ Help^I^I^Ikey=<D-?>

line 1321:   macm Help.MacVim\ Website^I^I^Iaction=openWebsite:

line 1322:   macm Help.What's\ New^I^I^I    action=showWhatsNew:

line 1323: endif " if has("gui_macvim")

line 1324: 

line 1325: endif " !exists("did_install_default_menus")

line 1326: 

line 1327: " Define these items always, so that syntax can be switched on when it wasn't.

line 1328: " But skip them when the Syntax menu was disabled by the user.

line 1329: if !exists("did_install_syntax_menu")

line 1330:   an 50.212 &Syntax.&Manual^I^I:syn manual<CR>

line 1331:   an 50.214 &Syntax.A&utomatic^I^I:syn on<CR>

line 1332:   an <silent> 50.216 &Syntax.On/Off\ for\ &This\ File :call <SID>SynOnOff()<CR>

line 1333:   if !exists("*s:SynOnOff")

line 1334:     def s:SynOnOff()

line 1344:   endif

line 1345: endif

line 1346: 

line 1347: 

line 1348: " Install the Syntax menu only when filetype.vim has been loaded or when

line 1349: " manual syntax highlighting is enabled.

line 1350: " Avoid installing the Syntax menu twice.

line 1351: if (exists("did_load_filetypes") || exists("syntax_on")) && !exists("did_install_syntax_menu")

line 1353:   let did_install_syntax_menu = 1

line 1354: 

line 1355: " Skip setting up the individual syntax selection menus unless

line 1356: " do_syntax_sel_menu is defined (it takes quite a bit of time).

line 1357: if exists("do_syntax_sel_menu")

line 1358:   runtime! synmenu.vim

line 1359: else

line 1360:   an <silent> 50.10 &Syntax.&Show\ File\ Types\ in\ Menu^I:let do_syntax_sel_menu = 1<Bar>runtime! synmenu.vim<Bar>aunmenu &Syntax.&Show\ File\ Types\ in\ Menu<CR>

line 1361:   an 50.195 &Syntax.-SEP1-^I^I<Nop>

line 1362: endif

line 1363: 

line 1364: an 50.210 &Syntax.&Off^I^I^I:syn off<CR>

line 1365: an 50.700 &Syntax.-SEP3-^I^I<Nop>

line 1366: an 50.710 &Syntax.Co&lor\ Test^I^I:sp $VIMRUNTIME/syntax/colortest.vim<Bar>so %<CR>

line 1367: an 50.720 &Syntax.&Highlight\ Test^I:runtime syntax/hitest.vim<CR>

line 1368: an 50.730 &Syntax.&Convert\ to\ HTML^I:runtime syntax/2html.vim<CR>

line 1369: 

line 1370: " Uncomment the next line to compile the functions early to find any mistakes

line 1371: " defcompile

line 1372: 

line 1373: endif " !exists("did_install_syntax_menu")

line 1374: 

line 1375: " Restore the previous value of 'cpoptions'.

line 1376: let &cpo = s:cpo_save

line 1377: unlet s:cpo_save

line 1378: 

line 1379: 

line 1380: if has("touchbar")

line 1381:   " Set up default Touch Bar buttons.

line 1382:   " 1. Smart fullscreen icon that toggles between going full screen or not.

line 1383: 

line 1384:   if !exists("g:macvim_default_touchbar_fullscreen") || g:macvim_default_touchbar_fullscreen

line 1385:     an icon=NSTouchBarEnterFullScreenTemplate 1.20 TouchBar.EnterFullScreen :set fullscreen<CR>

line 1386:     tln icon=NSTouchBarEnterFullScreenTemplate 1.20 TouchBar.EnterFullScreen <C-W>:set fullscreen<CR>

line 1387:   endif

line 1388: 

line 1389:   let s:touchbar_fullscreen=0

line 1390:   func! s:SetupFullScreenTouchBar()

line 1409:   aug FullScreenTouchBar

line 1410:     au!

line 1411:     au VimEnter * call <SID>SetupFullScreenTouchBar()

line 1412:     au OptionSet fullscreen call <SID>SetupFullScreenTouchBar()

line 1413:   aug END

line 1414: 

line 1415:   " 2. Character (i.e. emojis) picker. Only in modes where user is actively

line 1416:   " entering text.

line 1417:   if !exists("g:macvim_default_touchbar_characterpicker") || g:macvim_default_touchbar_characterpicker

line 1418:     inoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1419:     cnoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1420:     tlnoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1421:   endif

line 1422: endif

line 1423: 

line 1424: " vim: set sw=2 tabstop=8 :

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/menu.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
line 3198: endif

line 3199: 

line 3200: " Function called for testing all functions defined here.  These are

line 3201: " script-local, thus need to be executed here.

line 3202: " Returns a string with error messages (hopefully empty).

line 3203: func TestFiletypeFuncs(testlist)

line 3214: 

line 3215: " Restore 'cpoptions'

line 3216: let &cpo = s:cpo_save

line 3217: unlet s:cpo_save

line 3218: 

line 3219: " vim: ts=8

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/init/options.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 108: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
line 1: vim9script noclear

line 2: 

line 3: # Vim support file to switch on loading plugins for file types

line 4: #

line 5: # Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 6: # Last change:^I2023 Aug 10

line 7: # Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 8: 

line 9: if exists("g:did_load_ftplugin")

line 10:   finish

line 11: endif

line 12: g:did_load_ftplugin = 1

line 14: augroup filetypeplugin

line 15:   au FileType * call LoadFTPlugin()

line 16: augroup END

line 17: 

line 18: if exists('*LoadFTPlugin')

line 20:   finish

line 21: endif

line 22: 

line 23: def LoadFTPlugin()

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/init/options.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/after/ftplugin.vim"
Searching for "indent.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/indent.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/indent.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/indent.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 108: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types

line 2: "

line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 4: " Last Change:^I2023 Aug 10

line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 6: 

line 7: if exists("did_indent_on")

line 8:   finish

line 9: endif

line 10: let did_indent_on = 1

line 11: 

line 12: augroup filetypeindent

line 13:   au FileType * call s:LoadIndent()

line 14: augroup END

line 15: 

line 16: def s:LoadIndent()

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/indent.vim
continuing in /Users/piotr/.config/vim/init/options.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/indent.vim"
Searching for "/Users/piotr/.config/vim/after/indent.vim"
line 109: 

line 110: " Use rg

line 111: set grepprg=rg\ --vimgrep\ --smart-case\ --follow\ --no-heading

line 112: set grepformat=%f:%l:%c:%m

line 113: 

line 114: " Auto-resize splits when Vim gets resized.

line 115: augroup ResizeSplits

line 116:   autocmd!

line 117:   autocmd VimResized * wincmd =

line 118: augroup END

line 119: 

line 120: " switch to absolute line numbers when tab is not on focus

line 121: augroup NumberToggle

line 122:   autocmd!

line 123:   autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif

line 124:   autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif

line 125: augroup END

line 126: 

line 127: " Highlight current line only on focused window

line 128: augroup CursorLineMode

line 129:   au!

line 130:   autocmd BufEnter,WinEnter,InsertLeave * setl cursorline

line 131:   autocmd BufLeave,WinLeave,InsertEnter * setl nocursorline

line 132: augroup END

line 133: 

line 134: " Check if files changed when not in focus

line 135: " augroup CheckTime

line 136: "   autocmd!

line 137: "   autocmd CursorHold * checktime

line 138: " augroup END

finished sourcing /Users/piotr/.config/vim/init/options.vim
continuing in /Users/piotr/.config/vim/vimrc
line 14: source ~/.config/vim/init/plugins.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/init/plugins.vim"
line 1: vim9script

line 2: scriptencoding utf-8

line 3: 

line 4: packadd! matchit

Searching for "pack/*/start/matchit" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/matchit"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/matchit"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/matchit"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/matchit"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/matchit"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/matchit"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/matchit"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/matchit)
fchdir() to previous dir
chdir(/Applications/MacVim.app/Contents/Resources/vim/vimfiles)
fchdir() to previous dir
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/matchit"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/matchit"
line 5: 

line 6: # Disable quote concealing in JSON files

line 7: g:vim_json_conceal = 0

line 10: g:rooter_patterns = [

line 18: g:rooter_silent_chdir = 1

line 23: g:closetag_filenames = '*.html,*.tsx,*.jsx,*.erb'

line 26: g:closetag_regions = {

line 35: g:gitgutter_grep                    = 'rg'

line 36: g:gitgutter_sign_added              = '▎'

line 37: g:gitgutter_sign_modified           = '▎'

line 38: g:gitgutter_sign_modified_removed   = '▌'

line 39: g:gitgutter_sign_removed            = '▎'

line 40: g:gitgutter_sign_removed_first_line = '▎'

line 43: source ~/.config/vim/init/ale.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 43: sourcing "/Users/piotr/.config/vim/init/ale.vim"
line 1: vim9script

line 2: packadd ale

Searching for "pack/*/start/ale" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/ale"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/ale"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/ale"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/ale"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/ale"
not found in 'packpath': "pack/*/start/ale"
Searching for "pack/*/opt/ale" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/ale"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim"
line 1: " Author: w0rp <devw0rp@gmail.com>

line 2: " Description: Main entry point for the plugin: sets up prefs and autocommands

line 3: "   Preferences can be set in vimrc files and so on to configure ale

line 4: 

line 5: " Sanity Checks

line 6: 

line 7: if exists('g:loaded_ale_dont_use_this_in_other_plugins_please')

line 8:     finish

line 9: endif

line 10: 

line 11: " Set a special flag used only by this plugin for preventing doubly

line 12: " loading the script.

line 13: let g:loaded_ale_dont_use_this_in_other_plugins_please = 1

line 14: 

line 15: " A flag for detecting if the required features are set.

line 16: if has('nvim')

line 17:     " We check for NeoVim 0.2.0+, but we only officially support NeoVim 0.6.0

line 18:     let s:has_features = has('timers') && has('nvim-0.2.0')

line 19: else

line 20:     " Check if Job and Channel functions are available, instead of the

line 21:     " features. This works better on old MacVim versions.

line 22:     let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')

line 23: endif

line 24: 

line 25: if !s:has_features

line 26:     " Only output a warning if editing some special files.

line 27:     if index(['', 'gitcommit'], &filetype) == -1

line 28:         " no-custom-checks

line 29:         echoerr 'ALE requires NeoVim >= 0.6.0 or Vim 8 with +timers +job +channel'

line 30:         " no-custom-checks

line 31:         echoerr 'Please update your editor appropriately.'

line 32:     endif

line 33: 

line 34:     " Stop here, as it won't work.

line 35:     finish

line 36: endif

line 37: 

line 38: " Set this flag so that other plugins can use it, like airline.

line 39: let g:loaded_ale = 1

line 40: 

line 41: " This global variable is used internally by ALE for tracking information for

line 42: " each buffer which linters are being run against.

line 43: let g:ale_buffer_info = {}

line 44: " This global Dictionary tracks data for fixing code. Don't mess with it.

line 45: let g:ale_fix_buffer_data = {}

line 46: 

line 47: " User Configuration

line 48: 

line 49: " This option prevents ALE autocmd commands from being run for particular

line 50: " filetypes which can cause issues.

line 51: let g:ale_filetype_blacklist = [   'dirvish',   'nerdtree',   'qf',   'tags',   'unite',]

line 58: 

line 59: " This Dictionary configures which linters are enabled for which languages.

line 60: let g:ale_linters = get(g:, 'ale_linters', {})

line 61: " This option can be changed to only enable explicitly selected linters.

line 62: let g:ale_linters_explicit = get(g:, 'ale_linters_explicit', 0)

line 63: " Ignoring linters, for disabling some, or ignoring LSP diagnostics.

line 64: let g:ale_linters_ignore = get(g:, 'ale_linters_ignore', {})

line 65: " Disabling all language server functionality.

line 66: let g:ale_disable_lsp = get(g:, 'ale_disable_lsp', 'auto')

line 67: 

line 68: " This Dictionary configures which functions will be used for fixing problems.

line 69: let g:ale_fixers = get(g:, 'ale_fixers', {})

line 70: 

line 71: " This Dictionary allows users to set up filetype aliases for new filetypes.

line 72: let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})

line 73: 

line 74: " This flag can be set with a number of milliseconds for delaying the

line 75: " execution of a linter when text is changed. The timeout will be set and

line 76: " cleared each time text is changed, so repeated edits won't trigger the

line 77: " jobs for linting until enough time has passed after editing is done.

line 78: let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)

line 79: 

line 80: " This flag can be set to 'never' to disable linting when text is changed.

line 81: " This flag can also be set to 'always' or 'insert' to lint when text is

line 82: " changed in both normal and insert mode, or only in insert mode respectively.

line 83: let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'normal')

line 84: 

line 85: " This flag can be set to 1 to enable linting when leaving insert mode.

line 86: let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 1)

line 87: 

line 88: " This flag can be set to 0 to disable linting when the buffer is entered.

line 89: let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)

line 90: 

line 91: " This flag can be set to 1 to enable linting when a buffer is written.

line 92: let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)

line 93: 

line 94: " This flag can be set to 1 to enable linting when the filetype is changed.

line 95: let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)

line 96: 

line 97: " If set to 1, hints and suggestion from LSP servers and tsserver will be shown.

line 98: let g:ale_lsp_suggestions = get(g:, 'ale_lsp_suggestions', 0)

line 99: 

line 100: " This flag can be set to 1 to enable automatically fixing files on save.

line 101: let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0)

line 102: 

line 103: " This flag may be set to 0 to disable ale. After ale is loaded, :ALEToggle

line 104: " should be used instead.

line 105: let g:ale_enabled = get(g:, 'ale_enabled', 1)

line 106: 

line 107: " A Dictionary mapping linter or fixer names to Arrays of two-item Arrays

line 108: " mapping filename paths from one system to another.

line 109: let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})

line 110: 

line 111: " This Dictionary configures the default project roots for various linters.

line 112: let g:ale_root = get(g:, 'ale_root', {})

line 113: 

line 114: " These flags dictates if ale uses the quickfix or the loclist (loclist is the

line 115: " default, quickfix overrides loclist).

line 116: let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)

line 117: let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)

line 118: 

line 119: " This flag can be set to 0 to disable setting signs.

line 120: " This is enabled by default only if the 'signs' feature exists.

line 121: let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))

line 122: 

line 123: " This flag can be set to 0 to disable setting error highlights.

line 124: let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))

line 125: 

line 126: " This List can be configured to exclude particular highlights.

line 127: let g:ale_exclude_highlights = get(g:, 'ale_exclude_highlights', [])

line 128: 

line 129: " This flag can be set to 0 to disable echoing when the cursor moves.

line 130: let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)

line 131: 

line 132: " This flag can be set to 1 to automatically show errors in the preview window.

line 133: let g:ale_cursor_detail = get(g:, 'ale_cursor_detail', 0)

line 134: 

line 135: " This flag can be changed to disable/enable virtual text.

line 136: let g:ale_virtualtext_cursor = get(g:, 'ale_virtualtext_cursor', (has('nvim-0.3.2') || has('patch-9.0.0297') && has('textprop') && has('popupwin')) ? 'all' : 'disabled')

line 137: 

line 138: " This flag can be set to 1 to enable LSP hover messages at the cursor.

line 139: let g:ale_hover_cursor = get(g:, 'ale_hover_cursor', 1)

line 140: 

line 141: " This flag can be set to 1 to automatically close the preview window upon

line 142: " entering Insert Mode.

line 143: let g:ale_close_preview_on_insert = get(g:, 'ale_close_preview_on_insert', 0)

line 144: 

line 145: " This flag can be set to 0 to disable balloon support.

line 146: let g:ale_set_balloons = get(g:, 'ale_set_balloons', has('balloon_eval') && has('gui_running'))

line 147: 

line 148: " Use preview window for hover messages.

line 149: let g:ale_hover_to_preview = get(g:, 'ale_hover_to_preview', 0)

line 150: 

line 151: " Float preview windows in Neovim

line 152: let g:ale_floating_preview = get(g:, 'ale_floating_preview', 0)

line 153: 

line 154: " Hovers use floating windows in Neovim

line 155: let g:ale_hover_to_floating_preview = get(g:, 'ale_hover_to_floating_preview', 0)

line 156: 

line 157: " Detail uses floating windows in Neovim

line 158: let g:ale_detail_to_floating_preview = get(g:, 'ale_detail_to_floating_preview', 0)

line 159: 

line 160: " Border setting for floating preview windows

line 161: " The elements in the list set the characters for the left, top, top-left,

line 162: " top-right, bottom-right, bottom-left, right, and bottom of the border

line 163: " respectively

line 164: let g:ale_floating_window_border = get(g:, 'ale_floating_window_border', ['|', '-', '+', '+', '+', '+', '|', '-'])

line 165: 

line 166: " This flag can be set to 0 to disable warnings for trailing whitespace

line 167: let g:ale_warn_about_trailing_whitespace = get(g:, 'ale_warn_about_trailing_whitespace', 1)

line 168: " This flag can be set to 0 to disable warnings for trailing blank lines

line 169: let g:ale_warn_about_trailing_blank_lines = get(g:, 'ale_warn_about_trailing_blank_lines', 1)

line 170: 

line 171: " A flag for enabling or disabling the command history.

line 172: let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)

line 173: 

line 174: " A flag for storing the full output of commands in the history.

line 175: let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)

line 176: 

line 177: " Enable automatic completion with LSP servers and tsserver

line 178: let g:ale_completion_enabled = get(g:, 'ale_completion_enabled', 0)

line 179: 

line 180: " Enable automatic detection of pipenv for Python linters.

line 181: let g:ale_python_auto_pipenv = get(g:, 'ale_python_auto_pipenv', 0)

line 182: 

line 183: " Enable automatic detection of poetry for Python linters.

line 184: let g:ale_python_auto_poetry = get(g:, 'ale_python_auto_poetry', 0)

line 185: 

line 186: " Enable automatic detection of uv for Python linters.

line 187: let g:ale_python_auto_uv = get(g:, 'ale_python_auto_uv', 0)

line 188: 

line 189: " Enable automatic adjustment of environment variables for Python linters.

line 190: " The variables are set based on ALE's virtualenv detection.

line 191: let g:ale_python_auto_virtualenv = get(g:, 'ale_python_auto_virtualenv', 0)

line 192: 

line 193: " This variable can be overridden to set the GO111MODULE environment variable.

line 194: let g:ale_go_go111module = get(g:, 'ale_go_go111module', '')

line 195: 

line 196: " Default executable for deno, needed set before plugin start

line 197: let g:ale_deno_executable = get(g:, 'ale_deno_executable', 'deno')

line 198: 

line 199: " If 1, enable a popup menu for commands.

line 200: let g:ale_popup_menu_enabled = get(g:, 'ale_popup_menu_enabled', has('gui_running'))

line 201: 

line 202: " If 0, save hidden files when code actions are applied.

line 203: let g:ale_save_hidden = get(g:, 'ale_save_hidden', 0)

line 204: 

line 205: " If 1, disables ALE's built in error display. Instead, all errors are piped

line 206: " to the diagnostics API.

line 207: let g:ale_use_neovim_diagnostics_api = get(g:, 'ale_use_neovim_diagnostics_api', has('nvim-0.6'))

line 208: 

line 209: if g:ale_use_neovim_diagnostics_api && !has('nvim-0.6')

line 210:     " no-custom-checks

line 211:     echoerr('Setting g:ale_use_neovim_diagnostics_api to 1 requires Neovim 0.6+.')

line 212: endif

line 213: 

line 214: if g:ale_set_balloons is 1 || g:ale_set_balloons is# 'hover'

line 215:     call ale#balloon#Enable()

Searching for "autoload/ale/balloon.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/ale/balloon.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/balloon.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 215: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/balloon.vim"
line 1: " Author: w0rp <devw0rp@gmail.com>

line 2: " Description: balloonexpr support for ALE.

line 3: 

line 4: function! ale#balloon#MessageForPos(bufnr, lnum, col) abort

line 47: 

line 48: function! ale#balloon#Expr() abort

line 51: 

line 52: function! ale#balloon#Disable() abort

line 63: 

line 64: function! ale#balloon#Enable() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/balloon.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
calling ale#balloon#Enable()

line 1:     if has('balloon_eval')

line 2:         set ballooneval

line 3:         set balloonexpr=ale#balloon#Expr()

line 4:     endif

line 5: 

line 6:     if has('balloon_eval_term')

line 7:         set balloonevalterm

line 8:         set balloonexpr=ale#balloon#Expr()

line 9:     endif

ale#balloon#Enable returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim

line 216: endif

line 217: 

line 218: if g:ale_completion_enabled

line 219:     call ale#completion#Enable()

line 220: endif

line 221: 

line 222: if g:ale_popup_menu_enabled

line 223:     call ale#code_action#EnablePopUpMenu()

Searching for "autoload/ale/code_action.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/ale/code_action.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/code_action.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 223: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/code_action.vim"
line 1: " Author: Jerko Steiner <jerko.steiner@gmail.com>

line 2: " Description: Code action support for LSP / tsserver

line 3: 

line 4: function! ale#code_action#ReloadBuffer() abort

line 15: 

line 16: function! ale#code_action#HandleCodeAction(code_action, options) abort

line 28: 

line 29: function! s:ChangeCmp(left, right) abort

line 64: 

line 65: function! ale#code_action#ApplyChanges(filename, changes, options) abort

line 178: 

line 179: function! s:UpdateCursor(cursor, start, end, offset) abort

line 226: 

line 227: function! ale#code_action#GetChanges(workspace_edit) abort

line 255: 

line 256: function! ale#code_action#BuildChangesList(changes_map) abort

line 288: 

line 289: function! s:EscapeMenuName(text) abort

line 292: 

line 293: function! s:UpdateMenu(data, menu_items) abort

line 320: 

line 321: function! s:GetCodeActions(linter, options) abort

line 336: 

line 337: function! ale#code_action#GetCodeActions(options) abort

line 355: 

line 356: function! s:Setup(enabled) abort

line 372: 

line 373: function! ale#code_action#EnablePopUpMenu() abort

line 376: 

line 377: function! ale#code_action#DisablePopUpMenu() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/code_action.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
calling ale#code_action#EnablePopUpMenu()

line 1:     call s:Setup(1)

calling <SNR>17_Setup(1)

line 1:     augroup ALECodeActionsGroup

line 2:         autocmd!

line 3: 

line 4:         if a:enabled

line 5:             autocmd MenuPopup * :call ale#code_action#GetCodeActions({})

line 6:         endif

line 7:     augroup END

line 8: 

line 9:     if !a:enabled

line 10:         silent! augroup! ALECodeActionsGroup

line 11: 

line 12:         silent! aunmenu PopUp.Rename

line 13:         silent! aunmenu PopUp.Refactor\.\.\.

line 14:     endif

<SNR>17_Setup returning #0

continuing in ale#code_action#EnablePopUpMenu

ale#code_action#EnablePopUpMenu returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim

line 224: endif

line 225: 

line 226: " Define commands for moving through warnings and errors.

line 227: command! -bar -nargs=* ALEPrevious    :call ale#loclist_jumping#WrapJump('before', <q-args>)

line 229: command! -bar -nargs=* ALENext    :call ale#loclist_jumping#WrapJump('after', <q-args>)

line 231: 

line 232: command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)

line 233: command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)

line 234: command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)

line 235: command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)

line 236: 

line 237: " A command for showing error details.

line 238: command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()

line 239: 

line 240: " Define commands for turning ALE on or off.

line 241: command! -bar ALEToggle :call ale#toggle#Toggle()

line 242: command! -bar ALEEnable :call ale#toggle#Enable()

line 243: command! -bar ALEDisable :call ale#toggle#Disable()

line 244: command! -bar ALEReset :call ale#toggle#Reset()

line 245: " Commands for turning ALE on or off for a buffer.

line 246: command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))

line 247: command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))

line 248: command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))

line 249: command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))

line 250: " A command to stop all LSP-like clients, including tsserver.

line 251: command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()

line 252: " A command to stop a specific language server, or tsseserver.

line 253: command! -bar -bang -nargs=1 -complete=customlist,ale#lsp#reset#Complete ALEStopLSP :call ale#lsp#reset#StopLSP(<f-args>, '<bang>')

line 254: 

line 255: " A command for linting manually.

line 256: command! -bar ALELint :call ale#Queue(0, 'lint_file')

line 257: " Stop current jobs when linting.

line 258: command! -bar ALELintStop :call ale#engine#Stop(bufnr(''))

line 259: 

line 260: " Commands to manually populate the quickfixes.

line 261: command! -bar ALEPopulateQuickfix :call ale#list#ForcePopulateErrorList(1)

line 262: command! -bar ALEPopulateLocList  :call ale#list#ForcePopulateErrorList(0)

line 263: 

line 264: " Define a command to get information about current filetype.

line 265: command! -bar -nargs=* ALEInfo :call ale#debugging#InfoCommand(<f-args>)

line 266: " Deprecated and scheduled for removal in 4.0.0.

line 267: command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboardDeprecatedCommand()

line 268: " Copy ALE information to a file.

line 269: command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)

line 270: 

line 271: " Fix problems in files.

line 272: command! -bar -bang -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call ale#fix#Fix(bufnr(''), '<bang>', <f-args>)

line 273: " Suggest registered functions to use for fixing problems.

line 274: command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)

line 275: 

line 276: " Go to definition for tsserver and LSP

line 277: command! -bar -nargs=* ALEGoToDefinition :call ale#definition#GoToCommandHandler('', <f-args>)

line 278: 

line 279: " Go to type definition for tsserver and LSP

line 280: command! -bar -nargs=* ALEGoToTypeDefinition :call ale#definition#GoToCommandHandler('type', <f-args>)

line 281: 

line 282: " Go to implementation for tsserver and LSP

line 283: command! -bar -nargs=* ALEGoToImplementation :call ale#definition#GoToCommandHandler('implementation', <f-args>)

line 284: 

line 285: " Repeat a previous selection in the preview window

line 286: command! -bar ALERepeatSelection :call ale#preview#RepeatSelection()

line 287: 

line 288: " Find references for tsserver and LSP

line 289: command! -bar -nargs=* ALEFindReferences :call ale#references#Find(<f-args>)

line 290: 

line 291: " Show summary information for the cursor.

line 292: command! -bar ALEHover :call ale#hover#ShowAtCursor()

line 293: 

line 294: " Show documentation for the cursor.

line 295: command! -bar ALEDocumentation :call ale#hover#ShowDocumentationAtCursor()

line 296: 

line 297: " Search for appearances of a symbol, such as a type name or function name.

line 298: command! -nargs=1 ALESymbolSearch :call ale#symbol#Search(<q-args>)

line 299: 

line 300: " Complete text with tsserver and LSP

line 301: command! -bar ALEComplete :call ale#completion#GetCompletions('ale-manual')

line 302: 

line 303: " Try to find completions for the current symbol that add additional text.

line 304: command! -bar ALEImport :call ale#completion#Import()

line 305: 

line 306: " Rename symbols using tsserver and LSP

line 307: command! -bar -bang ALERename :call ale#rename#Execute()

line 308: 

line 309: " Rename file using tsserver

line 310: command! -bar -bang ALEFileRename :call ale#filerename#Execute()

line 311: 

line 312: " Apply code actions to a range.

line 313: command! -bar -range ALECodeAction :call ale#codefix#Execute(<range>)

line 314: 

line 315: " Organize import statements using tsserver

line 316: command! -bar ALEOrganizeImports :call ale#organize_imports#Execute()

line 317: 

line 318: " <Plug> mappings for commands

line 319: nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>

line 320: nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>

line 321: nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>

line 322: nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>

line 323: nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>

line 324: nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>

line 325: nnoremap <silent> <Plug>(ale_next) :ALENext<Return>

line 326: nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>

line 327: nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>

line 328: nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>

line 329: nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>

line 330: nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>

line 331: nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>

line 332: nnoremap <silent> <Plug>(ale_last) :ALELast<Return>

line 333: nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>

line 334: nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>

line 335: nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>

line 336: nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>

line 337: nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>

line 338: nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>

line 339: nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>

line 340: nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>

line 341: nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>

line 342: nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>

line 343: nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>

line 344: nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>

line 345: nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>

line 346: nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>

line 347: nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>

line 348: nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>

line 349: nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>

line 350: nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Return>

line 351: nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinition -vsplit<Return>

line 352: nnoremap <silent> <Plug>(ale_go_to_implementation) :ALEGoToImplementation<Return>

line 353: nnoremap <silent> <Plug>(ale_go_to_implementation_in_tab) :ALEGoToImplementation -tab<Return>

line 354: nnoremap <silent> <Plug>(ale_go_to_implementation_in_split) :ALEGoToImplementation -split<Return>

line 355: nnoremap <silent> <Plug>(ale_go_to_implementation_in_vsplit) :ALEGoToImplementation -vsplit<Return>

line 356: nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>

line 357: nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>

line 358: nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>

line 359: inoremap <silent> <Plug>(ale_complete) <C-\><C-O>:ALEComplete<Return>

line 360: nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>

line 361: nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>

line 362: nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename<Return>

line 363: nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>

line 364: nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>

line 365: nnoremap <silent> <Plug>(ale_info) :ALEInfo<Return>

line 366: nnoremap <silent> <Plug>(ale_info_echo) :ALEInfo -echo<Return>

line 367: nnoremap <silent> <Plug>(ale_info_clipboard) :ALEInfo -clipboard<Return>

line 368: nnoremap <silent> <Plug>(ale_info_preview) :ALEInfo -preview<Return>

line 369: 

line 370: " Set up autocmd groups now.

line 371: call ale#events#Init()

Searching for "autoload/ale/events.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/ale/events.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/events.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale)
fchdir() to previous dir
line 371: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/events.vim"
line 1: " Author: w0rp <devw0rp@gmail.com>

line 2: " Description: ALE functions for autocmd events.

line 3: 

line 4: " Get the number of milliseconds since some vague, but consistent, point in

line 5: " the past.

line 6: "

line 7: " This function can be used for timing execution, etc.

line 8: "

line 9: " The time will be returned as a Number.

line 10: function! ale#events#ClockMilliseconds() abort

line 13: 

line 14: function! ale#events#QuitEvent(buffer) abort

line 18: 

line 19: function! ale#events#QuitRecently(buffer) abort

line 24: 

line 25: function! ale#events#SaveEvent(buffer) abort

line 41: 

line 42: function! ale#events#LintOnEnter(buffer) abort

line 50: 

line 51: function! ale#events#ReadOrEnterEvent(buffer) abort

line 68: 

line 69: function! ale#events#FileTypeEvent(buffer, new_filetype) abort

line 86: 

line 87: function! ale#events#FileChangedEvent(buffer) abort

line 94: 

line 95: " A timer for emulating InsertLeave.

line 96: "

line 97: " We only need a single timer, and we'll lint the last buffer we entered

line 98: " insert mode on.

line 99: if !exists('s:insert_leave_timer')

line 100:     let s:insert_leave_timer = -1

line 101: endif

line 102: 

line 103: function! ale#events#EmulateInsertLeave(buffer) abort

line 109: 

line 110: function! ale#events#InsertEnterEvent(buffer) abort

line 127: 

line 128: function! ale#events#InsertLeaveEvent(buffer) abort

line 150: 

line 151: function! ale#events#Init() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/autoload/ale/events.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
calling ale#events#Init()

line 1:     " This value used to be a Boolean as a Number, and is now a String.

line 2:     let l:text_changed = '' . g:ale_lint_on_text_changed

line 3: 

line 4:     augroup ALEEvents

line 5:         autocmd!

line 6: 

line 7:         " These events always need to be set up.

line 8:         autocmd BufEnter,BufRead * call ale#events#ReadOrEnterEvent(str2nr(expand('<abuf>')))

line 9:         autocmd BufWritePost * call ale#events#SaveEvent(str2nr(expand('<abuf>')))

line 10: 

line 11:         if g:ale_enabled

line 12:             if l:text_changed is? 'always' || l:text_changed is# '1'

line 13:                 autocmd TextChanged,TextChangedI * call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

line 14:             elseif l:text_changed is? 'normal'

line 15:                 autocmd TextChanged * call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

line 16:             elseif l:text_changed is? 'insert'

line 17:                 autocmd TextChangedI * call ale#Queue(ale#Var(str2nr(expand('<abuf>')), 'lint_delay'))

line 18:             endif

line 19: 

line 20:             if g:ale_lint_on_enter

line 21:                 autocmd BufWinEnter * call ale#events#LintOnEnter(str2nr(expand('<abuf>')))

line 22:                 " Track when the file is changed outside of Vim.

line 23:                 autocmd FileChangedShellPost * call ale#events#FileChangedEvent(str2nr(expand('<abuf>')))

line 24:             endif

line 25: 

line 26:             if g:ale_lint_on_filetype_changed

line 27:                 " Only start linting if the FileType actually changes after

line 28:                 " opening a buffer. The FileType will fire when buffers are opened.

line 29:                 autocmd FileType * call ale#events#FileTypeEvent(   str2nr(expand('<abuf>')),   expand('<amatch>'))

line 33:             endif

line 34: 

line 35:             " Add an InsertEnter event if we need to close the preview window

line 36:             " on entering insert mode, or if we want to run ALE on leaving

line 37:             " insert mode and <C-c> is not the same as <Esc>.

line 38:             "

line 39:             " We will emulate leaving insert mode for users that might not

line 40:             " trigger InsertLeave.

line 41:             if g:ale_close_preview_on_insert|| (g:ale_lint_on_insert_leave && maparg("\<C-c>", 'i') isnot# '<Esc>')

line 43:                 autocmd InsertEnter * call ale#events#InsertEnterEvent(str2nr(expand('<abuf>')))

line 44:             endif

line 45: 

line 46:             let l:add_insert_leave_event = g:ale_lint_on_insert_leave

line 47: 

line 48:             if g:ale_echo_cursor || g:ale_cursor_detail

line 49:                 " We need to make the message display on InsertLeave

line 50:                 let l:add_insert_leave_event = 1

line 51: 

line 52:                 autocmd CursorMoved,CursorHold * if exists('*ale#engine#Cleanup') | call ale#cursor#EchoCursorWarningWithDelay() | endif

line 53:             endif

line 54: 

line 55:             if g:ale_virtualtext_cursor is# 'current' || g:ale_virtualtext_cursor is# 1 || g:ale_virtualtext_cursor is# '1'

line 56:                 " We need to make the message display on InsertLeave

line 57:                 let l:add_insert_leave_event = 1

line 58: 

line 59:                 autocmd CursorMoved,CursorHold * if exists('*ale#engine#Cleanup') | call ale#virtualtext#ShowCursorWarningWithDelay() | endif

line 60:             endif

line 61: 

line 62:             if l:add_insert_leave_event

line 63:                 autocmd InsertLeave * call ale#events#InsertLeaveEvent(str2nr(expand('<abuf>')))

line 64:             endif

line 65: 

line 66:             if g:ale_hover_cursor

line 67:                 autocmd CursorHold * if exists('*ale#lsp#Send') | call ale#hover#ShowTruncatedMessageAtCursor() | endif

line 68:             endif

line 69:         endif

line 70:     augroup END

line 71: 

line 72:     augroup AleURISchemes

line 73:         autocmd!

line 74: 

line 75:         autocmd BufNewFile,BufReadPre jdt://** call ale#uri#jdt#ReadJDTLink(expand('<amatch>'))

line 76:     augroup END

ale#events#Init returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim

line 372: 

line 373: " Housekeeping

line 374: 

line 375: augroup ALECleanupGroup

line 376:     autocmd!

line 377:     " Clean up buffers automatically when they are unloaded.

line 378:     autocmd BufDelete * if exists('*ale#engine#Cleanup') | call ale#engine#Cleanup(str2nr(expand('<abuf>'))) | endif

line 379:     autocmd QuitPre * call ale#events#QuitEvent(str2nr(expand('<abuf>')))

line 380: 

line 381:     if exists('##VimSuspend')

line 382:         autocmd VimSuspend * if exists('*ale#engine#CleanupEveryBuffer') | call ale#engine#CleanupEveryBuffer() | endif

line 383:     endif

line 384: augroup END

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
continuing in /Users/piotr/.config/vim/init/ale.vim
line 2: augroup filetypedetect

line 2: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/ale"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/ale"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/ale"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/ale"
line 3: 

line 4: g:ale_completion_enabled = 0

line 5: g:ale_sign_highlight_linenrs = 1

line 6: g:ale_echo_msg_format = '[%severity%] %linter%: %s'

line 7: g:ale_virtualtext_cursor = 'all' # all | current | disabled

line 8: g:ale_virtualtext_column = 1

line 9: g:ale_sign_column_always = 1

line 10: g:ale_change_sign_column_color = 1

line 11: g:ale_close_preview_on_insert = 1

line 12: g:ale_echo_cursor = 1

line 13: g:ale_floating_preview = 1

line 14: g:ale_cursor_detail = 0

line 15: g:ale_lint_on_text_changed = 'never'

line 16: g:ale_lint_on_insert_leave = 1

line 17: g:ale_lint_on_enter = 1

line 18: g:ale_lint_on_save = 1

line 19: g:ale_lint_delay = 100

line 20: g:ale_fix_on_save = 1

line 21: g:ale_linters_explicit = 1

line 22: g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']

line 23: g:ale_lsp_suggestions = 1

line 25: g:swift_appleswiftformat_executable = 'swift format'

line 27: g:ale_linters = {

line 35: g:ale_fixers = {

finished sourcing /Users/piotr/.config/vim/init/ale.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 44: source ~/.config/vim/init/lsp.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 44: sourcing "/Users/piotr/.config/vim/init/lsp.vim"
line 1: vim9script

line 2: 

line 3: packadd lsp

Searching for "pack/*/start/lsp" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/lsp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/lsp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/lsp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/lsp"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/lsp"
not found in 'packpath': "pack/*/start/lsp"
Searching for "pack/*/opt/lsp" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/lsp"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:   " Needs Vim version 9.0 and above

line 3:   finish

line 4: endif

line 5: 

line 6: vim9script noclear

line 7: 

line 8: # Language Server Protocol (LSP) plugin for vim

line 9: 

line 10: if get(g:, 'loaded_lsp', false)

line 11:   finish

line 12: endif

line 13: g:loaded_lsp = true

line 15: import '../autoload/lsp/options.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/options.vim"
line 1: vim9script

line 2: 

line 3: export const COMPLETIONMATCHER_CASE = 1

line 4: export const COMPLETIONMATCHER_ICASE = 2

line 5: export const COMPLETIONMATCHER_FUZZY = 3

line 9: export var lspOptions: dict<any> = {

line 149: export def OptionsSet(opts: dict<any>)

line 173: 

line 174: # return a copy of the LSP plugin options

line 175: export def OptionsGet(): dict<any>

line 178: 

line 179: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/options.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
line 16: import autoload '../autoload/lsp/lsp.vim'

line 19: def g:LspOptionsSet(opts: dict<any>)

line 22: 

line 23: # Return a copy of all the LSP plugin options

line 24: def g:LspOptionsGet(): dict<any>

line 27: 

line 28: # Add one or more LSP servers in 'serverList'

line 29: def g:LspAddServer(serverList: list<dict<any>>)

line 32: 

line 33: # Register 'Handler' callback function for LSP command 'cmd'.

line 34: def g:LspRegisterCmdHandler(cmd: string, Handler: func)

line 37: 

line 38: # Returns true if the language server for the current buffer is initialized

line 39: # and ready to accept requests.

line 40: def g:LspServerReady(): bool

line 43: 

line 44: # Returns true if the language server for 'ftype' file type is running

line 45: def g:LspServerRunning(ftype: string): bool

line 48: 

line 49: augroup LSPAutoCmds

line 50:   au!

line 51:   autocmd BufNewFile,BufReadPost,FileType * lsp.AddFile(expand('<abuf>')->str2nr())

line 52:   # Note that when BufWipeOut is invoked, the current buffer may be different

line 53:   # from the buffer getting wiped out.

line 54:   autocmd BufWipeOut * lsp.RemoveFile(expand('<abuf>')->str2nr())

line 55:   autocmd BufWinEnter * lsp.BufferLoadedInWin(expand('<abuf>')->str2nr())

line 56: augroup END

line 57: 

line 58: # TODO: Is it needed to shutdown all the LSP servers when exiting Vim?

line 59: # This takes some time.

line 60: # autocmd VimLeavePre * call lsp.StopAllServers()

line 61: 

line 62: # LSP commands

line 63: command! -nargs=? -bar -range LspCodeAction lsp.CodeAction(<line1>, <line2>, <q-args>)

line 64: command! -nargs=0 -bar LspCodeLens lsp.CodeLens()

line 65: command! -nargs=+ -bar -bang -count -complete=customlist,lsp.LspDiagComplete LspDiag lsp.LspDiagCmd(<q-args>, <count>, <bang>false)

line 66: command! -nargs=0 -bar -bang LspDiagCurrent lsp.LspShowCurrentDiag(<bang>false)

line 67: command! -nargs=0 -bar LspDiagFirst lsp.JumpToDiag('first')

line 68: command! -nargs=0 -bar LspDiagLast lsp.JumpToDiag('last')

line 69: command! -nargs=0 -bar -count=1 LspDiagNext lsp.JumpToDiag('next', <count>)

line 70: command! -nargs=0 -bar -count=1 LspDiagNextWrap lsp.JumpToDiag('nextWrap', <count>)

line 71: command! -nargs=0 -bar -count=1 LspDiagPrev lsp.JumpToDiag('prev', <count>)

line 72: command! -nargs=0 -bar -count=1 LspDiagPrevWrap lsp.JumpToDiag('prevWrap', <count>)

line 73: command! -nargs=0 -bar LspDiagShow lsp.ShowDiagnostics()

line 74: command! -nargs=0 -bar LspDiagHere lsp.JumpToDiag('here')

line 75: command! -nargs=0 -bar LspDocumentSymbol lsp.ShowDocSymbols()

line 76: command! -nargs=0 -bar LspFold lsp.FoldDocument()

line 77: 

line 78: command! -nargs=0 -bar -range=% LspFormat lsp.TextDocFormat(<range>, <line1>, <line2>)

line 79: def LspFormatFunc(type: string, visual_mode = v:false)

line 88: nnoremap <silent> <plug>(LspFormat)  <Cmd>set operatorfunc=LspFormatFunc<cr>g@

line 89: 

line 90: command! -nargs=0 -bar -count LspGotoDeclaration lsp.GotoDeclaration(v:false, <q-mods>, <count>)

line 91: command! -nargs=0 -bar -count LspGotoDefinition lsp.GotoDefinition(v:false, <q-mods>, <count>)

line 92: command! -nargs=0 -bar -count LspGotoImpl lsp.GotoImplementation(v:false, <q-mods>, <count>)

line 93: command! -nargs=0 -bar -count LspGotoTypeDef lsp.GotoTypedef(v:false, <q-mods>, <count>)

line 94: command! -nargs=0 -bar LspHighlight call LspDocHighlight(bufnr(), <q-mods>)

line 95: command! -nargs=0 -bar LspHighlightClear call LspDocHighlightClear()

line 96: command! -nargs=? -bar LspHover lsp.Hover(<q-mods>)

line 97: command! -nargs=1 -bar -complete=customlist,lsp.LspInlayHintsComplete LspInlayHints lsp.InlayHints(<q-args>)

line 98: command! -nargs=0 -bar LspIncomingCalls lsp.IncomingCalls()

line 99: command! -nargs=0 -bar LspOutgoingCalls lsp.OutgoingCalls()

line 100: command! -nargs=0 -bar -count LspOutline lsp.Outline(<q-mods>, <count>)

line 101: command! -nargs=0 -bar -count LspPeekDeclaration lsp.GotoDeclaration(v:true, <q-mods>, <count>)

line 102: command! -nargs=0 -bar -count LspPeekDefinition lsp.GotoDefinition(v:true, <q-mods>, <count>)

line 103: command! -nargs=0 -bar -count LspPeekImpl lsp.GotoImplementation(v:true, <q-mods>, <count>)

line 104: command! -nargs=0 -bar LspPeekReferences lsp.ShowReferences(v:true)

line 105: command! -nargs=0 -bar -count LspPeekTypeDef lsp.GotoTypedef(v:true, <q-mods>, <count>)

line 106: command! -nargs=? -bar LspRename lsp.Rename(<q-args>)

line 107: command! -nargs=0 -bar LspSelectionExpand lsp.SelectionExpand()

line 108: command! -nargs=0 -bar LspSelectionShrink lsp.SelectionShrink()

line 109: command! -nargs=+ -bar -complete=customlist,lsp.LspServerComplete LspServer lsp.LspServerCmd(<q-args>)

line 110: command! -nargs=0 -bar LspShowReferences lsp.ShowReferences(v:false)

line 111: command! -nargs=0 -bar LspShowAllServers lsp.ShowAllServers()

line 112: command! -nargs=0 -bar LspShowSignature call LspShowSignature()

line 113: command! -nargs=0 -bar LspSubTypeHierarchy lsp.TypeHierarchy(0)

line 114: command! -nargs=0 -bar LspSuperTypeHierarchy lsp.TypeHierarchy(1)

line 115: # Clangd specifc extension to switch from one C/C++ source file to a

line 116: # corresponding header file

line 117: command! -nargs=0 -bar LspSwitchSourceHeader lsp.SwitchSourceHeader()

line 118: command! -nargs=? -bar LspSymbolSearch lsp.SymbolSearch(<q-args>, <q-mods>)

line 119: command! -nargs=1 -bar -complete=dir LspWorkspaceAddFolder lsp.AddWorkspaceFolder(<q-args>)

line 120: command! -nargs=0 -bar LspWorkspaceListFolders lsp.ListWorkspaceFolders()

line 121: command! -nargs=1 -bar -complete=dir LspWorkspaceRemoveFolder lsp.RemoveWorkspaceFolder(<q-args>)

line 122: 

line 123: # Add the GUI menu entries

line 124: if has('gui_running')

line 125:   anoremenu <silent> L&sp.Goto.Definition :LspGotoDefinition<CR>

line 126:   anoremenu <silent> L&sp.Goto.Declaration :LspGotoDeclaration<CR>

line 127:   anoremenu <silent> L&sp.Goto.Implementation :LspGotoImpl<CR>

line 128:   anoremenu <silent> L&sp.Goto.TypeDef :LspGotoTypeDef<CR>

line 129: 

line 130:   anoremenu <silent> L&sp.Show\ Signature :LspShowSignature<CR>

line 131:   anoremenu <silent> L&sp.Show\ References :LspShowReferences<CR>

line 132:   anoremenu <silent> L&sp.Show\ Detail :LspHover<CR>

line 133:   anoremenu <silent> L&sp.Outline :LspOutline<CR>

line 134: 

line 135:   anoremenu <silent> L&sp.Goto\ Symbol :LspDocumentSymbol<CR>

line 136:   anoremenu <silent> L&sp.Symbol\ Search :LspSymbolSearch<CR>

line 137:   anoremenu <silent> L&sp.Outgoing\ Calls :LspOutgoingCalls<CR>

line 138:   anoremenu <silent> L&sp.Incoming\ Calls :LspIncomingCalls<CR>

line 139:   anoremenu <silent> L&sp.Rename :LspRename<CR>

line 140:   anoremenu <silent> L&sp.Code\ Action :LspCodeAction<CR>

line 141: 

line 142:   anoremenu <silent> L&sp.Highlight\ Symbol :LspHighlight<CR>

line 143:   anoremenu <silent> L&sp.Highlight\ Clear :LspHighlightClear<CR>

line 144: 

line 145:   # Diagnostics

line 146:   anoremenu <silent> L&sp.Diagnostics.Current :LspDiag current<CR>

line 147:   anoremenu <silent> L&sp.Diagnostics.Show\ All :LspDiag show<CR>

line 148:   anoremenu <silent> L&sp.Diagnostics.First :LspDiag first<CR>

line 149:   anoremenu <silent> L&sp.Diagnostics.Last :LspDiag last<CR>

line 150:   anoremenu <silent> L&sp.Diagnostics.Next :LspDiag next<CR>

line 151:   anoremenu <silent> L&sp.Diagnostics.Previous :LspDiag prev<CR>

line 152:   anoremenu <silent> L&sp.Diagnostics.This :LspDiag here<CR>

line 153: 

line 154:   if &mousemodel =~ 'popup'

line 155:     anoremenu <silent> PopUp.L&sp.Go\ to\ Definition :LspGotoDefinition<CR>

line 157:     anoremenu <silent> PopUp.L&sp.Go\ to\ Declaration :LspGotoDeclaration<CR>

line 159:     anoremenu <silent> PopUp.L&sp.Find\ All\ References :LspShowReferences<CR>

line 161:     anoremenu <silent> PopUp.L&sp.Show\ Detail :LspHover<CR>

line 163:     anoremenu <silent> PopUp.L&sp.Highlight\ Symbol :LspHighlight<CR>

line 165:     anoremenu <silent> PopUp.L&sp.Highlight\ Clear :LspHighlightClear<CR>

line 167:   endif

line 168: endif

line 169: 

line 170: # Invoke autocmd to register LSP servers and to set LSP options

line 171: if exists('#User#LspSetup')

line 172:   :doautocmd <nomodeline> User LspSetup

line 173: endif

line 174: 

line 175: # vim: shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
continuing in /Users/piotr/.config/vim/init/lsp.vim
line 3: augroup filetypedetect

line 3: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/lsp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/lsp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/lsp"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/lsp"
line 4: packadd vim-rooter

Searching for "pack/*/start/vim-rooter" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/vim-rooter"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin)
fchdir() to previous dir
line 4: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim"
line 1: " Vim plugin to change the working directory to the project root.

line 2: "

line 3: " Copyright 2010-2020 Andrew Stewart, <boss@airbladesoftware.com>

line 4: " Released under the MIT licence.

line 5: 

line 6: if exists('g:loaded_rooter') || &cp

line 7:   finish

line 8: endif

line 9: let g:loaded_rooter = 1

line 10: 

line 11: let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''

line 12: 

line 13: if !exists('g:rooter_manual_only')

line 14:   let g:rooter_manual_only = 0

line 15: endif

line 16: 

line 17: if exists('+autochdir') && &autochdir && !g:rooter_manual_only

line 18:   set noautochdir

line 19: endif

line 20: 

line 21: if exists('g:rooter_use_lcd')

line 22:   echoerr 'vim-rooter: please replace g:rooter_use_lcd=1 with g:rooter_cd_cmd="lcd"'

line 23:   let g:rooter_cd_cmd = 'lcd'

line 24: endif

line 25: 

line 26: if !exists('g:rooter_cd_cmd')

line 27:   let g:rooter_cd_cmd = 'cd'

line 28: endif

line 29: 

line 30: if !exists('g:rooter_buftypes')

line 31:   let g:rooter_buftypes = ['', 'nofile', 'nowrite', 'acwrite']

line 32: endif

line 33: 

line 34: if !exists('g:rooter_patterns')

line 35:   let g:rooter_patterns = ['.git', '_darcs', '.hg', '.bzr', '.svn', 'Makefile', 'package.json']

line 36: endif

line 37: 

line 38: if !exists('g:rooter_targets')

line 39:   let g:rooter_targets = ['/', '*']

line 40: endif

line 41: 

line 42: if !exists('g:rooter_change_directory_for_non_project_files')

line 43:   let g:rooter_change_directory_for_non_project_files = ''

line 44: endif

line 45: 

line 46: if !exists('g:rooter_silent_chdir')

line 47:   let g:rooter_silent_chdir = 0

line 48: endif

line 49: 

line 50: if !exists('g:rooter_resolve_links')

line 51:   let g:rooter_resolve_links = 0

line 52: endif

line 53: 

line 54: if !exists('g:rooter_ignore')

line 55:   let g:rooter_ignore = 0

line 56: endif

line 57: 

line 58: 

line 59: " For third-parties.  Not used by plugin.

line 60: function! FindRootDirectory()

line 63: 

line 64: 

line 65: command! -bar Rooter call <SID>rooter()

line 66: command! -bar RooterToggle call <SID>toggle()

line 67: 

line 68: 

line 69: augroup rooter

line 70:   autocmd!

line 71:   autocmd VimEnter,BufReadPost,BufEnter * nested if !g:rooter_manual_only | call <SID>rooter(+expand('<abuf>')) | endif

line 72:   autocmd BufWritePost * nested if !g:rooter_manual_only | call <SID>clear_cache(+expand('<abuf>')) | call <SID>rooter(+expand('<abuf>')) | endif

line 73: augroup END

line 74: 

line 75: 

line 76: function! s:rooter(...)

line 94: 

line 95: 

line 96: function! s:clear_cache(bufnr)

line 99: 

line 100: 

line 101: " Returns true if we should change to the buffer's root directory, false otherwise.

line 102: function! s:activate()

line 134: 

line 135: 

line 136: " Returns the root directory or an empty string if no root directory found.

line 137: function! s:root()

line 167: 

line 168: 

line 169: function! s:remove_ignored(patterns, dir, file)

line 183: 

line 184: 

line 185: function s:match(dir, pattern)

line 196: 

line 197: 

line 198: " Returns true if dir is identifier, false otherwise.

line 199: "

line 200: " dir        - full path to a directory

line 201: " identifier - a directory name

line 202: function! s:is(dir, identifier)

line 206: 

line 207: 

line 208: " Returns true if dir contains identifier, false otherwise.

line 209: "

line 210: " dir        - full path to a directory

line 211: " identifier - a file name or a directory name; may be a glob

line 212: function! s:has(dir, identifier)

line 219: 

line 220: 

line 221: " Returns true if identifier is an ancestor of dir,

line 222: " i.e. dir is a subdirectory (no matter how many levels) of identifier;

line 223: " false otherwise.

line 224: "

line 225: " dir        - full path to a directory

line 226: " identifier - a directory name

line 227: function! s:sub(dir, identifier)

line 236: 

line 237: " Return true if identifier is a direct ancestor (parent) of dir,

line 238: " i.e. dir is a direct subdirectory (child) of identifier; false otherwise

line 239: "

line 240: " dir        - full path to a directory

line 241: " identifier - a directory name

line 242: function! s:child(dir, identifier)

line 246: 

line 247: " Returns full path of directory of current file name (which may be a directory).

line 248: function! s:current()

line 253: 

line 254: " Returns full path of current file name

line 255: function s:current_file()

line 262: 

line 263: " Returns full path of dir's parent directory.

line 264: function! s:parent(dir)

line 267: 

line 268: 

line 269: " Changes to the given directory unless it is already the current one.

line 270: function! s:cd(dir)

line 278: 

line 279: 

line 280: function! s:rootless()

line 289: 

line 290: 

line 291: function! s:toggle()

line 295: 

line 296: 

line 297: " vim:set ft=vim sw=2 sts=2 et:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim
continuing in /Users/piotr/.config/vim/init/lsp.vim
line 4: augroup filetypedetect

line 4: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/vim-rooter"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/vim-rooter"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/vim-rooter"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/vim-rooter"
Searching for "pack/*/opt/vim-rooter" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/vim-rooter"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/vim-rooter"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/vim-rooter"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/vim-rooter"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/vim-rooter"
not found in 'packpath': "pack/*/opt/vim-rooter"
line 5: 

line 6: var lspOptions = {

line 19: g:LspOptionsSet(lspOptions)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 21: def OnLspAttached()

line 44: 

line 45: augroup LspAttach

line 46:   autocmd!

line 47:   autocmd User LspAttached call OnLspAttached()

line 48: augroup END

line 49: 

line 50: var lspServers = [

line 138: g:LspAddServer(lspServers)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim"
line 1: vim9script

line 2: 

line 3: # Vim9 LSP client

line 4: #

line 5: # The functions called by plugin/lsp.vim are in this file.

line 6: 

line 7: # Needs Vim 9.0 and higher

line 8: if v:version < 900

line 9:   finish

line 10: endif

line 11: 

line 12: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 13: import './lspserver.vim' as lserver

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 13: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim"
line 1: vim9script

line 2: 

line 3: # LSP server functions

line 4: #

line 5: # The functions to send request messages to the language server are in this

line 6: # file.

line 7: #

line 8: # Refer to https://microsoft.github.io/language-server-protocol/specification

line 9: # for the Language Server Protocol (LSP) specificaiton.

line 10: 

line 11: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 12: import './handlers.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 12: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim"
line 1: vim9script

line 2: 

line 3: # Handlers for messages from the LSP server

line 4: # Refer to https://microsoft.github.io/language-server-protocol/specification

line 5: # for the Language Server Protocol (LSP) specification.

line 6: 

line 7: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/util.vim"
line 1: vim9script

line 2: 

line 3: # Display an info message

line 4: export def InfoMsg(msg: string)

line 9: 

line 10: # Display a warning message

line 11: export def WarnMsg(msg: string)

line 16: 

line 17: # Display an error message

line 18: export def ErrMsg(msg: string)

line 23: 

line 24: # Lsp server trace log directory

line 25: var lsp_log_dir: string

line 26: if has('unix')

line 27:   lsp_log_dir = '/tmp/'

line 28: else

line 29:   lsp_log_dir = $TEMP .. '\\'

line 30: endif

line 31: 

line 32: # Log a message from the LSP server. stderr is true for logging messages

line 33: # from the standard error and false for stdout.

line 34: export def TraceLog(fname: string, stderr: bool, msg: string)

line 41: 

line 42: # Empty out the LSP server trace logs

line 43: export def ClearTraceLogs(fname: string)

line 46: 

line 47: # Open the LSP server debug messages file.

line 48: export def ServerMessagesShow(fname: string)

line 65: 

line 66: # Parse a LSP Location or LocationLink type and return a List with two items.

line 67: # The first item is the DocumentURI and the second item is the Range.

line 68: export def LspLocationParse(lsploc: dict<any>): list<any>

line 77: 

line 78: # Convert a LSP file URI (file://<absolute_path>) to a Vim file name

line 79: export def LspUriToFile(uri: string): string

line 96: 

line 97: # Convert a LSP file URI (file://<absolute_path>) to a Vim buffer number.

line 98: # If the file is not in a Vim buffer, then adds the buffer.

line 99: # Returns 0 on error.

line 100: export def LspUriToBufnr(uri: string): number

line 103: 

line 104: # Returns if the URI refers to a remote file (e.g. ssh://)

line 105: # Credit: vim-lsp plugin

line 106: export def LspUriRemote(uri: string): bool

line 109: 

line 110: var resolvedUris = {}

line 113: export def LspFileToUri(fname: string): string

line 151: 

line 152: # Convert a Vim buffer number to an LSP URI (file://<absolute_path>)

line 153: export def LspBufnrToUri(bnr: number): string

line 156: 

line 157: # Returns the byte number of the specified LSP position in buffer "bnr".

line 158: # LSP's line and characters are 0-indexed.

line 159: # Vim's line and columns are 1-indexed.

line 160: # Returns a zero-indexed column.

line 161: export def GetLineByteFromPos(bnr: number, pos: dict<number>): number

line 184: 

line 185: # Get the index of the character at [pos.line, pos.character] in buffer "bnr"

line 186: # without counting the composing characters.  The LSP server counts composing

line 187: # characters as separate characters whereas Vim string indexing ignores the

line 188: # composing characters.

line 189: export def GetCharIdxWithoutCompChar(bnr: number, pos: dict<number>): number

line 219: 

line 220: # Get the index of the character at [pos.line, pos.character] in buffer "bnr"

line 221: # counting the composing characters as separate characters.  The LSP server

line 222: # counts composing characters as separate characters whereas Vim string

line 223: # indexing ignores the composing characters.

line 224: export def GetCharIdxWithCompChar(ltext: string, charIdx: number): number

line 244: 

line 245: # push the current location on to the tag stack

line 246: export def PushCursorToTagStack()

line 255: 

line 256: # Jump to the LSP "location".  The "location" contains the file name, line

line 257: # number and character number. The user specified window command modifiers

line 258: # (e.g. topleft) are in "cmdmods".

line 259: export def JumpToLspLocation(location: dict<any>, cmdmods: string)

line 309: 

line 310: # indexof() function is not present in older Vim 9 versions.  So use this

line 311: # function.

line 312: export def Indexof(list: list<any>, CallbackFn: func(number, any): bool): number

line 322: 

line 323: # Find the nearest root directory containing a file or directory name from the

line 324: # list of names in "files" starting with the directory "startDir".

line 325: # Based on a similar implementation in the vim-lsp plugin.

line 326: # Searches upwards starting with the directory "startDir".

line 327: # If a file name ends with '/' or '\', then it is a directory name, otherwise

line 328: # it is a file name.

line 329: # Returns '' if none of the file and directory names in "files" can be found

line 330: # in one of the parent directories.

line 331: export def FindNearestRootDir(startDir: string, files: list<any>): string

line 363: 

line 364: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/util.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
line 8: import './diag.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim"
line 1: vim9script

line 2: 

line 3: # Functions related to handling LSP diagnostics.

line 4: 

line 5: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/buffer.vim"
line 1: vim9script

line 2: 

line 3: # Functions for managing the per-buffer LSP server information

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 11: var bufnrToServers: dict<list<dict<any>>> = {}

line 14: export def BufLspServerSet(bnr: number, lspserver: dict<any>)

line 21: 

line 22: # Remove "lspserver" from "bufnrToServers" map for buffer "bnr".

line 23: export def BufLspServerRemove(bnr: number, lspserver: dict<any>)

line 37: 

line 38: var SupportedCheckFns = {

line 66: export def BufLspServerGet(bnr: number, feature: string = null_string): dict<any>

line 119: 

line 120: # Returns the LSP server for the buffer "bnr" and with ID "id". Returns an empty

line 121: # dict if the server is not found.

line 122: export def BufLspServerGetById(bnr: number, id: number): dict<any>

line 135: 

line 136: # Returns the LSP servers for the buffer "bnr". Returns an empty list if the

line 137: # servers are not found.

line 138: export def BufLspServersGet(bnr: number): list<dict<any>>

line 145: 

line 146: # Returns the LSP server for the current buffer with the optionally "feature".

line 147: # Returns an empty dict if the server is not found.

line 148: export def CurbufGetServer(feature: string = null_string): dict<any>

line 151: 

line 152: # Returns the LSP servers for the current buffer. Returns an empty list if the

line 153: # servers are not found.

line 154: export def CurbufGetServers(): list<dict<any>>

line 157: 

line 158: export def BufHasLspServer(bnr: number): bool

line 163: 

line 164: # Returns the LSP server for the current buffer with the optinally "feature" if

line 165: # it is running and is ready.

line 166: # Returns an empty dict if the server is not found or is not ready.

line 167: export def CurbufGetServerChecked(feature: string = null_string): dict<any>

line 193: 

line 194: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/buffer.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim
line 7: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 20: var diagsMap: dict<dict<any>> = {}

line 23: export def InitOnce()

line 121: 

line 122: # Initialize the diagnostics features for the buffer 'bnr'

line 123: export def BufferInit(lspserver: dict<any>, bnr: number)

line 139: 

line 140: # Function to sort the diagnostics in ascending order based on the line and

line 141: # character offset

line 142: def DiagsSortFunc(a: dict<any>, b: dict<any>): number

line 151: 

line 152: # Sort diagnostics ascending based on line and character offset

line 153: def SortDiags(diags: list<dict<any>>): list<dict<any>>

line 156: 

line 157: # Remove the diagnostics stored for buffer "bnr"

line 158: export def DiagRemoveFile(bnr: number)

line 163: 

line 164: def DiagSevToSignName(severity: number): string

line 172: 

line 173: def DiagSevToInlineHLName(severity: number): string

line 185: 

line 186: def DiagSevToVirtualTextHLName(severity: number): string

line 198: 

line 199: def DiagSevToSymbolText(severity: number): string

line 212: 

line 213: # Remove signs and text properties for diagnostics in buffer

line 214: def RemoveDiagVisualsForBuffer(bnr: number, all: bool = false)

line 237: 

line 238: # Refresh the placed diagnostics in buffer "bnr"

line 239: # This inline signs, inline props, and virtual text diagnostics

line 240: export def DiagsRefresh(bnr: number, all: bool = false)

line 343: 

line 344: # Sends diagnostics to Ale

line 345: def SendAleDiags(bnr: number, timerid: number)

line 362: 

line 363: # Hook called when Ale wants to retrieve new diagnostics

line 364: def AleHook(bnr: number)

line 368: 

line 369: # New LSP diagnostic messages received from the server for a file.

line 370: # Update the signs placed in the buffer for this file

line 371: export def ProcessNewDiags(bnr: number)

line 393: 

line 394: # process a diagnostic notification message from the LSP server

line 395: # Notification: textDocument/publishDiagnostics

line 396: # Param: PublishDiagnosticsParams

line 397: export def DiagNotification(lspserver: dict<any>, uri: string, diags_arg: list<dict<any>>): void

line 476: 

line 477: # get the count of error in the current buffer

line 478: export def DiagsGetErrorCount(bnr: number): dict<number>

line 495: 

line 496: # Map the LSP DiagnosticSeverity to a quickfix type character

line 497: def DiagSevToQfType(severity: number): string

line 506: 

line 507: # Update the location list window for the current window with the diagnostic

line 508: # messages.

line 509: # Returns true if diagnostics is not empty and false if it is empty.

line 510: def DiagsUpdateLocList(bnr: number, calledByCmd: bool = false): bool

line 568: 

line 569: # Display the diagnostic messages from the LSP server for the current buffer

line 570: # in a location list

line 571: export def ShowAllDiags(): void

line 588: 

line 589: # Display the message of "diag" in a popup window right below the position in

line 590: # the diagnostic message.

line 591: def ShowDiagInPopup(diag: dict<any>)

line 632: 

line 633: # Display the "diag" message in a popup or in the status message area

line 634: def DisplayDiag(diag: dict<any>)

line 643: 

line 644: # Show the diagnostic message for the current line

line 645: export def ShowCurrentDiag(atPos: bool)

line 656: 

line 657: # Show the diagnostic message for the current line without linebreak

line 658: def ShowCurrentDiagInStatusLine()

line 678: 

line 679: # Get the diagnostic from the LSP server for a particular line and character

line 680: # offset in a file

line 681: export def GetDiagByPos(bnr: number, lnum: number, col: number,

line 705: 

line 706: # Get all diagnostics from the LSP server for a particular line in a file

line 707: export def GetDiagsByLine(bnr: number, lnum: number, lspserver: dict<any> = null_dict): list<dict<any>>

line 735: 

line 736: # Utility function to do the actual jump

line 737: def JumpDiag(diag: dict<any>)

line 747: 

line 748: # jump to the next/previous/first diagnostic message in the current buffer

line 749: export def LspDiagsJump(which: string, a_count: number = 0): void

line 822: 

line 823: # Return the sorted diagnostics for buffer "bnr".  Default is the current

line 824: # buffer.  A copy of the diagnostics is returned so that the caller can modify

line 825: # the diagnostics.

line 826: export def GetDiagsForBuf(bnr: number = bufnr()): list<dict<any>>

line 834: 

line 835: # Return the diagnostic text from the LSP server for the current mouse line to

line 836: # display in a balloon

line 837: def g:LspDiagExpr(): any

line 866: 

line 867: # Track the current diagnostics auto highlight enabled/disabled state.  Used

line 868: # when the "autoHighlightDiags" option value is changed.

line 869: var save_autoHighlightDiags = opt.lspOptions.autoHighlightDiags

line 870: var save_highlightDiagInline = opt.lspOptions.highlightDiagInline

line 871: var save_showDiagWithSign = opt.lspOptions.showDiagWithSign

line 872: var save_showDiagWithVirtualText = opt.lspOptions.showDiagWithVirtualText

line 875: export def DiagsHighlightEnable()

line 884: 

line 885: # Disable the LSP diagnostics highlighting in all the buffers

line 886: export def DiagsHighlightDisable()

line 896: 

line 897: # Toggle the LSP diagnostics highlighting in all the buffers

line 898: export def DiagsHighlightToggle()

line 905: 

line 906: # Some options are changed.  If 'autoHighlightDiags' option is changed, then

line 907: # either enable or disable diags auto highlight.

line 908: export def LspDiagsOptionsChanged()

line 928: 

line 929: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/diag.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
line 9: import './textedit.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/textedit.vim"
line 1: vim9script

line 2: 

line 3: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: def Edit_sort_func(a: dict<any>, b: dict<any>): number

line 22: 

line 23: # Replaces text in a range with new text.

line 24: #

line 25: # CAUTION: Changes in-place!

line 26: #

line 27: # 'lines': Original list of strings

line 28: # 'A': Start position; [line, col]

line 29: # 'B': End position [line, col]

line 30: # 'new_lines' A list of strings to replace the original

line 31: #

line 32: # returns the modified 'lines'

line 33: def Set_lines(lines: list<string>, A: list<number>, B: list<number>,

line 98: 

line 99: # Apply set of text edits to the specified buffer

line 100: # The text edit logic is ported from the Neovim lua implementation

line 101: export def ApplyTextEdits(bnr: number, text_edits: list<dict<any>>): void

line 211: 

line 212: # interface TextDocumentEdit

line 213: def ApplyTextDocumentEdit(textDocEdit: dict<any>)

line 221: 

line 222: # interface CreateFile

line 223: # Create the "createFile.uri" file

line 224: def FileCreate(createFile: dict<any>)

line 239: 

line 240: # interface DeleteFile

line 241: # Delete the "deleteFile.uri" file

line 242: def FileDelete(deleteFile: dict<any>)

line 266: 

line 267: # interface RenameFile

line 268: # Rename file "renameFile.oldUri" to "renameFile.newUri"

line 269: def FileRename(renameFile: dict<any>)

line 283: 

line 284: # interface WorkspaceEdit

line 285: export def ApplyWorkspaceEdit(workspaceEdit: dict<any>)

line 320: 

line 321: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/textedit.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
line 12: export def ProcessReply(lspserver: dict<any>, req: dict<any>, reply: dict<any>): void

line 15: 

line 16: # process a diagnostic notification message from the LSP server

line 17: # Notification: textDocument/publishDiagnostics

line 18: # Param: PublishDiagnosticsParams

line 19: def ProcessDiagNotif(lspserver: dict<any>, reply: dict<any>): void

line 23: 

line 24: # Convert LSP message type to a string

line 25: def LspMsgTypeToString(lspMsgType: number): string

line 33: 

line 34: # process a show notification message from the LSP server

line 35: # Notification: window/showMessage

line 36: # Param: ShowMessageParams

line 37: def ProcessShowMsgNotif(lspserver: dict<any>, reply: dict<any>)

line 54: 

line 55: # process a log notification message from the LSP server

line 56: # Notification: window/logMessage

line 57: # Param: LogMessageParams

line 58: def ProcessLogMsgNotif(lspserver: dict<any>, reply: dict<any>)

line 63: 

line 64: # process the log trace notification messages

line 65: # Notification: $/logTrace

line 66: # Param: LogTraceParams

line 67: def ProcessLogTraceNotif(lspserver: dict<any>, reply: dict<any>)

line 70: 

line 71: # process unsupported notification messages

line 72: def ProcessUnsupportedNotif(lspserver: dict<any>, reply: dict<any>)

line 75: 

line 76: # Dict to process telemetry notification messages only once per filetype

line 77: var telemetryProcessed: dict<bool> = {}

line 79: def ProcessUnsupportedNotifOnce(lspserver: dict<any>, reply: dict<any>)

line 85: 

line 86: # process notification messages from the LSP server

line 87: export def ProcessNotif(lspserver: dict<any>, reply: dict<any>): void

line 146: 

line 147: # process the workspace/applyEdit LSP server request

line 148: # Request: "workspace/applyEdit"

line 149: # Param: ApplyWorkspaceEditParams

line 150: def ProcessApplyEditReq(lspserver: dict<any>, request: dict<any>)

line 163: 

line 164: # process the workspace/workspaceFolders LSP server request

line 165: # Request: "workspace/workspaceFolders"

line 166: # Param: none

line 167: def ProcessWorkspaceFoldersReq(lspserver: dict<any>, request: dict<any>)

line 180: 

line 181: # process the workspace/configuration LSP server request

line 182: # Request: "workspace/configuration"

line 183: # Param: ConfigurationParams

line 184: def ProcessWorkspaceConfiguration(lspserver: dict<any>, request: dict<any>)

line 197: 

line 198: # process the window/workDoneProgress/create LSP server request

line 199: # Request: "window/workDoneProgress/create"

line 200: # Param: none

line 201: def ProcessWorkDoneProgressCreate(lspserver: dict<any>, request: dict<any>)

line 204: 

line 205: # process the window/showMessageRequest LSP server request

line 206: # Request: "window/showMessageRequest"

line 207: # Param: ShowMessageRequestParams

line 208: def ProcessShowMessageRequest(lspserver: dict<any>, req: dict<any>)

line 241: 

line 242: # process the client/registerCapability LSP server request

line 243: # Request: "client/registerCapability"

line 244: # Param: RegistrationParams

line 245: def ProcessClientRegisterCap(lspserver: dict<any>, request: dict<any>)

line 248: 

line 249: # process the client/unregisterCapability LSP server request

line 250: # Request: "client/unregisterCapability"

line 251: # Param: UnregistrationParams

line 252: def ProcessClientUnregisterCap(lspserver: dict<any>, request: dict<any>)

line 255: 

line 256: # process a request message from the server

line 257: export def ProcessRequest(lspserver: dict<any>, request: dict<any>)

line 292: 

line 293: # process one or more LSP server messages

line 294: export def ProcessMessages(lspserver: dict<any>): void

line 331: 

line 332: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/handlers.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 13: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 14: import './capabilities.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 14: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/capabilities.vim"
line 1: vim9script

line 2: 

line 3: # Functions for managing the LSP server and client capabilities

line 4: 

line 5: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: 

line 7: # Process the server capabilities

line 8: #   interface ServerCapabilities

line 9: export def ProcessServerCaps(lspserver: dict<any>, caps: dict<any>)

line 323: 

line 324: # Return all the LSP client capabilities

line 325: export def GetClientCaps(): dict<any>

line 502: 

line 503: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/capabilities.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 15: import './offset.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/offset.vim"
line 1: vim9script

line 2: 

line 3: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: export def EncodePosition(lspserver: dict<any>, bnr: number, pos: dict<number>)

line 35: 

line 36: # Decode the character offset in the LSP position "pos" using the encoding

line 37: # negotiated with the language server to a UTF-32 offset.

line 38: #

line 39: # Modifies in-place the UTF-8 or UTF-16 or UTF-32 offset in pos.character to a

line 40: # UTF-32 offset.

line 41: export def DecodePosition(lspserver: dict<any>, bnr: number, pos: dict<number>)

line 79: 

line 80: # Encode the start and end UTF-32 character offsets in the LSP range "range"

line 81: # to the encoding negotiated with the language server.

line 82: #

line 83: # Modifies in-place the UTF-32 offset in range.start.character and

line 84: # range.end.character to a UTF-8 or UTF-16 or UTF-32 offset.

line 85: export def EncodeRange(lspserver: dict<any>, bnr: number,

line 96: 

line 97: # Decode the start and end character offsets in the LSP range "range" to

line 98: # UTF-32 offsets.

line 99: #

line 100: # Modifies in-place the offset value in range.start.character and

line 101: # range.end.character to a UTF-32 offset.

line 102: export def DecodeRange(lspserver: dict<any>, bnr: number,

line 113: 

line 114: # Encode the range in the LSP position "location" to the encoding negotiated

line 115: # with the language server.

line 116: #

line 117: # Modifies in-place the UTF-32 offset in location.range to a UTF-8 or UTF-16

line 118: # or UTF-32 offset.

line 119: export def EncodeLocation(lspserver: dict<any>, location: dict<any>)

line 143: 

line 144: # Decode the range in the LSP location "location" to UTF-32.

line 145: #

line 146: # Modifies in-place the offset value in location.range to a UTF-32 offset.

line 147: export def DecodeLocation(lspserver: dict<any>, location: dict<any>)

line 167: 

line 168: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/offset.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 16: import './diag.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 17: import './selection.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 17: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/selection.vim"
line 1: vim9script

line 2: 

line 3: # Functions related to handling LSP range selection.

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: def SelectText(bnr: number, range: dict<dict<number>>)

line 19: 

line 20: # Process the range selection reply from LSP server and start a new selection

line 21: export def SelectionStart(lspserver: dict<any>, sel: list<dict<any>>)

line 33: 

line 34: # Locate the range in the LSP reply at a specified level

line 35: def GetSelRangeAtLevel(selRange: dict<any>, level: number): dict<any>

line 49: 

line 50: # Returns true if the current visual selection matches a range in the

line 51: # selection reply from LSP.

line 52: def SelectionFromLSP(range: dict<any>, startpos: list<number>, endpos: list<number>): bool

line 60: 

line 61: # Expand or Shrink the current selection or start a new one.

line 62: export def SelectionModify(lspserver: dict<any>, expand: bool)

line 106: 

line 107: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/selection.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 18: import './symbol.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 18: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim"
line 1: vim9script

line 2: 

line 3: # Functions for dealing with symbols.

line 4: #   - LSP symbol menu and for searching symbols across the workspace.

line 5: #   - show locations

line 6: #   - jump to a symbol definition, declaration, type definition or

line 7: #     implementation

line 8: 

line 9: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 10: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 11: import './outline.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 11: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/outline.vim"
line 1: vim9script

line 2: 

line 3: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 4: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 5: 

line 6: # jump to a symbol selected in the outline window

line 7: def OutlineJumpToSymbol()

line 52: 

line 53: # Skip refreshing the outline window. Used to prevent recursive updates to the

line 54: # outline window

line 55: var skipRefresh: bool = false

line 57: export def SkipOutlineRefresh(): bool

line 60: 

line 61: def AddSymbolText(bnr: number,

line 96: 

line 97: # update the symbols displayed in the outline window

line 98: export def UpdateOutlineWindow(fname: string,

line 146: 

line 147: def OutlineHighlightCurrentSymbol()

line 212: 

line 213: # when the outline window is closed, do the cleanup

line 214: def OutlineCleanup()

line 220: 

line 221: # open the symbol outline window

line 222: export def OpenOutlineWindow(cmdmods: string, winsize: number)

line 303: 

line 304: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/outline.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim
line 15: export def InitOnce()

line 30: 

line 31: # Handle keys pressed when the workspace symbol popup menu is displayed

line 32: def FilterSymbols(lspserver: dict<any>, popupID: number, key: string): bool

line 91: 

line 92: # Jump to the location of a symbol selected in the popup menu

line 93: def JumpToWorkspaceSymbol(cmdmods: string, popupID: number, result: number): void

line 152: 

line 153: # display a list of symbols from the workspace

line 154: def ShowSymbolMenu(lspserver: dict<any>, query: string, cmdmods: string)

line 180: 

line 181: # Convert a file name to <filename> (<dirname>) format.

line 182: # Make sure the popup doesn't occupy the entire screen by reducing the width.

line 183: def MakeMenuName(popupWidth: number, fname: string): string

line 201: 

line 202: # process the 'workspace/symbol' reply from the LSP server

line 203: # Result: SymbolInformation[] | null

line 204: export def WorkspaceSymbolPopup(lspserver: dict<any>, query: string,

line 242: 

line 243: # map the LSP symbol kind number to string

line 244: export def SymbolKindToName(symkind: number): string

line 279: 

line 280: def UpdatePeekFilePopup(lspserver: dict<any>, locations: list<dict<any>>)

line 327: 

line 328: def LocPopupFilter(lspserver: dict<any>, locations: list<dict<any>>,

line 342: 

line 343: def LocPopupCallback(lspserver: dict<any>, locations: list<dict<any>>,

line 354: 

line 355: # Display the locations in a popup menu.  Display the corresponding file in

line 356: # an another popup window.

line 357: def PeekLocations(lspserver: dict<any>, locations: list<dict<any>>,

line 413: 

line 414: export def ShowLocations(lspserver: dict<any>, locations: list<dict<any>>,

line 455: 

line 456: # Key filter callback function used for the symbol popup window.

line 457: # Vim doesn't close the popup window when the escape key is pressed.

line 458: # This is function supports that.

line 459: def SymbolFilterCB(lspserver: dict<any>, id: number, key: string): bool

line 467: 

line 468: # Display the file specified by LSP "LocationLink" in a popup window and

line 469: # highlight the range in "location".

line 470: def PeekSymbolLocation(lspserver: dict<any>, location: dict<any>)

line 519: 

line 520: # Jump to the definition, declaration or implementation of a symbol.

line 521: # Also, used to peek at the definition, declaration or implementation of a

line 522: # symbol.

line 523: export def GotoSymbol(lspserver: dict<any>, location: dict<any>,

line 533: 

line 534: # Process the LSP server reply message for a 'textDocument/definition' request

line 535: # and return a list of Dicts in a format accepted by the 'tagfunc' option.

line 536: export def TagFunc(lspserver: dict<any>,

line 557: 

line 558: # process SymbolInformation[]

line 559: def ProcessSymbolInfoTable(lspserver: dict<any>,

line 590: 

line 591: # process DocumentSymbol[]

line 592: def ProcessDocSymbolTable(lspserver: dict<any>,

line 626: 

line 627: # process the 'textDocument/documentSymbol' reply from the LSP server

line 628: # Open a symbols window and display the symbols as a tree

line 629: # Result: DocumentSymbol[] | SymbolInformation[] | null

line 630: export def DocSymbolOutline(lspserver: dict<any>, docSymbol: any, fname: string)

line 655: 

line 656: # Process the list of symbols (LSP interface "SymbolInformation") in

line 657: # "symbolInfoTable". For each symbol, create the name to display in the popup

line 658: # menu along with the symbol range and return the List.

line 659: def GetSymbolsInfoTable(lspserver: dict<any>,

line 682: 

line 683: # Process the list of symbols (LSP interface "DocumentSymbol") in

line 684: # "docSymbolTable". For each symbol, create the name to display in the popup

line 685: # menu along with the symbol range and return the List in "symbolTable"

line 686: def GetSymbolsDocSymbol(lspserver: dict<any>,

line 719: 

line 720: # Highlight the name and the range of lines for the symbol at symTbl[symIdx]

line 721: def SymbolHighlight(symTbl: list<dict<any>>, symIdx: number)

line 764: 

line 765: # Callback invoked when an item is selected in the symbol popup menu

line 766: #   "symTbl" - list of symbols

line 767: #   "symInputPopup" - Symbol search input popup window ID

line 768: #   "save_curpos" - Cursor position before invoking the symbol search.  If the

line 769: #^I^I    symbol search is canceled, restore the cursor to this

line 770: #^I^I    position.

line 771: def SymbolMenuItemSelected(symPopupMenu: number,

line 801: 

line 802: # Key filter function for the symbol popup menu.

line 803: def SymbolMenuFilterKey(symPopupMenu: number,

line 920: 

line 921: # Display the symbols popup menu

line 922: def SymbolPopupMenu(symbolTable: list<dict<any>>)

line 989: 

line 990: # process the 'textDocument/documentSymbol' reply from the LSP server

line 991: # Result: DocumentSymbol[] | SymbolInformation[] | null

line 992: # Display the symbols in a popup window and jump to the selected symbol

line 993: export def DocSymbolPopup(lspserver: dict<any>, docSymbol: any, fname: string)

line 1013: 

line 1014: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/symbol.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 19: import './textedit.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 20: import './completion.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 20: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim"
line 1: vim9script

line 2: 

line 3: # LSP completion related functions

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: import './textedit.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: import './snippet.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/snippet.vim"
line 1: vim9script

line 2: 

line 3: # Snippet support

line 4: 

line 5: # Integration with the UltiSnips plugin

line 6: export def CompletionUltiSnips(prefix: string, items: list<dict<any>>)

line 30: 

line 31: # Integration with the vim-vsnip plugin

line 32: export def CompletionVsnip(items: list<dict<any>>)

line 81: 

line 82: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/snippet.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
line 10: import './codeaction.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 10: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codeaction.vim"
line 1: vim9script

line 2: 

line 3: # Functions related to handling LSP code actions to fix diagnostics.

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './textedit.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: 

line 9: var CommandHandlers: dict<func>

line 10: 

line 11: export def RegisterCmdHandler(cmd: string, Handler: func)

line 14: 

line 15: export def DoCommand(lspserver: dict<any>, cmd: dict<any>)

line 27: 

line 28: # Apply the code action selected by the user.

line 29: export def HandleCodeAction(lspserver: dict<any>, selAction: dict<any>)

line 50: 

line 51: # Process the list of code actions returned by the LSP server, ask the user to

line 52: # choose one action from the list and then apply it.

line 53: # If "query" is a number, then apply the corresponding action in the list.

line 54: # If "query" is a regular expression starting with "/", then apply the action

line 55: # matching the search string in the list.

line 56: # If "query" is a regular string, then apply the action matching the string.

line 57: # If "query" is an empty string, then if the "usePopupInCodeAction" option is

line 58: # configured by the user, then display the list of items in a popup menu.

line 59: # Otherwise display the items in an input list and prompt the user to select

line 60: # an action.

line 61: export def ApplyCodeAction(lspserver: dict<any>, actionlist: list<dict<any>>, query: string): void

line 134: 

line 135: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codeaction.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
line 13: var ftypeOmniCtrlMap: dict<bool> = {}

line 15: var defaultKinds: dict<string> = {

line 46: def LspOmniComplEnabled(ftype: string): bool

line 49: 

line 50: # Enables or disables omni-completion for filetype "fype"

line 51: export def OmniComplSet(ftype: string, enabled: bool)

line 54: 

line 55: # Map LSP complete item kind to a character

line 56: def LspCompleteItemKindChar(kind: number): string

line 102: 

line 103: # Remove all the snippet placeholders from "str" and return the value.

line 104: # Based on a similar function in the vim-lsp plugin.

line 105: def MakeValidWord(str_arg: string): string

line 117: 

line 118: # add completion from current buf

line 119: def CompletionFromBuffer(items: list<dict<any>>)

line 146: 

line 147: # process the 'textDocument/completion' reply from the LSP server

line 148: # Result: CompletionItem[] | CompletionList | null

line 149: export def CompletionReply(lspserver: dict<any>, cItems: any)

line 346: 

line 347: # Check if completion item is selected

line 348: def CheckCompletionItemSel(label: string): bool

line 362: 

line 363: # Process the completion documentation

line 364: def ShowCompletionDocumentation(cItem: any)

line 439: 

line 440: # process the 'completionItem/resolve' reply from the LSP server

line 441: # Result: CompletionItem

line 442: export def CompletionResolveReply(lspserver: dict<any>, cItem: any)

line 445: 

line 446: # Return trigger kind and trigger char. If completion trigger is not a keyword

line 447: # and not one of the triggerCharacters, return -1 for triggerKind.

line 448: def GetTriggerAttributes(lspserver: dict<any>): list<any>

line 467: 

line 468: 

line 469: # omni complete handler

line 470: def g:LspOmniFunc(findstart: number, base: string): any

line 535: 

line 536: # For plugins that implement async completion this function indicates if

line 537: # omnifunc is waiting for LSP response.

line 538: def g:LspOmniCompletePending(): bool

line 542: 

line 543: # Insert mode completion handler. Used when 24x7 completion is enabled

line 544: # (default).

line 545: def LspComplete()

line 562: 

line 563: # Lazy complete documentation handler

line 564: def LspResolve()

line 579: 

line 580: # If the completion popup documentation window displays "markdown" content,

line 581: # then set the 'filetype' to "lspgfm".

line 582: def LspSetPopupFileType()

line 601: 

line 602: # complete done handler (LSP server-initiated actions after completion)

line 603: def LspCompleteDone(bnr: number)

line 636: 

line 637: # Initialize buffer-local completion options and autocmds

line 638: export def BufferInit(lspserver: dict<any>, bnr: number, ftype: string)

line 698: 

line 699: # Buffer "bnr" is loaded in a window.  If omni-completion is enabled for this

line 700: # buffer, then set the 'omnifunc' option.

line 701: export def BufferLoadedInWin(bnr: number)

line 707: 

line 708: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/completion.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 21: import './hover.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 21: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/hover.vim"
line 1: vim9script

line 2: 

line 3: # Functions related to displaying hover symbol information.

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: 

line 8: # Util used to compute the hoverText from textDocument/hover reply

line 9: def GetHoverText(lspserver: dict<any>, hoverResult: any): list<any>

line 72: 

line 73: # Key filter function for the hover popup window.

line 74: # Only keys to scroll the popup window are supported.

line 75: def HoverWinFilterKey(hoverWin: number, key: string): bool

line 100: 

line 101: # process the 'textDocument/hover' reply from the LSP server

line 102: # Result: Hover | null

line 103: export def HoverReply(lspserver: dict<any>, hoverResult: any, cmdmods: string): void

line 136: 

line 137: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/hover.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 22: import './signature.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 22: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/signature.vim"
line 1: vim9script

line 2: 

line 3: # Functions related to handling LSP symbol signature help.

line 4: 

line 5: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: 

line 9: # close the signature popup window

line 10: def CloseSignaturePopup(lspserver: dict<any>)

line 16: 

line 17: def CloseCurBufSignaturePopup()

line 25: 

line 26: # Show the signature using "textDocument/signatureHelp" LSP method

line 27: # Invoked from an insert-mode mapping, so return an empty string.

line 28: def g:LspShowSignature(): string

line 39: 

line 40: export def InitOnce()

line 43: 

line 44: # Initialize the signature triggers for the current buffer

line 45: export def BufferInit(lspserver: dict<any>)

line 68: 

line 69: # process the 'textDocument/signatureHelp' reply from the LSP server and

line 70: # display the symbol signature help.

line 71: # Result: SignatureHelp | null

line 72: export def SignatureHelp(lspserver: dict<any>, sighelp: any): void

line 144: 

line 145: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/signature.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 23: import './codeaction.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 24: import './codelens.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 24: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codelens.vim"
line 1: vim9script

line 2: 

line 3: import './codeaction.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: export def ProcessCodeLens(lspserver: dict<any>, bnr: number, codeLensItems: list<dict<any>>)

line 31: 

line 32: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/codelens.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 25: import './callhierarchy.vim' as callhier

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 25: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/callhierarchy.vim"
line 1: vim9script

line 2: 

line 3: # Functions for dealing with call hierarchy (incoming/outgoing calls)

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: 

line 8: # Jump to the location of the symbol under the cursor in the call hierarchy

line 9: # tree window.

line 10: def CallHierarchyItemJump()

line 14: 

line 15: # Refresh the call hierarchy tree for the symbol at index "idx".

line 16: def CallHierarchyTreeItemRefresh(idx: number)

line 53: 

line 54: # Open the call hierarchy tree item under the cursor

line 55: def CallHierarchyTreeItemOpen()

line 58: 

line 59: # Refresh the entire call hierarchy tree

line 60: def CallHierarchyTreeRefreshCmd()

line 65: 

line 66: # Display the incoming call hierarchy tree

line 67: def CallHierarchyTreeIncomingCmd()

line 73: 

line 74: # Display the outgoing call hierarchy tree

line 75: def CallHierarchyTreeOutgoingCmd()

line 81: 

line 82: # Close the call hierarchy tree item under the cursor

line 83: def CallHierarchyTreeItemClose()

line 90: 

line 91: # Recursively add the call hierarchy items to w:LspCallHierItemMap

line 92: def CallHierarchyTreeItemShow(incoming: bool, treeItem: dict<any>, pfx: string)

line 110: 

line 111: def CallHierarchyTreeRefresh()

line 120: 

line 121: def CallHierarchyTreeShow(incoming: bool, prepareItem: dict<any>,

line 161: 

line 162: export def IncomingCalls(lspserver: dict<any>)

line 177: 

line 178: export def OutgoingCalls(lspserver: dict<any>)

line 193: 

line 194: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/callhierarchy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 26: import './typehierarchy.vim' as typehier

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 26: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/typehierarchy.vim"
line 1: vim9script

line 2: 

line 3: # Functions for dealing with type hierarchy (super types/sub types)

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './symbol.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 13: def TypeTreeGenerate(isSuper: bool, typeHier: dict<any>, pfx_arg: string,

line 56: 

line 57: # Display a popup with the file containing a type and highlight the line and

line 58: # the type name.

line 59: def UpdateTypeHierFileInPopup(lspserver: dict<any>, typeUriMap: list<dict<any>>)

line 102: 

line 103: def TypeHierPopupFilter(lspserver: dict<any>, typeUriMap: list<dict<any>>,

line 119: 

line 120: def TypeHierPopupCallback(lspserver: dict<any>, typeUriMap: list<dict<any>>,

line 137: 

line 138: # Show the super or sub type hierarchy items "types" as a tree in a popup

line 139: # window

line 140: export def ShowTypeHierarchy(lspserver: dict<any>, isSuper: bool, types: dict<any>)

line 173: 

line 174: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/typehierarchy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 27: import './inlayhints.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 27: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/inlayhints.vim"
line 1: vim9script

line 2: 

line 3: # Functions for dealing with inlay hints

line 4: 

line 5: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: 

line 9: # Initialize the highlight group and the text property type used for

line 10: # inlay hints.

line 11: export def InitOnce()

line 24: 

line 25: # Clear all the inlay hints text properties in the current buffer

line 26: def InlayHintsClear(bnr: number)

line 30: 

line 31: # LSP inlay hints reply message handler

line 32: export def InlayHintsReply(lspserver: dict<any>, bnr: number, inlayHints: any)

line 80: 

line 81: # Timer callback to display the inlay hints.

line 82: def InlayHintsTimerCb(lspserver: dict<any>, bnr: number, timerid: number)

line 86: 

line 87: # Update all the inlay hints.  A timer is used to throttle the updates.

line 88: def LspInlayHintsUpdate(bnr: number)

line 112: 

line 113: # Text is modified. Need to update the inlay hints.

line 114: def LspInlayHintsChanged(bnr: number)

line 117: 

line 118: # Trigger an update of the inlay hints in the current buffer.

line 119: export def LspInlayHintsUpdateNow(bnr: number)

line 123: 

line 124: # Stop updating the inlay hints.

line 125: def LspInlayHintsUpdateStop(bnr: number)

line 132: 

line 133: # Do buffer-local initialization for displaying inlay hints

line 134: export def BufferInit(lspserver: dict<any>, bnr: number)

line 181: 

line 182: # Track the current inlay hints enabled/disabled state.  Used when the

line 183: # "showInlayHints" option value is changed.

line 184: var save_showInlayHints = opt.lspOptions.showInlayHints

line 188: export def InlayHintsEnable()

line 208: 

line 209: # Disable inlay hints for the current Vim session.  Clear the inlay hints in

line 210: # all the buffers.

line 211: export def InlayHintsDisable()

line 224: 

line 225: # Toggle (enable or disable) inlay hints.

line 226: export def InlayHintsToggle()

line 233: 

line 234: # Some options are changed.  If 'showInlayHints' option is changed, then

line 235: # either enable or disable inlay hints.

line 236: export def LspInlayHintsOptionsChanged()

line 243: 

line 244: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/inlayhints.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 28: import './semantichighlight.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 28: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/semantichighlight.vim"
line 1: vim9script

line 2: 

line 3: # LSP semantic highlighting functions

line 4: 

line 5: import './offset.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 6: import './options.vim' as opt

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 7: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 8: 

line 9: # Map token type names to higlight group/text property type names

line 10: var TokenTypeMap: dict<string> = {

line 36: export def InitOnce()

line 68: 

line 69: def ParseSemanticTokenMods(lspserverTokenMods: list<string>, tokenMods: number): string

line 82: 

line 83: # Apply the edit operations in a semantic tokens delta update message

line 84: # (SemanticTokensDelta) from the language server.

line 85: #

line 86: # The previous list of tokens are stored in the buffer-local

line 87: # LspSemanticTokensData variable.  After applying the edits in

line 88: # semTokens.edits, the new set of tokens are returned in semTokens.data.

line 89: def ApplySemanticTokenEdits(bnr: number, semTokens: dict<any>)

line 119: 

line 120: # Process a list of semantic tokens and return the corresponding text

line 121: # properties for highlighting.

line 122: def ProcessSemanticTokens(lspserver: dict<any>, bnr: number, tokens: list<number>): dict<list<list<number>>>

line 185: 

line 186: # Parse the semantic highlight reply from the language server and update the

line 187: # text properties

line 188: export def UpdateTokens(lspserver: dict<any>, bnr: number, semTokens: dict<any>)

line 228: 

line 229: # Update the semantic highlighting for buffer "bnr"

line 230: def LspUpdateSemanticHighlight(bnr: number)

line 238: 

line 239: # Initialize the semantic highlighting for the buffer 'bnr'

line 240: export def BufferInit(lspserver: dict<any>, bnr: number)

line 263: 

line 264: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/semantichighlight.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
line 31: def Output_cb(lspserver: dict<any>, chan: channel, msg: any): void

line 38: 

line 39: # LSP server error output handler

line 40: def Error_cb(lspserver: dict<any>, chan: channel, emsg: string): void

line 43: 

line 44: # LSP server exit callback

line 45: def Exit_cb(lspserver: dict<any>, job: job, status: number): void

line 51: 

line 52: # Start a LSP server

line 53: #

line 54: def StartServer(lspserver: dict<any>, bnr: number): number

line 96: 

line 97: # process the "initialize" method reply from the LSP server

line 98: # Result: InitializeResult

line 99: def ServerInitReply(lspserver: dict<any>, initResult: dict<any>): void

line 156: 

line 157: # Request: "initialize"

line 158: # Param: InitializeParams

line 159: def InitServer(lspserver: dict<any>, bnr: number)

line 211: 

line 212: # Send a "initialized" notification to the language server

line 213: def SendInitializedNotif(lspserver: dict<any>)

line 218: 

line 219: # Request: shutdown

line 220: # Param: void

line 221: def ShutdownServer(lspserver: dict<any>): void

line 224: 

line 225: # Send a 'exit' notification to the language server

line 226: def ExitServer(lspserver: dict<any>): void

line 231: 

line 232: # Stop a LSP server

line 233: def StopServer(lspserver: dict<any>): number

line 261: 

line 262: # Set the language server trace level using the '$/setTrace' notification.

line 263: # Supported values for "traceVal" are "off", "messages" and "verbose".

line 264: def SetTrace(lspserver: dict<any>, traceVal: string)

line 270: 

line 271: # Log a debug message to the LSP server debug file

line 272: def TraceLog(lspserver: dict<any>, msg: string)

line 277: 

line 278: # Log an error message to the LSP server error file

line 279: def ErrorLog(lspserver: dict<any>, errmsg: string)

line 284: 

line 285: # Return the next id for a LSP server request message

line 286: def NextReqID(lspserver: dict<any>): number

line 291: 

line 292: # create a LSP server request message

line 293: def CreateRequest(lspserver: dict<any>, method: string): dict<any>

line 306: 

line 307: # create a LSP server response message

line 308: def CreateResponse(lspserver: dict<any>, req_id: number): dict<any>

line 315: 

line 316: # create a LSP server notification message

line 317: def CreateNotification(lspserver: dict<any>, notif: string): dict<any>

line 326: 

line 327: # send a response message to the server

line 328: def SendResponse(lspserver: dict<any>, request: dict<any>, result: any, error: dict<any>)

line 345: 

line 346: # Send a request message to LSP server

line 347: def SendMessage(lspserver: dict<any>, content: dict<any>): void

line 360: 

line 361: # Send a notification message to the language server

line 362: def SendNotification(lspserver: dict<any>, method: string, params: any = {})

line 367: 

line 368: # Translate an LSP error code into a readable string

line 369: def LspGetErrorMessage(errcode: number): string

line 386: 

line 387: # Process a LSP server response error and display an error message.

line 388: def ProcessLspServerError(method: string, responseError: dict<any>)

line 397: 

line 398: # Send a sync RPC request message to the LSP server and return the received

line 399: # reply.  In case of an error, an empty Dict is returned.

line 400: def Rpc(lspserver: dict<any>, method: string, params: any, handleError: bool = true): dict<any>

line 435: 

line 436: # LSP server asynchronous RPC callback

line 437: def AsyncRpcCb(lspserver: dict<any>, method: string, RpcCb: func, chan: channel, reply: dict<any>)

line 459: 

line 460: # Send a async RPC request message to the LSP server with a callback function.

line 461: # Returns the LSP message id.  This id can be used to cancel the RPC request

line 462: # (if needed).  Returns -1 on error.

line 463: def AsyncRpc(lspserver: dict<any>, method: string, params: any, Cbfunc: func): number

line 497: 

line 498: # Wait for a response message from the LSP server for the request "req"

line 499: # Waits for a maximum of 5 seconds

line 500: def WaitForResponse(lspserver: dict<any>, req: dict<any>)

line 509: 

line 510: # Returns true when the "lspserver" has "feature" enabled.

line 511: # By default, all the features of a lsp server are enabled.

line 512: def FeatureEnabled(lspserver: dict<any>, feature: string): bool

line 515: 

line 516: # Retrieve the Workspace configuration asked by the server.

line 517: # Request: workspace/configuration

line 518: def WorkspaceConfigGet(lspserver: dict<any>, configItem: dict<any>): dict<any>

line 534: 

line 535: # Update semantic highlighting for buffer "bnr"

line 536: # Request: textDocument/semanticTokens/full or

line 537: #^I   textDocument/semanticTokens/full/delta

line 538: def SemanticHighlightUpdate(lspserver: dict<any>, bnr: number)

line 572: 

line 573: # Send a "workspace/didChangeConfiguration" notification to the language

line 574: # server.

line 575: def SendWorkspaceConfig(lspserver: dict<any>)

line 580: 

line 581: # Send a file/document opened notification to the language server.

line 582: def TextdocDidOpen(lspserver: dict<any>, bnr: number, ftype: string): void

line 596: 

line 597: # Send a file/document closed notification to the language server.

line 598: def TextdocDidClose(lspserver: dict<any>, bnr: number): void

line 608: 

line 609: # Send a file/document change notification to the language server.

line 610: # Params: DidChangeTextDocumentParams

line 611: def TextdocDidChange(lspserver: dict<any>, bnr: number, start: number,

line 667: 

line 668: # Return the current cursor position as a LSP position.

line 669: # find_ident will search for a identifier in front of the cursor, just like

line 670: # CTRL-] and c_CTRL-R_CTRL-W does.

line 671: #

line 672: # LSP line and column numbers start from zero, whereas Vim line and column

line 673: # numbers start from one. The LSP column number is the character index in the

line 674: # line and not the byte index in the line.

line 675: def GetPosition(lspserver: dict<any>, find_ident: bool): dict<number>

line 699: 

line 700: # Return the current file name and current cursor position as a LSP

line 701: # TextDocumentPositionParams structure

line 702: def GetTextDocPosition(lspserver: dict<any>, find_ident: bool): dict<dict<any>>

line 708: 

line 709: # Get a list of completion items.

line 710: # Request: "textDocument/completion"

line 711: # Param: CompletionParams

line 712: def GetCompletion(lspserver: dict<any>, triggerKind_arg: number, triggerChar: string): void

line 733: 

line 734: # Get lazy properties for a completion item.

line 735: # Request: "completionItem/resolve"

line 736: # Param: CompletionItem

line 737: def ResolveCompletion(lspserver: dict<any>, item: dict<any>, sync: bool = false): dict<any>

line 755: 

line 756: # Jump to or peek a symbol location.

line 757: #

line 758: # Send 'msg' to a LSP server and process the reply.  'msg' is one of the

line 759: # following:

line 760: #   textDocument/definition

line 761: #   textDocument/declaration

line 762: #   textDocument/typeDefinition

line 763: #   textDocument/implementation

line 764: #

line 765: # Process the LSP server reply and jump to the symbol location.  Before

line 766: # jumping to the symbol location, save the current cursor position in the tag

line 767: # stack.

line 768: #

line 769: # If 'peekSymbol' is true, then display the symbol location in the preview

line 770: # window but don't jump to the symbol location.

line 771: #

line 772: # Result: Location | Location[] | LocationLink[] | null

line 773: def GotoSymbolLoc(lspserver: dict<any>, msg: string, peekSymbol: bool,

line 836: 

line 837: # Request: "textDocument/definition"

line 838: # Param: DefinitionParams

line 839: def GotoDefinition(lspserver: dict<any>, peek: bool, cmdmods: string, count: number)

line 850: 

line 851: # Request: "textDocument/declaration"

line 852: # Param: DeclarationParams

line 853: def GotoDeclaration(lspserver: dict<any>, peek: bool, cmdmods: string, count: number)

line 864: 

line 865: # Request: "textDocument/typeDefinition"

line 866: # Param: TypeDefinitionParams

line 867: def GotoTypeDef(lspserver: dict<any>, peek: bool, cmdmods: string, count: number)

line 878: 

line 879: # Request: "textDocument/implementation"

line 880: # Param: ImplementationParams

line 881: def GotoImplementation(lspserver: dict<any>, peek: bool, cmdmods: string, count: number)

line 892: 

line 893: # Request: "textDocument/switchSourceHeader"

line 894: # Param: TextDocumentIdentifier

line 895: # Clangd specific extension

line 896: def SwitchSourceHeader(lspserver: dict<any>)

line 918: 

line 919: # get symbol signature help.

line 920: # Request: "textDocument/signatureHelp"

line 921: # Param: SignatureHelpParams

line 922: def ShowSignature(lspserver: dict<any>): void

line 935: 

line 936: # Send a file/document saved notification to the language server

line 937: def DidSaveFile(lspserver: dict<any>, bnr: number): void

line 959: 

line 960: # get the hover information

line 961: # Request: "textDocument/hover"

line 962: # Param: HoverParams

line 963: def ShowHoverInfo(lspserver: dict<any>, cmdmods: string): void

line 977: 

line 978: # Request: "textDocument/references"

line 979: # Param: ReferenceParams

line 980: def ShowReferences(lspserver: dict<any>, peek: bool): void

line 1010: 

line 1011: # process the 'textDocument/documentHighlight' reply from the LSP server

line 1012: # Result: DocumentHighlight[] | null

line 1013: def DocHighlightReply(lspserver: dict<any>, docHighlightReply: any,

line 1053: 

line 1054: # Request: "textDocument/documentHighlight"

line 1055: # Param: DocumentHighlightParams

line 1056: def DocHighlight(lspserver: dict<any>, bnr: number, cmdmods: string): void

line 1073: 

line 1074: # Request: "textDocument/documentSymbol"

line 1075: # Param: DocumentSymbolParams

line 1076: def GetDocSymbols(lspserver: dict<any>, fname: string, showOutline: bool): void

line 1094: 

line 1095: # Request: "textDocument/formatting"

line 1096: # Param: DocumentFormattingParams

line 1097: # or

line 1098: # Request: "textDocument/rangeFormatting"

line 1099: # Param: DocumentRangeFormattingParams

line 1100: def TextDocFormat(lspserver: dict<any>, fname: string, rangeFormat: bool,

line 1165: 

line 1166: # Request: "textDocument/prepareCallHierarchy"

line 1167: def PrepareCallHierarchy(lspserver: dict<any>): dict<any>

line 1192: 

line 1193: # Request: "callHierarchy/incomingCalls"

line 1194: def IncomingCalls(lspserver: dict<any>, fname: string)

line 1203: 

line 1204: def GetIncomingCalls(lspserver: dict<any>, item_arg: dict<any>): any

line 1226: 

line 1227: # Request: "callHierarchy/outgoingCalls"

line 1228: def OutgoingCalls(lspserver: dict<any>, fname: string)

line 1237: 

line 1238: def GetOutgoingCalls(lspserver: dict<any>, item_arg: dict<any>): any

line 1260: 

line 1261: # Request: "textDocument/inlayHint"

line 1262: # Inlay hints.

line 1263: def InlayHintsShow(lspserver: dict<any>, bnr: number)

line 1305: 

line 1306: def DecodeTypeHierarchy(lspserver: dict<any>, isSuper: bool, typeHier: dict<any>)

line 1327: 

line 1328: # Request: "textDocument/typehierarchy"

line 1329: # Support the clangd version of type hierarchy retrieval method.

line 1330: # The method described in the LSP 3.17.0 standard is not supported as clangd

line 1331: # doesn't support that method.

line 1332: def TypeHierarchy(lspserver: dict<any>, direction: number)

line 1358: 

line 1359: # Decode the ranges in "WorkspaceEdit"

line 1360: def DecodeWorkspaceEdit(lspserver: dict<any>, workspaceEdit: dict<any>)

line 1394: 

line 1395: # Request: "textDocument/rename"

line 1396: # Param: RenameParams

line 1397: def RenameSymbol(lspserver: dict<any>, newName: string)

line 1422: 

line 1423: # Decode the range in "CodeAction"

line 1424: def DecodeCodeAction(lspserver: dict<any>, actionList: list<dict<any>>)

line 1435: 

line 1436: # Request: "textDocument/codeAction"

line 1437: # Param: CodeActionParams

line 1438: def CodeAction(lspserver: dict<any>, fname_arg: string, line1: number,

line 1488: 

line 1489: # Request: "textDocument/codeLens"

line 1490: # Param: CodeLensParams

line 1491: def CodeLens(lspserver: dict<any>, fname: string)

line 1517: 

line 1518: # Request: "codeLens/resolve"

line 1519: # Param: CodeLens

line 1520: def ResolveCodeLens(lspserver: dict<any>, bnr: number,

line 1544: 

line 1545: # List project-wide symbols matching query string

line 1546: # Request: "workspace/symbol"

line 1547: # Param: WorkspaceSymbolParams

line 1548: def WorkspaceQuerySymbols(lspserver: dict<any>, query: string, firstCall: bool, cmdmods: string = '')

line 1587: 

line 1588: # Add a workspace folder to the language server.

line 1589: def AddWorkspaceFolder(lspserver: dict<any>, dirName: string): void

line 1610: 

line 1611: # Remove a workspace folder from the language server.

line 1612: def RemoveWorkspaceFolder(lspserver: dict<any>, dirName: string): void

line 1634: 

line 1635: def DecodeSelectionRange(lspserver: dict<any>, bnr: number, selRange: dict<any>)

line 1641: 

line 1642: # select the text around the current cursor location

line 1643: # Request: "textDocument/selectionRange"

line 1644: # Param: SelectionRangeParams

line 1645: def SelectionRange(lspserver: dict<any>, fname: string)

line 1680: 

line 1681: # Expand the previous selection or start a new one

line 1682: def SelectionExpand(lspserver: dict<any>)

line 1691: 

line 1692: # Shrink the previous selection or start a new one

line 1693: def SelectionShrink(lspserver: dict<any>)

line 1702: 

line 1703: # fold the entire document

line 1704: # Request: "textDocument/foldingRange"

line 1705: # Param: FoldingRangeParams

line 1706: def FoldRange(lspserver: dict<any>, fname: string)

line 1743: 

line 1744: # process the 'workspace/executeCommand' reply from the LSP server

line 1745: # Result: any | null

line 1746: def WorkspaceExecuteReply(lspserver: dict<any>, execReply: any)

line 1749: 

line 1750: # Request the LSP server to execute a command

line 1751: # Request: workspace/executeCommand

line 1752: # Params: ExecuteCommandParams

line 1753: def ExecuteCommand(lspserver: dict<any>, cmd: dict<any>)

line 1763: 

line 1764: # Display the LSP server capabilities (received during the initialization

line 1765: # stage).

line 1766: def GetCapabilities(lspserver: dict<any>): list<string>

line 1776: 

line 1777: # Display the LSP server initialize request and result

line 1778: def GetInitializeRequest(lspserver: dict<any>): list<string>

line 1790: 

line 1791: # Store a log or trace message received from the language server.

line 1792: def AddMessage(lspserver: dict<any>, msgType: string, newMsg: string)

line 1802: 

line 1803: # Display the log messages received from the LSP server (window/logMessage)

line 1804: def GetMessages(lspserver: dict<any>): list<string>

line 1816: 

line 1817: # Send a 'textDocument/definition' request to the LSP server to get the

line 1818: # location where the symbol under the cursor is defined and return a list of

line 1819: # Dicts in a format accepted by the 'tagfunc' option.

line 1820: # Returns null if the LSP server doesn't support getting the location of a

line 1821: # symbol definition or the symbol is not defined.

line 1822: def TagFunc(lspserver: dict<any>, pat: string, flags: string, info: dict<any>): any

line 1853: 

line 1854: # Returns unique ID used for identifying the various servers

line 1855: var UniqueServerIdCounter = 0

line 1856: def GetUniqueServerId(): number

line 1860: 

line 1861: export def NewLspServer(serverParams: dict<any>): dict<any>

line 1985: 

line 1986: # vim: tabstop=8 shiftwidth=2 softtabstop=2

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lspserver.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim
line 14: import './util.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 15: import './buffer.vim' as buf

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 16: import './completion.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 17: import './textedit.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 18: import './diag.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 19: import './symbol.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 20: import './outline.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 21: import './signature.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 22: import './codeaction.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 23: import './inlayhints.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 24: import './semantichighlight.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 27: var LSPServers: list<dict<any>> = []

line 30: var ftypeServerMap: dict<list<dict<any>>> = {}

line 32: var lspInitializedOnce = false

line 34: def LspInitOnce()

line 56: 

line 57: # Returns the LSP servers for the a specific filetype. Based on how well there

line 58: # score, LSP servers with the same score are being returned.

line 59: # Returns an empty list if the servers is not found.

line 60: def LspGetServers(bnr: number, ftype: string): list<dict<any>>

line 90: 

line 91: # Add a LSP server for a filetype

line 92: def LspAddServer(ftype: string, lspsrv: dict<any>)

line 101: 

line 102: # Enable/disable the logging of the language server protocol messages

line 103: def ServerDebug(arg: string)

line 129: 

line 130: # Show information about all the LSP servers

line 131: export def ShowAllServers()

line 178: 

line 179: # Create a new window containing the buffer "bname" or if the window is

line 180: # already present then jump to it.

line 181: def OpenScratchWindow(bname: string)

line 196: 

line 197: # Show the status of the LSP server for the current buffer

line 198: def ShowServer(arg: string)

line 264: 

line 265: # Get LSP server running status for filetype "ftype"

line 266: # Return true if running, or false if not found or not running

line 267: export def ServerRunning(ftype: string): bool

line 279: 

line 280: # Go to a definition using "textDocument/definition" LSP request

line 281: export def GotoDefinition(peek: bool, cmdmods: string, count: number)

line 289: 

line 290: # Go to a declaration using "textDocument/declaration" LSP request

line 291: export def GotoDeclaration(peek: bool, cmdmods: string, count: number)

line 299: 

line 300: # Go to a type definition using "textDocument/typeDefinition" LSP request

line 301: export def GotoTypedef(peek: bool, cmdmods: string, count: number)

line 309: 

line 310: # Go to a implementation using "textDocument/implementation" LSP request

line 311: export def GotoImplementation(peek: bool, cmdmods: string, count: number)

line 319: 

line 320: # Switch source header using "textDocument/switchSourceHeader" LSP request

line 321: # (Clangd specifc extension)

line 322: export def SwitchSourceHeader()

line 330: 

line 331: # A buffer is saved. Send the "textDocument/didSave" LSP notification

line 332: def LspSavedFile(bnr: number)

line 352: 

line 353: # Called after leaving insert mode. Used to process diag messages (if any)

line 354: def LspLeftInsertMode(bnr: number)

line 363: 

line 364: # Add buffer-local autocmds when attaching a LSP server to a buffer

line 365: def AddBufLocalAutocmds(lspserver: dict<any>, bnr: number): void

line 391: 

line 392: # The LSP server with ID "lspserverId" is ready, initialize the LSP features

line 393: # for buffer "bnr".

line 394: def BufferInit(lspserverId: number, bnr: number): void

line 452: 

line 453: # A new buffer is opened. If LSP is supported for this buffer, then add it

line 454: export def AddFile(bnr: number): void

line 495: 

line 496: # Notify LSP server to remove a file

line 497: export def RemoveFile(bnr: number): void

line 510: 

line 511: # Buffer 'bnr' is loaded in a window, send the latest buffer contents to the

line 512: # language servers.

line 513: export def BufferLoadedInWin(bnr: number)

line 539: 

line 540: # Stop all the LSP servers

line 541: export def StopAllServers()

line 548: 

line 549: # Add all the buffers with 'filetype' set to "ftype" to the language server.

line 550: def AddBuffersToLsp(ftype: string)

line 558: 

line 559: # Restart the LSP server for the current buffer

line 560: def RestartServer()

line 587: 

line 588: # Add the LSP server for files with 'filetype' as "ftype".

line 589: def AddServerForFiltype(lspserver: dict<any>, ftype: string, omnicompl: bool)

line 597: 

line 598: # Register a LSP server for one or more file types

line 599: export def AddServer(serverList: list<dict<any>>)

line 726: 

line 727: # The LSP server is considered ready when the server capabilities are

line 728: # received ("initialize" LSP reply message)

line 729: export def ServerReady(): bool

line 748: 

line 749: # set the LSP server trace level for the current buffer

line 750: # Params: SetTraceParams

line 751: def ServerTraceSet(traceVal: string)

line 767: 

line 768: # Display the diagnostic messages from the LSP server for the current buffer

line 769: # in a quickfix list

line 770: export def ShowDiagnostics(): void

line 773: 

line 774: # Show the diagnostic message for the current line

line 775: export def LspShowCurrentDiag(atPos: bool)

line 778: 

line 779: # get the count of diagnostics in the current buffer

line 780: export def ErrorCount(): dict<number>

line 789: 

line 790: # jump to the next/previous/first diagnostic message in the current buffer

line 791: export def JumpToDiag(which: string, count: number = 0): void

line 794: 

line 795: # Display the hover message from the LSP server for the current cursor

line 796: # location

line 797: export def Hover(cmdmods: string)

line 805: 

line 806: # Enable or disable inlay hints

line 807: export def InlayHints(ctl: string)

line 818: 

line 819: # Command-line completion for the ":LspInlayHints" command

line 820: export def LspInlayHintsComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 824: 

line 825: # show symbol references

line 826: export def ShowReferences(peek: bool)

line 834: 

line 835: # highlight all the places where a symbol is referenced

line 836: def g:LspDocHighlight(bnr: number = bufnr(), cmdmods: string = '')

line 844: 

line 845: # clear the symbol reference highlight

line 846: def g:LspDocHighlightClear(bnr: number = bufnr())

line 861: 

line 862: def g:LspRequestDocSymbols()

line 879: 

line 880: # open a window and display all the symbols in a file (outline)

line 881: export def Outline(cmdmods: string, winsize: number)

line 895: 

line 896: # show all the symbols in a file in a popup menu

line 897: export def ShowDocSymbols()

line 910: 

line 911: # Format the entire file

line 912: export def TextDocFormat(range_args: number, line1: number, line2: number)

line 930: 

line 931: # TODO: Add support for textDocument.onTypeFormatting?

line 932: # Will this slow down Vim?

line 933: 

line 934: # Display all the locations where the current symbol is called from.

line 935: # Uses LSP "callHierarchy/incomingCalls" request

line 936: export def IncomingCalls()

line 944: 

line 945: # Display all the symbols used by the current symbol.

line 946: # Uses LSP "callHierarchy/outgoingCalls" request

line 947: export def OutgoingCalls()

line 955: 

line 956: # Display the type hierarchy for the current symbol.  Direction is 0 for

line 957: # sub types and 1 for super types.

line 958: export def TypeHierarchy(direction: number)

line 966: 

line 967: # Rename a symbol

line 968: # Uses LSP "textDocument/rename" request

line 969: export def Rename(a_newName: string)

line 989: 

line 990: # Perform a code action

line 991: # Uses LSP "textDocument/codeAction" request

line 992: export def CodeAction(line1: number, line2: number, query: string)

line 1001: 

line 1002: # Code lens

line 1003: # Uses LSP "textDocument/codeLens" request

line 1004: export def CodeLens()

line 1012: 

line 1013: # Perform a workspace wide symbol lookup

line 1014: # Uses LSP "workspace/symbol" request

line 1015: export def SymbolSearch(queryArg: string, cmdmods: string)

line 1032: 

line 1033: # Display the list of workspace folders

line 1034: export def ListWorkspaceFolders()

line 1040: 

line 1041: # Add a workspace folder. Default is to use the current folder.

line 1042: export def AddWorkspaceFolder(dirArg: string)

line 1062: 

line 1063: # Remove a workspace folder. Default is to use the current folder.

line 1064: export def RemoveWorkspaceFolder(dirArg: string)

line 1083: 

line 1084: # expand the previous selection or start a new selection

line 1085: export def SelectionExpand()

line 1093: 

line 1094: # shrink the previous selection or start a new selection

line 1095: export def SelectionShrink()

line 1103: 

line 1104: # fold the entire document

line 1105: export def FoldDocument()

line 1119: 

line 1120: # Enable diagnostic highlighting for all the buffers

line 1121: export def DiagHighlightEnable()

line 1124: 

line 1125: # Disable diagnostic highlighting for all the buffers

line 1126: export def DiagHighlightDisable()

line 1129: 

line 1130: # Function to use with the 'tagfunc' option.

line 1131: export def TagFunc(pat: string, flags: string, info: dict<any>): any

line 1139: 

line 1140: # Function to use with the 'formatexpr' option.

line 1141: export def FormatExpr(): number

line 1156: 

line 1157: export def RegisterCmdHandler(cmd: string, Handler: func)

line 1160: 

line 1161: # Command-line completion for the ":LspServer <cmd>" and ":LspDiag <cmd>" sub

line 1162: # commands

line 1163: def LspSubCmdComplete(cmds: list<string>, arglead: string, cmdline: string, cursorPos: number): list<string>

line 1177: 

line 1178: # Command-line completion for the ":LspDiag highlight" command

line 1179: def LspDiagHighlightComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1182: 

line 1183: # Command-line completion for the ":LspDiag" command

line 1184: export def LspDiagComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1209: 

line 1210: # ":LspDiag" command handler

line 1211: export def LspDiagCmd(args: string, cmdCount: number, force: bool)

line 1249: 

line 1250: # Command-line completion for the ":LspServer debug" command

line 1251: def LspServerDebugComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1255: 

line 1256: # Command-line completion for the ":LspServer show" command

line 1257: def LspServerShowComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1261: 

line 1262: # Command-line completion for the ":LspServer trace" command

line 1263: def LspServerTraceComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1267: 

line 1268: # Command-line completion for the ":LspServer" command

line 1269: export def LspServerComplete(arglead: string, cmdline: string, cursorPos: number): list<string>

line 1298: 

line 1299: # ":LspServer" command handler

line 1300: export def LspServerCmd(args: string)

line 1328: 

line 1329: # vim: tabstop=8 shiftwidth=2 softtabstop=2 noexpandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/lsp.vim
continuing in LspAddServer
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp)
fchdir() to previous dir
line 140: var rootDir = g:FindRootDirectory()

calling FindRootDirectory()

line 1:   return s:root()

calling <SNR>23_root()

line 1:   let dir = s:current()

calling <SNR>23_current()

line 1:   let fn = s:current_file()

calling <SNR>23_current_file()

line 1:   let fn = expand('%:p', 1)

line 2:   if fn =~ 'NERD_tree_\d\+$' | let fn = b:NERDTree.root.path.str().'/' | endif

line 2:  let fn = b:NERDTree.root.path.str().'/' | endif

line 2:  endif

line 3:   if fn[:5] == 'oil://' | let fn = fn[5:] | endif

line 3:  let fn = fn[5:] | endif

line 3:  endif

line 4:   if g:rooter_resolve_links | let fn = resolve(fn) | endif

line 4:  let fn = resolve(fn) | endif

line 4:  endif

line 5:   return fn

<SNR>23_current_file returning ''

continuing in <SNR>23_current

line 2:   if empty(fn) | return getcwd() | endif  " opening vim without a file

line 2:  return getcwd() | endif  " opening vim without a file

<SNR>23_current returning '/Users/piotr/Work/GitHub/wid'

continuing in <SNR>23_root

line 2: 

line 3:   let patterns = g:rooter_ignore      ? s:remove_ignored(g:rooter_patterns, dir, s:current_file())      : g:rooter_patterns

line 6: 

line 7:   " breadth-first search

line 8:   while 1

line 9:     for pattern in patterns

line 10:       if pattern[0] == '!'

line 11:         let [p, exclude] = [pattern[1:], 1]

line 12:       else

line 13:         let [p, exclude] = [pattern, 0]

line 14:       endif

line 15:       if s:match(dir, p)

calling <SNR>23_match('/Users/piotr/Work/GitHub/wid', '.git')

line 1:   if a:pattern[0] == '='

line 2:     return s:is(a:dir, a:pattern[1:])

line 3:   elseif a:pattern[0] == '^'

line 4:     return s:sub(a:dir, a:pattern[1:])

line 5:   elseif a:pattern[0] == '>'

line 6:     return s:child(a:dir, a:pattern[1:])

line 7:   else

line 8:     return s:has(a:dir, a:pattern)

calling <SNR>23_has('/Users/piotr/Work/GitHub/wid', '.git')

line 1:   " We do not want a:dir to be treated as a glob so escape any wildcards.

line 2:   " If this approach is problematic (e.g. on Windows), an alternative

line 3:   " might be to change directory to a:dir, call globpath() with just

line 4:   " a:identifier, then restore the working directory.

line 5:   return !empty(globpath(escape(a:dir, '?*[]'), a:identifier, 1))

<SNR>23_has returning #1

continuing in <SNR>23_match

<SNR>23_match returning #1

continuing in <SNR>23_root

line 16:         if exclude

line 17:           break

line 18:         else

line 19:           return dir

<SNR>23_root returning '/Users/piotr/Work/GitHub/wid'

continuing in FindRootDirectory

FindRootDirectory returning '/Users/piotr/Work/GitHub/wid'

continuing in /Users/piotr/.config/vim/init/lsp.vim

line 142: g:LspAddServer([{

line 149: g:LspAddServer([{

line 157: g:LspAddServer([{

line 165: g:LspAddServer([{

finished sourcing /Users/piotr/.config/vim/init/lsp.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 45: source ~/.config/vim/init/vimcomplete.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 45: sourcing "/Users/piotr/.config/vim/init/vimcomplete.vim"
line 1: vim9script

line 2: 

line 3: packadd friendly-snippets

Searching for "pack/*/start/friendly-snippets" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/friendly-snippets"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/friendly-snippets"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/friendly-snippets"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/friendly-snippets"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/friendly-snippets"
not found in 'packpath': "pack/*/start/friendly-snippets"
Searching for "pack/*/opt/friendly-snippets" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/friendly-snippets"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
line 3: augroup filetypedetect

line 3: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/friendly-snippets"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/friendly-snippets"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/friendly-snippets"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/friendly-snippets"
line 4: packadd vim-vsnip

Searching for "pack/*/start/vim-vsnip" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/vim-vsnip"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/vim-vsnip"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/vim-vsnip"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/vim-vsnip"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/vim-vsnip"
not found in 'packpath': "pack/*/start/vim-vsnip"
Searching for "pack/*/opt/vim-vsnip" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/vim-vsnip"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin)
fchdir() to previous dir
line 4: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim"
line 1: if exists('g:loaded_vsnip')

line 2:   finish

line 3: endif

line 4: let g:loaded_vsnip = 1

line 5: 

line 6: "

line 7: " variable

line 8: "

line 9: let g:vsnip_extra_mapping = get(g:, 'vsnip_extra_mapping', v:true)

line 10: let g:vsnip_deactivate_on = get(g:, 'vsnip_deactivate_on', g:vsnip#DeactivateOn.OutsideOfCurrentTabstop)

Searching for "autoload/vsnip.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vsnip.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload)
fchdir() to previous dir
line 10: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim"
line 1: let s:Session = vsnip#session#import()

Searching for "autoload/vsnip/session.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vsnip/session.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim"
line 1: let s:Snippet = vsnip#snippet#import()

Searching for "autoload/vsnip/snippet.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vsnip/snippet.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim"
line 1: let s:max_tabstop = 1000000

line 2: let s:Position = vital#vsnip#import('VS.LSP.Position')

Searching for "autoload/vital/vsnip.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/vsnip.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/vsnip.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/vsnip.vim"
line 1: let s:plugin_name = expand('<sfile>:t:r')

line 2: let s:vital_base_dir = expand('<sfile>:h')

line 3: let s:project_root = expand('<sfile>:h:h:h')

line 4: let s:is_vital_vim = s:plugin_name is# 'vital'

line 5: 

line 6: let s:loaded = {}

line 7: let s:cache_sid = {}

line 8: 

line 9: function! vital#{s:plugin_name}#new() abort

line 12: 

line 13: function! vital#{s:plugin_name}#import(...) abort

line 19: 

line 20: let s:Vital = {}

line 21: 

line 22: function! s:new(plugin_name) abort

line 27: 

line 28: function! s:vital_files() abort

line 36: let s:Vital.vital_files = function('s:vital_files')

line 37: 

line 38: function! s:import(name, ...) abort dict

line 61: let s:Vital.import = function('s:import')

line 62: 

line 63: function! s:load(...) abort dict

line 88: let s:Vital.load = function('s:load')

line 89: 

line 90: function! s:unload() abort dict

line 95: let s:Vital.unload = function('s:unload')

line 96: 

line 97: function! s:exists(name) abort dict

line 103: let s:Vital.exists = function('s:exists')

line 104: 

line 105: function! s:search(pattern) abort dict

line 110: let s:Vital.search = function('s:search')

line 111: 

line 112: function! s:plugin_name() abort dict

line 115: let s:Vital.plugin_name = function('s:plugin_name')

line 116: 

line 117: function! s:_self_vital_files() abort

line 123: 

line 124: function! s:_global_vital_files() abort

line 128: 

line 129: function! s:_extract_files(pattern, files) abort

line 135: 

line 136: function! s:_file2module(file) abort

line 141: 

line 142: " @param {string} name e.g. Data.List

line 143: function! s:_import(name) abort dict

line 166: let s:Vital._import = function('s:_import')

line 167: 

line 168: function! s:_format_throwpoint(throwpoint) abort

line 192: 

line 193: " @vimlint(EVL102, 1, l:_)

line 194: " @vimlint(EVL102, 1, l:__)

line 195: function! s:_get_func_info(name) abort

line 218: " @vimlint(EVL102, 0, l:__)

line 219: " @vimlint(EVL102, 0, l:_)

line 220: 

line 221: " s:_get_module() returns module object which has all script local functions.

line 222: function! s:_get_module(name) abort dict

line 230: 

line 231: function! s:_get_builtin_module(name) abort

line 234: 

line 235: if s:is_vital_vim

line 236:   " For vital.vim, we can use s:_get_builtin_module directly

line 237:   let s:Vital._get_module = function('s:_get_builtin_module')

line 238: else

line 239:   let s:Vital._get_module = function('s:_get_module')

line 240: endif

line 241: 

line 242: function! s:_import_func_name(plugin_name, module_name) abort

line 245: 

line 246: function! s:_module_sid(name) abort

line 264: 

line 265: function! s:_module_path(name) abort

line 268: 

line 269: function! s:_module_sid_base_dir() abort

line 272: 

line 273: function! s:_dot_to_sharp(name) abort

line 276: 

line 277: function! s:_source(path) abort

line 280: 

line 281: " @vimlint(EVL102, 1, l:_)

line 282: " @vimlint(EVL102, 1, l:__)

line 283: function! s:_sid(path, filter_pattern) abort

line 297: 

line 298: if filereadable(expand('<sfile>:r') . '.VIM') " is case-insensitive or not

line 299:   let s:_unify_path_cache = {}

line 300:   " resolve() is slow, so we cache results.

line 301:   " Note: On windows, vim can't expand path names from 8.3 formats.

line 302:   " So if getting full path via <sfile> and $HOME was set as 8.3 format,

line 303:   " vital load duplicated scripts. Below's :~ avoid this issue.

line 304:   function! s:_unify_path(path) abort

line 313: else

line 314:   function! s:_unify_path(path) abort

line 317: endif

line 318: 

line 319: " copied and modified from Vim.ScriptLocal

line 320: let s:SNR = join(map(range(len("\<SNR>")), '"[\\x" . printf("%0x", char2nr("\<SNR>"[v:val])) . "]"'), '')

line 321: function! s:sid2sfuncs(sid) abort

line 330: 

line 331: "" Return funcname of script local functions with SID

line 332: function! s:_sfuncname(sid, funcname) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/vsnip.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim
calling vital#vsnip#import('VS.LSP.Position')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

calling <SNR>50_new('vsnip')

line 1:   let base = deepcopy(s:Vital)

line 2:   let base._plugin_name = a:plugin_name

line 3:   return base

<SNR>50_new returning {'unload': function('<SNR>50_unload'),..., 'import': function('<SNR>50_import')}

continuing in vital#vsnip#import

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.Position')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Position')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.LSP.Position')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.LSP.Position')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.LSP.Position')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#LSP#Position'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#LSP#Position#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/LSP/Position.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/LSP/Position.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#LSP#Position#import() abort', printf("return map({'cursor': '', 'vim_to_lsp': '', 'lsp_to_vim': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>51__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>51__SID returning '51'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim

line 7: function! vital#_vsnip#VS#LSP#Position#import() abort^@return map({'cursor': '', 'vim_to_lsp': '', 'lsp_to_vim': ''}, "vital#_vsnip#function('<SNR>51_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: "

line 11: " cursor

line 12: "

line 13: function! s:cursor() abort

line 16: 

line 17: "

line 18: " vim_to_lsp

line 19: "

line 20: function! s:vim_to_lsp(expr, pos) abort

line 34: 

line 35: "

line 36: " lsp_to_vim

line 37: "

line 38: function! s:lsp_to_vim(expr, position) abort

line 45: 

line 46: "

line 47: " _get_buffer_line

line 48: "

line 49: function! s:_get_buffer_line(expr, lnum) abort

line 62: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#LSP#Position#import()

line 1: return map({'cursor': '', 'vim_to_lsp': '', 'lsp_to_vim': ''}, "vital#_vsnip#function('<SNR>51_' . v:key)")

Searching for "autoload/vital/_vsnip.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip.vim"
line 1: let s:_plugin_name = expand('<sfile>:t:r')

line 2: 

line 3: function! vital#{s:_plugin_name}#new() abort

line 6: 

line 7: function! vital#{s:_plugin_name}#function(funcname) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip.vim
continuing in vital#_vsnip#VS#LSP#Position#import
calling vital#_vsnip#function('<SNR>51_cursor')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>51_cursor')

continuing in vital#_vsnip#VS#LSP#Position#import

calling vital#_vsnip#function('<SNR>51_vim_to_lsp')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>51_vim_to_lsp')

continuing in vital#_vsnip#VS#LSP#Position#import

calling vital#_vsnip#function('<SNR>51_lsp_to_vim')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>51_lsp_to_vim')

continuing in vital#_vsnip#VS#LSP#Position#import

vital#_vsnip#VS#LSP#Position#import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50__get_module

:return {'cursor': function('<SNR>51_cursor'), 'vim_to_lsp': function('<SNR>51_vim_to_lsp'), 'lsp_to_vim': function('<SNR>51_lsp_to_vim')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'cursor': function('<SNR>51_cursor'), 'vim_to_lsp': function('<SNR>51_vim_to_lsp'), 'lsp_to_vim': function('<SNR>51_lsp_to_vim')} resumed

<SNR>50__get_module returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim

line 3: 

line 4: "

line 5: " import.

line 6: "

line 7: function! vsnip#snippet#import() abort

line 10: 

line 11: let s:Snippet = {}

line 12: 

line 13: "

line 14: " new.

line 15: "

line 16: function! s:Snippet.new(position, text) abort

line 30: 

line 31: "

line 32: " init.

line 33: "

line 34: " NOTE: Must not use the node range in this method.

line 35: "

line 36: function! s:Snippet.init() abort

line 93: 

line 94: "

line 95: " follow.

line 96: "

line 97: function! s:Snippet.follow(current_tabstop, diff) abort

line 182: 

line 183: "

line 184: " sync.

line 185: "

line 186: function! s:Snippet.sync() abort

line 227: 

line 228: "

line 229: " range.

line 230: "

line 231: function! s:Snippet.range() abort

line 237: 

line 238: "

line 239: " text.

line 240: "

line 241: function! s:Snippet.text() abort

line 244: 

line 245: "

line 246: " is_followable.

line 247: "

line 248: function! s:Snippet.is_followable(current_tabstop, diff) abort

line 262: 

line 263: "

line 264: " get_placeholder_nodes

line 265: "

line 266: function! s:Snippet.get_placeholder_nodes() abort

line 278: 

line 279: "

line 280: " get_placeholder_context_by_tabstop

line 281: "

line 282: function! s:Snippet.get_placeholder_context_by_tabstop(current_tabstop) abort

line 295: 

line 296: "

line 297: " get_next_jump_point.

line 298: "

line 299: function! s:Snippet.get_next_jump_point(current_tabstop) abort

line 327: 

line 328: "

line 329: " get_prev_jump_point.

line 330: "

line 331: function! s:Snippet.get_prev_jump_point(current_tabstop) abort

line 358: 

line 359: "

line 360: " normalize

line 361: "

line 362: " - merge adjacent text-nodes

line 363: "

line 364: function! s:Snippet.normalize() abort

line 378: 

line 379: "

line 380: " merge

line 381: "

line 382: function! s:Snippet.merge(tabstop, snippet) abort

line 412: 

line 413: "

line 414: " insert

line 415: "

line 416: function! s:Snippet.insert(position, nodes_to_insert) abort

line 459: 

line 460: "

line 461: " offset_to_position.

line 462: "

line 463: " @param offset 0-based index for snippet text.

line 464: " @return position buffer position

line 465: "

line 466: function! s:Snippet.offset_to_position(offset) abort

line 473: 

line 474: "

line 475: " position_to_offset.

line 476: "

line 477: " @param position buffer position

line 478: " @return 0-based index for snippet text.

line 479: "

line 480: function! s:Snippet.position_to_offset(position) abort

line 487: 

line 488: "

line 489: " traverse.

line 490: "

line 491: function! s:Snippet.traverse(node, callback) abort

line 503: function! s:traverse(node, callback, state, context) abort

line 540: 

line 541: "

line 542: " debug

line 543: "

line 544: function! s:Snippet.debug() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/snippet.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim
calling vsnip#snippet#import()

line 1:   return s:Snippet

vsnip#snippet#import returning {'init': function('2'), 'offset_to_pos..., 'position_to_offset': function('16')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim

line 2: let s:TextEdit = vital#vsnip#import('VS.LSP.TextEdit')

calling vital#vsnip#import('VS.LSP.TextEdit')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.TextEdit')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.TextEdit')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.LSP.TextEdit')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.LSP.TextEdit')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.LSP.TextEdit')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#LSP#TextEdit'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#LSP#TextEdit#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/LSP/TextEdit.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/LSP/TextEdit.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#LSP#TextEdit#import() abort', printf("return map({'_vital_depends': '', 'apply': '', '_vital_loaded': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>53__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>53__SID returning '53'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim

line 7: function! vital#_vsnip#VS#LSP#TextEdit#import() abort^@return map({'_vital_depends': '', 'apply': '', '_vital_loaded': ''}, "vital#_vsnip#function('<SNR>53_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: "

line 11: " _vital_loaded

line 12: "

line 13: function! s:_vital_loaded(V) abort

line 19: 

line 20: "

line 21: " _vital_depends

line 22: "

line 23: function! s:_vital_depends() abort

line 26: 

line 27: "

line 28: " apply

line 29: "

line 30: function! s:apply(path, text_edits) abort

line 42: 

line 43: "

line 44: " _substitute

line 45: "

line 46: function! s:_substitute(bufnr, text_edits, current_position) abort

line 83: 

line 84: "

line 85: " _fix_cursor_position

line 86: "

line 87: function! s:_fix_cursor_position(position, text_edit, lines) abort

line 101: 

line 102: "

line 103: " _normalize

line 104: "

line 105: function! s:_normalize(bufnr, text_edits) abort

line 112: 

line 113: "

line 114: " _range

line 115: "

line 116: function! s:_range(text_edits) abort

line 132: 

line 133: "

line 134: " _compare

line 135: "

line 136: function! s:_compare(text_edit1, text_edit2) abort

line 143: 

line 144: "

line 145: " _fix_text_edits

line 146: "

line 147: function! s:_fix_text_edits(bufnr, text_edits) abort

line 169: 

line 170: "

line 171: " _switch

line 172: "

line 173: function! s:_switch(path) abort

line 185: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#LSP#TextEdit#import()

line 1: return map({'_vital_depends': '', 'apply': '', '_vital_loaded': ''}, "vital#_vsnip#function('<SNR>53_' . v:key)")

calling vital#_vsnip#function('<SNR>53__vital_depends')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>53__vital_depends')

continuing in vital#_vsnip#VS#LSP#TextEdit#import

calling vital#_vsnip#function('<SNR>53_apply')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>53_apply')

continuing in vital#_vsnip#VS#LSP#TextEdit#import

calling vital#_vsnip#function('<SNR>53__vital_loaded')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>53__vital_loaded')

continuing in vital#_vsnip#VS#LSP#TextEdit#import

vital#_vsnip#VS#LSP#TextEdit#import returning {'_vital_depends': function('<SNR>53__...ed': function('<SNR>53__vital_loaded')}

continuing in <SNR>50__get_module

:return {'_vital_depends': function('<SNR>53__vital_depends'), 'apply': function('<SNR>53_apply'), '_vital_loaded': function('<SNR>53__vital_loaded')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'_vital_depends': function('<SNR>53__vital_depends'), 'apply': function('<SNR>53_apply'), '_vital_loaded': function('<SNR>53__vital_loaded')} resumed

<SNR>50__get_module returning {'_vital_depends': function('<SNR>53__...ed': function('<SNR>53__vital_loaded')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

calling vital#vsnip#new()

line 1:   return s:new(s:plugin_name)

calling <SNR>50_new('vsnip')

line 1:   let base = deepcopy(s:Vital)

line 2:   let base._plugin_name = a:plugin_name

line 3:   return base

<SNR>50_new returning {'unload': function('<SNR>50_unload'),..., 'import': function('<SNR>50_import')}

continuing in vital#vsnip#new

vital#vsnip#new returning {'unload': function('<SNR>50_unload'),..., 'import': function('<SNR>50_import')}

continuing in <SNR>50__import

calling <SNR>53__vital_loaded({'unload': function('<SNR>50_unload'),..., 'import': function('<SNR>50_import')})

line 1:   let s:Text = a:V.import('VS.LSP.Text')

calling <SNR>50_import('VS.LSP.Text')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Text')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.LSP.Text')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.LSP.Text')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.LSP.Text')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#LSP#Text'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#LSP#Text#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/LSP/Text.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/LSP/Text.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#LSP#Text#import() abort', printf("return map({'normalize_eol': '', 'split_by_eol': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>54__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>54__SID returning '54'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim

line 7: function! vital#_vsnip#VS#LSP#Text#import() abort^@return map({'normalize_eol': '', 'split_by_eol': ''}, "vital#_vsnip#function('<SNR>54_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: "

line 11: " normalize_eol

line 12: "

line 13: function! s:normalize_eol(text) abort

line 16: 

line 17: "

line 18: " split_by_eol

line 19: "

line 20: function! s:split_by_eol(text) abort

line 23: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#LSP#Text#import()

line 1: return map({'normalize_eol': '', 'split_by_eol': ''}, "vital#_vsnip#function('<SNR>54_' . v:key)")

calling vital#_vsnip#function('<SNR>54_normalize_eol')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>54_normalize_eol')

continuing in vital#_vsnip#VS#LSP#Text#import

calling vital#_vsnip#function('<SNR>54_split_by_eol')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>54_split_by_eol')

continuing in vital#_vsnip#VS#LSP#Text#import

vital#_vsnip#VS#LSP#Text#import returning {'normalize_eol': function('<SNR>54_no...eol': function('<SNR>54_split_by_eol')}

continuing in <SNR>50__get_module

:return {'normalize_eol': function('<SNR>54_normalize_eol'), 'split_by_eol': function('<SNR>54_split_by_eol')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'normalize_eol': function('<SNR>54_normalize_eol'), 'split_by_eol': function('<SNR>54_split_by_eol')} resumed

<SNR>50__get_module returning {'normalize_eol': function('<SNR>54_no...eol': function('<SNR>54_split_by_eol')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'normalize_eol': function('<SNR>54_no...eol': function('<SNR>54_split_by_eol')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'normalize_eol': function('<SNR>54_no...eol': function('<SNR>54_split_by_eol')}

continuing in <SNR>53__vital_loaded

line 2:   let s:Position = a:V.import('VS.LSP.Position')

calling <SNR>50_import('VS.LSP.Position')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Position')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

<SNR>50__import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>53__vital_loaded

line 3:   let s:Buffer = a:V.import('VS.Vim.Buffer')

calling <SNR>50_import('VS.Vim.Buffer')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.Vim.Buffer')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.Vim.Buffer')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.Vim.Buffer')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.Vim.Buffer')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#Vim#Buffer'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#Vim#Buffer#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/Vim/Buffer.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/Vim/Buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#Vim#Buffer#import() abort', printf("return map({'add': '', 'do': '', 'create': '', 'get_line_count': '', 'pseudo': '', 'ensure': '', 'load': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>55__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>55__SID returning '55'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim

line 7: function! vital#_vsnip#VS#Vim#Buffer#import() abort^@return map({'add': '', 'do': '', 'create': '', 'get_line_count': '', 'pseudo': '', 'ensure': '', 'load': ''}, "vital#_vsnip#function('<SNR>55_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: let s:Do = { -> {} }

line 11: 

line 12: let g:___VS_Vim_Buffer_id = get(g:, '___VS_Vim_Buffer_id', 0)

line 13: 

line 14: "

line 15: " get_line_count

line 16: "

line 17: if exists('*nvim_buf_line_count')

line 18:   function! s:get_line_count(bufnr) abort

line 21: elseif has('patch-8.2.0019')

line 22:   function! s:get_line_count(bufnr) abort

line 25: else

line 26:   function! s:get_line_count(bufnr) abort

line 32: endif

line 33: 

line 34: "

line 35: " create

line 36: "

line 37: function! s:create(...) abort

line 45: 

line 46: "

line 47: " ensure

line 48: "

line 49: function! s:ensure(expr) abort

line 58: 

line 59: "

line 60: " add

line 61: "

line 62: if exists('*bufadd')

line 63:   function! s:add(name) abort

line 67: else

line 68:   function! s:add(name) abort

line 71: endif

line 72: 

line 73: "

line 74: " load

line 75: "

line 76: if exists('*bufload')

line 77:   function! s:load(expr) abort

line 84: else

line 85:   function! s:load(expr) abort

line 97: endif

line 98: 

line 99: "

line 100: " do

line 101: "

line 102: function! s:do(bufnr, func) abort

line 118: 

line 119: "

line 120: " pseudo

line 121: "

line 122: function! s:pseudo(filepath) abort

line 140: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#Vim#Buffer#import()

line 1: return map({'add': '', 'do': '', 'create': '', 'get_line_count': '', 'pseudo': '', 'ensure': '', 'load': ''}, "vital#_vsnip#function('<SNR>55_' . v:key)")

calling vital#_vsnip#function('<SNR>55_add')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_add')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_do')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_do')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_create')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_create')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_get_line_count')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_get_line_count')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_pseudo')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_pseudo')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_ensure')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_ensure')

continuing in vital#_vsnip#VS#Vim#Buffer#import

calling vital#_vsnip#function('<SNR>55_load')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>55_load')

continuing in vital#_vsnip#VS#Vim#Buffer#import

vital#_vsnip#VS#Vim#Buffer#import returning {'add': function('<SNR>55_add'), 'do':...re'), 'load': function('<SNR>55_load')}

continuing in <SNR>50__get_module

:return {'add': function('<SNR>55_add'), 'do': function('<SNR>55_do'), 'create': function('<SNR>55_create'), 'get_line_count': function('<SNR>55_get_line_count'), 'pseudo': function('<SNR>55_pseudo'), 'ensure': function('<SNR>55_ensure'), 'load': function('<SNR>55_load')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'add': function('<SNR>55_add'), 'do': function('<SNR>55_do'), 'create': function('<SNR>55_create'), 'get_line_count': function('<SNR>55_get_line_count'), 'pseudo': function('<SNR>55_pseudo'), 'ensure': function('<SNR>55_ensure'), 'load': function('<SNR>55_load')} resumed

<SNR>50__get_module returning {'add': function('<SNR>55_add'), 'do':...re'), 'load': function('<SNR>55_load')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'add': function('<SNR>55_add'), 'do':...re'), 'load': function('<SNR>55_load')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'add': function('<SNR>55_add'), 'do':...re'), 'load': function('<SNR>55_load')}

continuing in <SNR>53__vital_loaded

line 4:   let s:Option = a:V.import('VS.Vim.Option')

calling <SNR>50_import('VS.Vim.Option')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.Vim.Option')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.Vim.Option')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.Vim.Option')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.Vim.Option')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#Vim#Option'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#Vim#Option#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/Vim/Option.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/Vim/Option.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#Vim#Option#import() abort', printf("return map({'define': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>56__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>56__SID returning '56'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim

line 7: function! vital#_vsnip#VS#Vim#Option#import() abort^@return map({'define': ''}, "vital#_vsnip#function('<SNR>56_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: "

line 11: " define

line 12: "

line 13: function! s:define(map) abort

line 21: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#Vim#Option#import()

line 1: return map({'define': ''}, "vital#_vsnip#function('<SNR>56_' . v:key)")

calling vital#_vsnip#function('<SNR>56_define')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>56_define')

continuing in vital#_vsnip#VS#Vim#Option#import

vital#_vsnip#VS#Vim#Option#import returning {'define': function('<SNR>56_define')}

continuing in <SNR>50__get_module

:return {'define': function('<SNR>56_define')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'define': function('<SNR>56_define')} resumed

<SNR>50__get_module returning {'define': function('<SNR>56_define')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'define': function('<SNR>56_define')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'define': function('<SNR>56_define')}

continuing in <SNR>53__vital_loaded

<SNR>53__vital_loaded returning #0

continuing in <SNR>50__import

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'apply': function('<SNR>53_apply')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'apply': function('<SNR>53_apply')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'apply': function('<SNR>53_apply')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim

line 3: let s:Position = vital#vsnip#import('VS.LSP.Position')

calling vital#vsnip#import('VS.LSP.Position')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.Position')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Position')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

<SNR>50__import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim

line 4: let s:Diff = vital#vsnip#import('VS.LSP.Diff')

calling vital#vsnip#import('VS.LSP.Diff')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.Diff')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Diff')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

line 3:   endif

line 4:   let module = self._get_module(a:name)

calling <SNR>50__get_module('VS.LSP.Diff')

line 1:   let funcname = s:_import_func_name(self.plugin_name(), a:name)

calling <SNR>50_plugin_name()

line 1:   return self._plugin_name

<SNR>50_plugin_name returning 'vsnip'

continuing in <SNR>50__get_module

calling <SNR>50__import_func_name('vsnip', 'VS.LSP.Diff')

line 1:   return printf('vital#_%s#%s#import', a:plugin_name, s:_dot_to_sharp(a:module_name))

calling <SNR>50__dot_to_sharp('VS.LSP.Diff')

line 1:   return substitute(a:name, '\.', '#', 'g')

<SNR>50__dot_to_sharp returning 'VS#LSP#Diff'

continuing in <SNR>50__import_func_name

<SNR>50__import_func_name returning 'vital#_vsnip#VS#LSP#Diff#import'

continuing in <SNR>50__get_module

line 2:   try

line 3:     return call(funcname, [])

Searching for "autoload/vital/_vsnip/VS/LSP/Diff.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vital/_vsnip/VS/LSP/Diff.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim"
line 1: " ___vital___

line 2: " NOTE: lines between '" ___vital___' is generated by :Vitalize.

line 3: " Do not modify the code nor insert new lines before '" ___vital___'

line 4: function! s:_SID() abort

line 7: execute join(['function! vital#_vsnip#VS#LSP#Diff#import() abort', printf("return map({'try_enable_lua': '', 'compute': ''}, \"vital#_vsnip#function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")

calling <SNR>57__SID()

line 1:   return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')

<SNR>57__SID returning '57'

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim

line 7: function! vital#_vsnip#VS#LSP#Diff#import() abort^@return map({'try_enable_lua': '', 'compute': ''}, "vital#_vsnip#function('<SNR>57_' . v:key)")^@endfunction

line 8: delfunction s:_SID

line 9: " ___vital___

line 10: "

line 11: " compute

line 12: "

line 13: function! s:compute(old, new) abort

line 128: 

line 129: function! s:try_enable_lua() abort

line 155: 

line 156: let s:is_lua_enabled = v:false

line 157: if has('nvim')

line 158:   try

line 159:     call s:try_enable_lua()

line 160:     let s:is_lua_enabled = v:true

line 161:   catch /.*/

line 162:   endtry

line 163: endif

line 164: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim
continuing in <SNR>50__get_module
calling vital#_vsnip#VS#LSP#Diff#import()

line 1: return map({'try_enable_lua': '', 'compute': ''}, "vital#_vsnip#function('<SNR>57_' . v:key)")

calling vital#_vsnip#function('<SNR>57_try_enable_lua')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>57_try_enable_lua')

continuing in vital#_vsnip#VS#LSP#Diff#import

calling vital#_vsnip#function('<SNR>57_compute')

line 1:   silent! return function(a:funcname)

vital#_vsnip#function returning function('<SNR>57_compute')

continuing in vital#_vsnip#VS#LSP#Diff#import

vital#_vsnip#VS#LSP#Diff#import returning {'try_enable_lua': function('<SNR>57_t...'compute': function('<SNR>57_compute')}

continuing in <SNR>50__get_module

:return {'try_enable_lua': function('<SNR>57_try_enable_lua'), 'compute': function('<SNR>57_compute')} made pending

line 4:   catch /^Vim\%((\a\+)\)\?:E117:/

line 5:     return s:_get_builtin_module(a:name)

line 6:   endtry

:return {'try_enable_lua': function('<SNR>57_try_enable_lua'), 'compute': function('<SNR>57_compute')} resumed

<SNR>50__get_module returning {'try_enable_lua': function('<SNR>57_t...'compute': function('<SNR>57_compute')}

continuing in <SNR>50__import

line 5:   if has_key(module, '_vital_created')

line 6:     call module._vital_created(module)

line 7:   endif

line 8:   let export_module = filter(copy(module), 'v:key =~# "^\\a"')

line 9:   " Cache module before calling module._vital_loaded() to avoid cyclic

line 10:   " dependences but remove the cache if module._vital_loaded() fails.

line 11:   " let s:loaded[a:name] = export_module

line 12:   let s:loaded[a:name] = export_module

line 13:   if has_key(module, '_vital_loaded')

line 14:     try

line 15:       call module._vital_loaded(vital#{s:plugin_name}#new())

line 16:     catch

line 17:       unlet s:loaded[a:name]

line 18:       throw 'vital: fail to call ._vital_loaded(): ' . v:exception . " from:\n" . s:_format_throwpoint(v:throwpoint)

line 19:     endtry

line 20:   endif

line 21:   return copy(s:loaded[a:name])

<SNR>50__import returning {'try_enable_lua': function('<SNR>57_t...'compute': function('<SNR>57_compute')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'try_enable_lua': function('<SNR>57_t...'compute': function('<SNR>57_compute')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'try_enable_lua': function('<SNR>57_t...'compute': function('<SNR>57_compute')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim

line 5: 

line 6: "

line 7: " import.

line 8: "

line 9: function! vsnip#session#import() abort

line 12: 

line 13: let s:Session = {}

line 14: 

line 15: "

line 16: " new.

line 17: "

line 18: function! s:Session.new(bufnr, position, text) abort

line 30: 

line 31: "

line 32: " expand.

line 33: "

line 34: function! s:Session.expand() abort

line 45: 

line 46: "

line 47: " merge.

line 48: "

line 49: function! s:Session.merge(session) abort

line 59: 

line 60: "

line 61: " jumpable.

line 62: "

line 63: function! s:Session.jumpable(direction) abort

line 71: 

line 72: "

line 73: " jump.

line 74: "

line 75: function! s:Session.jump(direction) abort

line 105: 

line 106: "

line 107: " choice.

line 108: "

line 109: function! s:Session.choice(jump_point) abort

line 127: 

line 128: "

line 129: " select.

line 130: "

line 131: " @NOTE: Must work even if virtualedit=all/onmore or not.

line 132: "

line 133: function! s:Session.select(jump_point) abort

line 150: 

line 151: "

line 152: " move.

line 153: "

line 154: " @NOTE: Must work even if virtualedit=all/onmore or not.

line 155: "

line 156: function! s:Session.move(jump_point) abort

line 169: 

line 170: "

line 171: " refresh

line 172: "

line 173: function! s:Session.refresh() abort

line 177: 

line 178: "

line 179: " on_insert_leave

line 180: "

line 181: function! s:Session.on_insert_leave() abort

line 184: 

line 185: "

line 186: " on_text_changed

line 187: "

line 188: function! s:Session.on_text_changed() abort

line 214: 

line 215: "

line 216: " flush_changes

line 217: "

line 218: function! s:Session.flush_changes() abort

line 249: 

line 250: "

line 251: " save.

line 252: "

line 253: function! s:Session.store(changenr) abort

line 260: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip/session.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim
calling vsnip#session#import()

line 1:   return s:Session

vsnip#session#import returning {'jumpable': function('22'), 'jump': f...nction('19'), 'choice': function('24')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim

line 2: let s:Snippet = vsnip#snippet#import()

calling vsnip#snippet#import()

line 1:   return s:Snippet

vsnip#snippet#import returning {'init': function('2'), 'offset_to_pos..., 'position_to_offset': function('16')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim

line 3: let s:TextEdit = vital#vsnip#import('VS.LSP.TextEdit')

calling vital#vsnip#import('VS.LSP.TextEdit')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.TextEdit')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.TextEdit')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

<SNR>50__import returning {'apply': function('<SNR>53_apply')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'apply': function('<SNR>53_apply')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'apply': function('<SNR>53_apply')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim

line 4: let s:Position = vital#vsnip#import('VS.LSP.Position')

calling vital#vsnip#import('VS.LSP.Position')

line 1:   if !exists('s:V')

line 2:     let s:V = s:new(s:plugin_name)

line 3:   endif

line 4:   return call(s:V.import, a:000, s:V)

calling <SNR>50_import('VS.LSP.Position')

line 1:   let target = {}

line 2:   let functions = []

line 3:   for a in a:000

line 4:     if type(a) == type({})

line 5:       let target = a

line 6:     elseif type(a) == type([])

line 7:       let functions = a

line 8:     endif

line 9:     unlet a

line 10:   endfor

line 11:   let module = self._import(a:name)

calling <SNR>50__import('VS.LSP.Position')

line 1:   if has_key(s:loaded, a:name)

line 2:     return copy(s:loaded[a:name])

<SNR>50__import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in <SNR>50_import

line 12:   if empty(functions)

line 13:     call extend(target, module, 'keep')

line 14:   else

line 15:     for f in functions

line 16:       if has_key(module, f) && !has_key(target, f)

line 17:         let target[f] = module[f]

line 18:       endif

line 19:     endfor

line 20:   endif

line 21:   return target

<SNR>50_import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in vital#vsnip#import

vital#vsnip#import returning {'cursor': function('<SNR>51_cursor'),...o_vim': function('<SNR>51_lsp_to_vim')}

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim

line 5: 

line 6: let s:session = v:null

line 7: let s:selected_text = ''

line 8: 

line 9: let g:vsnip#DeactivateOn = {}

line 10: let g:vsnip#DeactivateOn.OutsideOfSnippet = 1

line 11: let g:vsnip#DeactivateOn.OutsideOfCurrentTabstop = 2

line 12: 

line 13: "

line 14: " vsnip#selected_text.

line 15: "

line 16: function! vsnip#selected_text(...) abort

line 23: 

line 24: "

line 25: " vsnip#available.

line 26: "

line 27: function! vsnip#available(...) abort

line 31: 

line 32: "

line 33: " vsnip#expandable.

line 34: "

line 35: function! vsnip#expandable() abort

line 38: 

line 39: "

line 40: " vsnip#jumpable.

line 41: "

line 42: function! vsnip#jumpable(...) abort

line 46: 

line 47: "

line 48: " vsnip#expand

line 49: "

line 50: function! vsnip#expand() abort

line 62: 

line 63: "

line 64: " vsnip#anonymous.

line 65: "

line 66: function! vsnip#anonymous(text, ...) abort

line 105: 

line 106: "

line 107: " vsnip#get_session

line 108: "

line 109: function! vsnip#get_session() abort

line 112: 

line 113: "

line 114: " vsnip#deactivate

line 115: "

line 116: function! vsnip#deactivate() abort

line 119: 

line 120: "

line 121: " get_context.

line 122: "

line 123: function! vsnip#get_context() abort

line 168: 

line 169: "

line 170: " vsnip#get_complete_items

line 171: "

line 172: function! vsnip#get_complete_items(bufnr) abort

line 207: 

line 208: "

line 209: " vsnip#decode

line 210: "

line 211: function! vsnip#to_string(text) abort

line 215: 

line 216: "

line 217: " vsnip#debug

line 218: "

line 219: function! vsnip#debug() abort

line 224: 

line 225: "

line 226: " create_context

line 227: "

line 228: function! s:create_context(snippet, before_text_len, prefix_len) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/vsnip.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
line 11: let g:vsnip_snippet_dir = get(g:, 'vsnip_snippet_dir', expand('~/.vsnip'))

line 12: let g:vsnip_snippet_dirs = get(g:, 'vsnip_snippet_dirs', [])

line 13: let g:vsnip_sync_delay = get(g:, 'vsnip_sync_delay', 0)

line 14: let g:vsnip_choice_delay = get(g:, 'vsnip_choice_delay', 500)

line 15: let g:vsnip_append_final_tabstop = get(g:, 'vsnip_append_final_tabstop', v:true)

line 16: let g:vsnip_namespace = get(g:, 'vsnip_namespace', '')

line 17: let g:vsnip_filetypes = get(g:, 'vsnip_filetypes', {})

line 18: let g:vsnip_filetypes.typescriptreact = get(g:vsnip_filetypes, 'typescriptreact', ['typescript'])

line 19: let g:vsnip_filetypes.javascriptreact = get(g:vsnip_filetypes, 'javascriptreact', ['javascript'])

line 20: let g:vsnip_filetypes.vimspec = get(g:vsnip_filetypes, 'vimspec', ['vim'])

line 21: 

line 22: augroup vsnip#silent

line 23:   autocmd!

line 24:   autocmd User vsnip#expand silent

line 25:   autocmd User vsnip#jump silent

line 26: augroup END

line 27: 

line 28: "

line 29: " command

line 30: "

line 31: command! -nargs=* -bang VsnipOpen call s:open_command(<bang>0, 'vsplit', <q-args>)

line 32: command! -nargs=* -bang VsnipOpenEdit call s:open_command(<bang>0, 'edit', <q-args>)

line 33: command! -nargs=* -bang VsnipOpenVsplit call s:open_command(<bang>0, 'vsplit', <q-args>)

line 34: command! -nargs=* -bang VsnipOpenSplit call s:open_command(<bang>0, 'split', <q-args>)

line 35: function! s:open_command(bang, cmd, arg)

line 64: 

line 65: command! -range -nargs=? -bar VsnipYank call s:add_command(<line1>, <line2>, <q-args>)

line 66: function! s:add_command(start, end, name) abort

line 75: 

line 76: "

line 77: " extra mapping

line 78: "

line 79: if g:vsnip_extra_mapping

line 80:   snoremap <expr> <BS> ("\<BS>" . (&virtualedit ==# '' && getcurpos()[2] >= col('$') - 1 ? 'a' : 'i'))

line 81: endif

line 82: 

line 83: "

line 84: " <Plug>(vsnip-expand-or-jump)

line 85: "

line 86: inoremap <silent> <Plug>(vsnip-expand-or-jump) <Esc>:<C-u>call <SID>expand_or_jump()<CR>

line 87: snoremap <silent> <Plug>(vsnip-expand-or-jump) <Esc>:<C-u>call <SID>expand_or_jump()<CR>

line 88: function! s:expand_or_jump()

line 108: 

line 109: "

line 110: " <Plug>(vsnip-expand)

line 111: "

line 112: inoremap <silent> <Plug>(vsnip-expand) <Esc>:<C-u>call <SID>expand()<CR>

line 113: snoremap <silent> <Plug>(vsnip-expand) <C-g><Esc>:<C-u>call <SID>expand()<CR>

line 114: function! s:expand() abort

line 128: 

line 129: "

line 130: " <Plug>(vsnip-jump-next)

line 131: " <Plug>(vsnip-jump-prev)

line 132: "

line 133: inoremap <silent> <Plug>(vsnip-jump-next) <Esc>:<C-u>call <SID>jump(1)<CR>

line 134: snoremap <silent> <Plug>(vsnip-jump-next) <Esc>:<C-u>call <SID>jump(1)<CR>

line 135: inoremap <silent> <Plug>(vsnip-jump-prev) <Esc>:<C-u>call <SID>jump(-1)<CR>

line 136: snoremap <silent> <Plug>(vsnip-jump-prev) <Esc>:<C-u>call <SID>jump(-1)<CR>

line 137: function! s:jump(direction) abort

line 143: 

line 144: "

line 145: " <Plug>(vsnip-select-text)

line 146: "

line 147: nnoremap <silent> <Plug>(vsnip-select-text) :set operatorfunc=<SID>vsnip_select_text_normal<CR>g@

line 148: snoremap <silent> <Plug>(vsnip-select-text) <C-g>:<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv<C-g>

line 149: xnoremap <silent> <Plug>(vsnip-select-text) :<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv

line 150: function! s:vsnip_select_text_normal(type) abort

line 153: 

line 154: "

line 155: " <Plug>(vsnip-cut-text)

line 156: "

line 157: nnoremap <silent> <Plug>(vsnip-cut-text) :set operatorfunc=<SID>vsnip_cut_text_normal<CR>g@

line 158: snoremap <silent> <Plug>(vsnip-cut-text) <C-g>:<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv"_c

line 159: xnoremap <silent> <Plug>(vsnip-cut-text) :<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv"_c

line 160: 

line 161: function! s:vsnip_cut_text_normal(type) abort

line 164: function! s:vsnip_visual_text(type) abort

line 167: function! s:vsnip_set_text(type) abort

line 187: 

line 188: "

line 189: " augroup.

line 190: "

line 191: augroup vsnip

line 192:   autocmd!

line 193:   autocmd InsertLeave * call s:on_insert_leave()

line 194:   autocmd TextChanged,TextChangedI,TextChangedP * call s:on_text_changed()

line 195:   autocmd BufWritePost * call s:on_buf_write_post()

line 196:   autocmd BufRead,BufNewFile *.snippets setlocal filetype=snippets

line 197: augroup END

line 198: 

line 199: "

line 200: " on_insert_leave

line 201: "

line 202: function! s:on_insert_leave() abort

line 208: 

line 209: "

line 210: " on_text_changed

line 211: "

line 212: function! s:on_text_changed() abort

line 218: 

line 219: "

line 220: " on_buf_write_post

line 221: "

line 222: function! s:on_buf_write_post() abort

line 225: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
line 4: augroup filetypedetect

line 4: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/vim-vsnip"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/vim-vsnip"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/vim-vsnip"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/vim-vsnip"
line 5: packadd vim-vsnip-integ

Searching for "pack/*/start/vim-vsnip-integ" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/vim-vsnip-integ"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/vim-vsnip-integ"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/vim-vsnip-integ"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/vim-vsnip-integ"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/vim-vsnip-integ"
not found in 'packpath': "pack/*/start/vim-vsnip-integ"
Searching for "pack/*/opt/vim-vsnip-integ" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/vim-vsnip-integ"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim"
line 1: if exists('g:loaded_vsnip_integ')

line 2:   finish

line 3: endif

line 4: let g:loaded_vsnip_integ = v:true

line 5: 

line 6: let g:vsnip_integ_debug = get(g:, 'vsnip_integ_debug', v:false)

line 7: let g:vsnip_integ_confirm_behavior = get(g:, 'vsnip_integ_confirm_behavior', 'insert')

line 8: let g:vsnip_integ_create_autocmd = get(g:, 'vsnip_integ_create_autocmd', v:true)

line 9: 

line 10: augroup vsnip_integ

line 11:   autocmd!

line 12:   autocmd User vsnip#expand call vsnip_integ#skip_complete_done_after()

line 13:   " pun.vim do `User PumCompleteDone`

line 14:   if g:vsnip_integ_create_autocmd

line 15:     if has('#CompleteDonePre')

line 16:       autocmd CompleteDonePre * if complete_info(['mode']).mode !=? '' | call vsnip_integ#on_complete_done(v:completed_item) | endif

line 17:     else

line 18:       autocmd CompleteDone * call vsnip_integ#on_complete_done(v:completed_item)

line 19:     endif

line 20:   endif

line 21: augroup END

line 22: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
line 5: augroup filetypedetect

line 5: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/vim-vsnip-integ"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/vim-vsnip-integ"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/vim-vsnip-integ"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/vim-vsnip-integ"
line 6: packadd vimcomplete

Searching for "pack/*/start/vimcomplete" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/vimcomplete"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/vimcomplete"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/vimcomplete"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/vimcomplete"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/vimcomplete"
not found in 'packpath': "pack/*/start/vimcomplete"
Searching for "pack/*/opt/vimcomplete" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/vimcomplete"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim"
line 1: if !has('vim9script') ||  v:versionlong < 9000196

line 2:     " Needs Vim version 9.0.0196 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: import autoload '../autoload/vimcomplete/abbrev.vim'

line 9: import autoload '../autoload/vimcomplete/buffer.vim'

line 10: import autoload '../autoload/vimcomplete/path.vim'

line 11: import autoload '../autoload/vimcomplete/dictionary.vim'

line 12: import autoload '../autoload/vimcomplete/lsp.vim'

line 13: import autoload '../autoload/vimcomplete/omnifunc.vim'

line 14: import autoload '../autoload/vimcomplete/vimscript.vim'

line 15: import autoload '../autoload/vimcomplete/vsnip.vim'

line 16: import autoload '../autoload/vimcomplete/tmux.vim'

line 17: import autoload '../autoload/vimcomplete/tag.vim'

line 18: import autoload '../autoload/vimcomplete/util.vim'

line 19: import autoload '../autoload/vimcomplete/completor.vim'

line 21: def RegisterPlugins()

line 41: 

line 42: def RegisterLsp()

line 57: 

line 58: autocmd User VimCompleteLoaded ++once RegisterPlugins() | util.InitKindHighlightGroups()

line 59: autocmd User LspAttached RegisterLsp()

line 60: autocmd VimEnter * lsp.Setup()

line 61: 

line 62: # Set vimcomplete plugin options from 'opts'.

line 63: def! g:VimCompleteOptionsSet(opts: dict<any>)

line 79: 

line 80: def! g:VimCompleteInfoPopupOptionsSet(opts: dict<any>)

line 83: 

line 84: def! g:VimCompleteOptionsGet(): dict<any>

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:     " Needs Vim version 9.0 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: # Async completion plugin for Vim

line 9: 

line 10: g:loaded_vimcomplete = true

line 12: import autoload '../autoload/vimcomplete/completor.vim'

line 14: def VimCompEnable(filetypes: string)

line 50: 

line 51: command! -nargs=* -complete=filetype VimCompleteEnable VimCompEnable(<q-args>)

line 52: command! -nargs=0 VimCompleteDisable completor.Disable() | g:vimcomplete_noname_buf_enable = false

line 53: command! -nargs=0 VimCompleteCompletors completor.ShowCompletors()

line 54: 

line 55: augroup VimcompleteAutoCmds | autocmd!

line 55:  autocmd!

line 56:     if get(g:, 'vimcomplete_enable_by_default', true)

line 57:         autocmd VimEnter * VimCompEnable("")

line 58:     endif

line 59: augroup END

line 60: 

line 61: if exists('#User#VimCompleteLoaded')

line 62:     :au VimEnter * doau <nomodeline> User VimCompleteLoaded

line 63: endif

line 64: 

line 65: inoremap <silent> <Plug>(vimcomplete-do-complete) <c-r>=<SID>completor.DoComplete()<cr>

line 66: inoremap <silent> <Plug>(vimcomplete-skip) <c-r>=<SID>completor.SkipCompleteSet()<cr>

line 67: 

line 68: # filetype detection is needed for this plugin to work

line 69: filetype plugin on

Searching for "filetype.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
line 1: " Vim support file to detect file types

line 2: "

line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 4: " Last Change:^I2024 May 31

line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 6: 

line 7: " Listen very carefully, I will say this only once

line 8: if exists("did_load_filetypes")

line 9:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
line 1: vim9script noclear

line 2: 

line 3: # Vim support file to switch on loading plugins for file types

line 4: #

line 5: # Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 6: # Last change:^I2023 Aug 10

line 7: # Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 8: 

line 9: if exists("g:did_load_ftplugin")

line 10:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/after/ftplugin.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
continuing in /Users/piotr/.config/vim/init/vimcomplete.vim
line 6: augroup filetypedetect

line 6: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/vimcomplete"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/vimcomplete"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/vimcomplete"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/vimcomplete"
line 7: 

line 8: g:vimcomplete_tab_enable = 1

line 9: g:vimcomplete_cr_enable = 0

line 11: var vcoptions = {

line 40: g:VimCompleteOptionsSet(vcoptions)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/completor.vim"
line 1: vim9script

line 2: 

line 3: # Main autocompletion engine

line 4: 

line 5: import autoload './util.vim'

line 6: import autoload './lsp.vim'

line 8: export var options: dict<any> = {

line 29: var saved_options: dict<any> = {}

line 31: export def GetOptions(provider: string): dict<any>

line 34: 

line 35: export def SetOptions(opts: dict<any>)

line 38: 

line 39: var registered: dict<any> = { any: [] }

line 40: var completors: list<any>

line 41: 

line 42: export def SetupCompletors()

line 50: 

line 51: export def ShowCompletors()

line 56: 

line 57: export def IsCompletor(source: string): bool

line 60: 

line 61: export def ClearRegistered()

line 64: 

line 65: export def Register(name: string, Completor: func, ftype: list<string>, priority: number)

line 92: 

line 93: export def Unregister(name: string)

line 99: 

line 100: import autoload './recent.vim'

line 102: def DisplayPopup(citems: list<any>, line: string)

line 168: 

line 169: def GetCurLine(): string

line 181: 

line 182: def GetItems(cmp: dict<any>, line: string): list<any>

line 211: 

line 212: def AsyncGetItems(curline: string, pendingcompletors: list<any>, partialitems: list<any>, count: number, timer: number)

line 254: 

line 255: # Text does not change after <c-e> or <c-y> but TextChanged will get

line 256: # called anyway. To avoid <c-e> and <c-y> from closing popup and reopening

line 257: # again, set a flag.

line 258: # https://github.com/girishji/vimcomplete/issues/37

line 259: var skip_complete: bool = false

line 261: export def SkipCompleteSet(): string

line 267: 

line 268: def SkipComplete(): bool

line 279: 

line 280: def VimComplete()

line 323: 

line 324: def VimCompletePopupVisible()

line 333: 

line 334: export def DoComplete(): string

line 338: 

line 339: def LRU_Cache()

line 348: 

line 349: export def Enable()

line 401: 

line 402: export def Disable()

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/completor.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tag.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 5: export var options: dict<any> = {

line 10: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tag.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vimscript.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 5: export var options: dict<any> = {

line 11: def Prefix(): list<any>

line 68: 

line 69: var dictwords = []

line 71: def GetDictCompletion(prefix: string): list<string>

line 85: 

line 86: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vimscript.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/abbrev.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 5: export var options: dict<any> = {

line 11: def GetAbbrevs(prefix: string): list<any>

line 25: 

line 26: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/abbrev.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/path.vim"
line 1: vim9script

line 2: 

line 3: # Autocomplete file path

line 4: 

line 5: import autoload './util.vim'

line 7: export var options: dict<any> = {

line 14: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/path.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/dictionary.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 14: export var options: dict<any> = {

line 27: def GetProperty(s: string): any

line 34: 

line 35: def MatchStr(): string

line 38: 

line 39: def CommentStr(): string

line 42: 

line 43: def OnlyWords(): bool

line 46: 

line 47: def SortedDict(): bool

line 50: 

line 51: var dictbufs = {}

line 58: def GetDict(): list<any>

line 80: 

line 81: var dictwords: dict<any> = {} # dictionary file -> words

line 83: def GetWords(prefix: string, bufnr: number): dict<any>

line 127: 

line 128: # Binary search dictionary buffer. Use getbufline() instead of creating a

line 129: # list (for efficiency).

line 130: # - Makes sense for only case match, since if a dictionary has both upper case and

line 131: #   lower case letters they could occur far apart.

line 132: # - Only one word per line

line 133: def GetWordsBinarySearch(prefix: string, bufnr: number): dict<any>

line 172: 

line 173: def GetCompletionItems(prefix: string): dict<any>

line 217: 

line 218: var completionItems: dict<any> = {}

line 220: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/dictionary.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vsnip.vim"
line 1: vim9script

line 2: 

line 3: # Interface to github.com/hrsh7th/vim-vsnip

line 4: 

line 5: import autoload './util.vim'

line 7: export var options: dict<any> = {

line 14: def Pattern(abbr: string): string

line 20: 

line 21: def GetCandidates(line: string): list<dict<any>>

line 33: 

line 34: def GetItems(): dict<any>

line 65: 

line 66: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/vsnip.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/lsp.vim"
line 1: vim9script

line 2: 

line 3: # Interface to https://github.com/yegappan/lsp through omnifunc

line 4: 

line 5: import autoload './util.vim'

line 7: export var options: dict<any> = {

line 14: export def Setup()

line 31: 

line 32: export def Completor(findstart: number, base: string): any

line 70: 

line 71: if v:versionlong < 9010650

line 72:     export def GetTriggerKind(): number

line 75:     finish

line 76: endif

line 77: 

line 78: if get(g:, 'loaded_lsp', false)

line 79:     import autoload 'lsp/buffer.vim' as buf

Searching for "autoload/lsp/buffer.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/autoload/lsp/buffer.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/autoload/lsp/buffer.vim"
line 80:     # Return trigger kind and trigger char. If completion trigger is not a keyword

line 81:     # and not one of the triggerCharacters, return -1.

line 82:     # Trigger kind is 1 for keyword and 2 for trigger char initiated completion.

line 83:     export def GetTriggerKind(): number

line 99: else

line 100:     export def GetTriggerKind(): number

line 103: endif

line 104: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/lsp.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/buffer.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 11: export var options: dict<any> = {

line 22: def BufWords(bufnr: number, prefix: string, curbuf: bool = false): list<any>

line 73: 

line 74: def ExtendUnique(dest: list<dict<any>>, src: list<dict<any>>): list<dict<any>>

line 87: 

line 88: def GetLength(items: list<dict<any>>, prefix: string): number

line 95: 

line 96: def OtherBufMatches(items: list<dict<any>>, prefix: string): list<dict<any>>

line 115: 

line 116: # Search for http links in current buffer

line 117: def UrlMatches(base: string): list<dict<any>>

line 142: 

line 143: # Using searchpos() is ~15% faster than gathering words by splitting lines and

line 144: # comparing each word for pattern.

line 145: def CurBufMatches(prefix: string): list<dict<any>>

line 265: 

line 266: var previous = {prefix: '', completed: true}

line 268: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/buffer.vim
continuing in VimCompleteOptionsSet
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/omnifunc.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 4: import autoload './completor.vim'

line 6: export var options: dict<any> = {

line 13: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/omnifunc.vim
continuing in <lambda>45
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tmux.vim"
line 1: vim9script

line 2: 

line 3: import autoload './util.vim'

line 5: export var options: dict<any> = {

line 14: def ActivePane(): string

line 18: 

line 19: def Panes(exclude_current: bool = false): string

line 28: 

line 29: def CaptureCmd(): string

line 45: 

line 46: var items = []

line 47: var start = reltime()

line 48: var status = 0  # 0 not ready, 1 finished, 2 has some intermediate completions

line 49: var job: job

line 50: 

line 51: def JobStart()

line 76: 

line 77: export def Completor(findstart: number, base: string): any

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/tmux.vim
continuing in <lambda>45
Searching for "autoload/vimcomplete/lsp.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vimcomplete/lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete/lsp.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vimcomplete)
fchdir() to previous dir
line 42: autocmd VimEnter * g:VimCompleteOptionsSet(vcoptions)

line 43: autocmd FileType text set dictionary+=/usr/share/dict/words

line 44: autocmd FileType gitcommit set dictionary+=/usr/share/dict/words

finished sourcing /Users/piotr/.config/vim/init/vimcomplete.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 46: source ~/.config/vim/init/vimsuggest.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 46: sourcing "/Users/piotr/.config/vim/init/vimsuggest.vim"
line 1: packadd vimsuggest

Searching for "pack/*/start/vimsuggest" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/vimsuggest"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/vimsuggest"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/vimsuggest"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/vimsuggest"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/vimsuggest"
not found in 'packpath': "pack/*/start/vimsuggest"
Searching for "pack/*/opt/vimsuggest" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/vimsuggest"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim"
line 1: if !has('vim9script') || v:versionlong < 9000196

line 2:     " Needs Vim version 9.1 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: g:loaded_vimsuggest = true

line 10: import autoload '../autoload/vimsuggest/search.vim'

line 11: import autoload '../autoload/vimsuggest/cmd.vim'

line 13: def! g:VimSuggestSetOptions(opts: dict<any>)

line 24: 

line 25: def VimSuggestEnable(flag: bool)

line 30: 

line 31: command! VimSuggestEnable  VimSuggestEnable(true)

line 32: command! VimSuggestDisable VimSuggestEnable(false)

line 33: 

line 34: def Reset()

line 40: 

line 41: autocmd VimEnter * Reset()

line 42: 

line 43: if empty(prop_type_get('VimSuggestMatch'))

line 44:     :highlight default link VimSuggestMatch PmenuMatch

line 45:     prop_type_add('VimSuggestMatch', {highlight: "VimSuggestMatch", override: false})

line 46: endif

line 47: :highlight default link VimSuggestMatchSel PmenuMatchSel

line 48: :highlight default link VimSuggestMute NonText

line 49: 

line 50: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim
continuing in /Users/piotr/.config/vim/init/vimsuggest.vim
line 1: augroup filetypedetect

line 1: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/vimsuggest"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/vimsuggest"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/vimsuggest"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/vimsuggest"
line 2: 

line 3: let s:vim_suggest = {}

line 4: let s:vim_suggest.cmd = { 'enable': v:true, 'pum': v:true, 'fuzzy': v:false, 'exclude': [], 'onspace': [], 'alwayson': v:true, 'popupattrs': {   'maxHeight': 12 }, 'wildignore': v:true, 'addons': v:false, 'ctrl_np': v:false, }

line 18: 

line 19: let s:vim_suggest.cmd.popupattrs = { 'maxheight': 20, }

line 22: 

line 23: call g:VimSuggestSetOptions(s:vim_suggest)

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim"
line 1: vim9script

line 2: 

line 3: # This Vim9 script implements command-line auto-completion for the ':' command.

line 4: # It uses 'getcompletion()' to gather completion candidates and show them in a

line 5: # popup window.

line 6: 

line 7: import autoload './popup.vim'

line 8: import autoload './addons/addons.vim'

line 9: import autoload './aux.vim'

line 11: export var options: dict<any> = {

line 26: class State

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 27: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/popup.vim"
line 1: vim9script

line 2: 

line 3: # PopupMenu class to handle both stacked (pum=true) and flat (pum=false) pop-up menus in Vim9

line 4: # - Supports custom filtering and callback functions

line 5: # - Stacked mode displays items vertically, similar to Vim's built-in popup menu

line 6: # - Flat mode displays items horizontally for a more compact presentation

line 7: # - Implements navigation functions for selecting, moving, and highlighting items

line 8: # - Includes methods for showing, hiding, and closing the menu

line 9: # - Handles scrolling (PageUp/PageDown) and adjusting the menu layout dynamically

line 10: 

line 11: export class PopupMenu

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/popup.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim
line 65: export var state: State = null_object

line 67: export def Setup()

line 92: 

line 93: export def Teardown()

line 98: 

line 99: def EnableCmdline()

line 102: 

line 103: def DisableCmdline()

line 106: 

line 107: def TabComplete()

line 124: 

line 125: def Complete()

line 138: 

line 139: def DoComplete(oldcontext: string, timer: number)

line 206: 

line 207: export def SetPopupMenu(items: list<any>)

line 230: 

line 231: # When ':range' is present, insertion of completion text should happen at the

line 232: # end of range. Similary, :s// and :g//.

line 233: def InsertionPoint(replacement: string): number

line 254: 

line 255: export def SelectItemPost(index: number, dir: string)

line 272: 

line 273: def FilterFn(winid: number, key: string): bool

line 336: 

line 337: def CallbackFn(winid: number, result: any)

line 345: 

line 346: def SendToQickfixList()

line 370: 

line 371: export def DoHighlight(pattern: string, group = 'VimSuggestMatch')

line 380: 

line 381: def Context(): string

line 384: 

line 385: export def CmdStr(s: string = null_string): string

line 388: 

line 389: export def CmdLead(): string

line 392: 

line 393: def CmdlineLeaveHook(selected_item: string, first_item: string, key: string)

line 399: 

line 400: def CmdlineAbortHook()

line 405: 

line 406: export def AddOnSpaceHook(cmd: string)

line 409: 

line 410: export def AddCmdlineLeaveHook(cmd: string, Callback: func(string, string, string))

line 413: 

line 414: export def AddCmdlineEnterHook(Callback: func())

line 417: 

line 418: export def AddCmdlineAbortHook(Callback: func())

line 421: 

line 422: export def AddSelectItemHook(cmd: string, Callback: func(string, string): bool)

line 425: 

line 426: export def AddHighlightHook(cmd: string, Callback: func(string, list<any>): list<any>)

line 429: 

line 430: export def ValidState(): bool

line 433: 

line 434: export def PrintHooks()

line 442: 

line 443: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/cmd.vim
continuing in VimSuggestSetOptions
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/search.vim"
line 1: vim9script

line 2: 

line 3: # This Vim9 script implements an search suggestion system for Vim's

line 4: # command-line. It provides fuzzy matching, asynchronous searching, and a

line 5: # customizable popup menu for search results. The script includes functions

line 6: # for incsearch highlighting, multi-line searching, and various utility

line 7: # functions to enhance the search experience in Vim.

line 8: 

line 9: import autoload './popup.vim'

line 12: export var options: dict<any> = {

line 31: class State

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 79: var state: State = null_object

line 83: def RestoreHLSearch(): string

line 93: 

line 94: export def Setup()

line 112: 

line 113: export def Teardown()

line 117: 

line 118: def EnableCmdline()

line 121: 

line 122: def DisableCmdline()

line 125: 

line 126: def TabComplete()

line 143: 

line 144: def Complete()

line 190: 

line 191: def ShowPopupMenu()

line 200: 

line 201: def SelectItemPost(index: number, dir: string)

line 212: 

line 213: def FilterFn(winid: number, key: string): bool

line 252: 

line 253: def CallbackFn(winid: number, result: any)

line 262: 

line 263: def MakeUnique(lst: list<any>): list<any>

line 274: 

line 275: def Itemify(matches: list<any>): list<any>

line 294: 

line 295: def GetFirstMatch(): list<any>

line 322: 

line 323: # Return a list containing range of lines to search.

line 324: def Batches(): list<any>

line 348: 

line 349: def BufMatchLine(batch: dict<any> = null_dict): list<any>

line 376: 

line 377: # Search across line breaks. This is less efficient and likely not very useful.

line 378: # Warning: Syntax highlighting inside popup is not supported by this function.

line 379: def BufMatchMultiLine(batch: dict<any> = null_dict): list<any>

line 438: 

line 439: # Return a list of strings that fuzzy match the pattern.

line 440: def BufFuzzyMatches(): list<any>

line 484: 

line 485: # Workaround for Vim issue #12538: https://github.com/vim/vim/issues/12538

line 486: # - During async search, after `timer_start()` expires, the window is redrawn,

line 487: #   causing search highlighting (incsearch, hlsearch) to be lost.

line 488: # - This workaround restores both `incsearch` and `hlsearch` highlighting, which

line 489: #   are removed on redraw.

line 490: # - Note: If previous highlighting exists during a new search, both search

line 491: #   patterns may be highlighted simultaneously, which is suboptimal. Using

line 492: #   `:nohls` does not resolve this, as the redraw restores the previous search

line 493: #   highlighting. A proper solution would require modifying the search history,

line 494: #   which is non-trivial.

line 495: var matchids = {sid: 0, iid: 0}

line 496: def IncSearchHighlight(firstmatch: list<any>, context: string)

line 516: 

line 517: def IncSearchHighlightClear()

line 529: 

line 530: # A worker task for async search.

line 531: def SearchWorker(attr: dict<any>, MatchFn: func(dict<any>): list<any>, timer: number = 0)

line 558: 

line 559: def Context(): string

line 562: 

line 563: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/search.vim
continuing in VimSuggestSetOptions
Searching for "autoload/vimsuggest/search.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/vimsuggest/search.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/search.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 1:     augroup VimSuggestSearchAutocmds

line 1:  autocmd!

line 2:     augroup END

line 2:         augroup VimSuggestSearchAutocmds

line 2:  autocmd!

line 7:             autocmd CmdlineEnter /,\?  {^@                state = State.new()^@                state.Setup()^@                EnableCmdline()^@            }

line 8:             autocmd CmdlineChanged /,\?  options.alwayson ? Complete() : TabComplete()

line 14:             autocmd CmdlineLeave   /,\?  {^@                if state != null_object^@                    state.Clear()^@                    state = null_object^@                endif^@            }

line 15:         augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 1:     augroup VimSuggestCmdAutocmds

line 1:  autocmd!

line 2:     augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim"
line 1: vim9script

line 2: 

line 3: # This script offers a powerful suite of commands for fuzzy searching and shell

line 4: # command execution. Key features include:

line 5: 

line 6: # * Fuzzy File Search - with asynchronous jobs (`VSFind`)

line 7: # * Fuzzy Searching - for buffers, MRU, keymaps, changelists, marks, and registers

line 8: # * Live Grep Search - (glob/regex) using asynchronous jobs (`VSGrep`)

line 9: # * Live File Search - (glob/regex) using asynchronous jobs (`VSFindL`)

line 10: # * In-Buffer Search - using `:global` (`VSGlobal`)

line 11: # * Include File Search - using `:ilist` (`VSInclSearch`)

line 12: # * Custom Shell Command Execution - (`VSExec`)

line 13: 

line 14: # This script can be customized to create your own variations. Legacy script users

line 15: # can import using `:import` (see `:h import-legacy`).

line 16: 

line 17: import autoload '../cmd.vim'

line 21: import './fuzzy.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 21: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/fuzzy.vim"
line 1: vim9script

line 2: 

line 3: # This Vim9 script provides functionality for fuzzy auto-completion. It

line 4: # processes input patterns, starts external commands or jobs to fetch potential

line 5: # matches, and manages item selection and actions. It supports asynchronous

line 6: # operations and handles hooks for various command-line events.

line 7: 

line 8: import autoload '../cmd.vim'

line 9: import autoload './job.vim'

line 10: import autoload './exec.vim'

line 12: var items = []

line 13: var matches = [[], [], []]

line 14: var candidate = null_string

line 15: var cmdname = null_string

line 16: var prevdir = null_string

line 17: var exit_key = null_string

line 30: export def Complete(arglead: string, line: string, cursorpos: number,

line 57: 

line 58: # 'Find files' completion function with fuzzy search. Vim calls this function to

line 59: # obtain completion list.

line 60: # Arguments:

line 61: # - arglead: string

line 62: # - line: string

line 63: # - cursorpos: number

line 64: #     See :h command-completion-custom

line 65: # - findcmdstr: string

line 66: #     When provided, execute the command instead of one stored in

line 67: #     g:vimsuggest_fzfindprg.

line 68: # - shellprg: string

line 69: #     When provided, execute the command through shell. Example, "/bin/sh -c".

line 70: #     If 'g:vimsuggest_shell' is 'true', shell program in 'shell' option is used.

line 71: #     Shell is useful for expanding recursive globbing wildcards like '**'.

line 72: # - async: bool

line 73: #     A flag indicating whether to perform the find operation asynchronously

line 74: #     using job_start() or synchronously using system(). Defaults to 'true'.

line 75: # - timeout: number

line 76: #     The maximum time (in milliseconds) to wait for the asynchronous

line 77: #     operation before timing out. Defaults to 2000 ms.

line 78: # - max_items: number

line 79: #     The maximum number of items to return from the find operation. Defaults

line 80: #     to 100000.

line 81: # Returns:

line 82: # - A list of files.If no valid files are found, an empty list is returned.

line 83: export def FindComplete(arglead: string, line: string, cursorpos: number,

line 136: 

line 137: # Executes a specified action on a selected item based on type of item selected.

line 138: # Arguments:

line 139: # - arglead: string

line 140: #     Vim calls this function with a single argument, that is typed by the user.

line 141: # - ActionFn: func(any, string)

line 142: #     A function to be executed on the selected item. This function takes two parameters:

line 143: #     - The selected item from the items list (could be of any type).

line 144: #     - A string representing the exit key (example: <CR>).

line 145: #     Defaults to `null_function` if not provided.

line 146: export def DoAction(arglead = null_string, ActionFn: func(any, string) = null_function)

line 159: 

line 160: # Same as DoAction() above, except to be used with 'find' command that can take

line 161: # an optional 'directory' argument.

line 162: # Usage:

line 163: # <Command> {pattern|dir} {pattern1} {pattern2} {pattern3}

line 164: # If you mistype pattern for fuzzy search, no need to erase. Just abandon it by

line 165: # typing a space and type a new pattern.

line 166: # ActionFn is called with selected item.

line 167: export def DoFindAction(ActionFn: func(string, string), arg1 = null_string,

line 178: 

line 179: def FindCmd(dir: string): string

line 196: 

line 197: export def ExtractDir(): string

line 201: 

line 202: # Return the last word typed on the command-line that is not a directory path.

line 203: export def ExtractPattern(): string

line 212: 

line 213: def AddHooks(name: string)

line 230: 

line 231: def AddFindHooks(name: string)

line 243: 

line 244: def FuzzyMatchFiles(pat: string): list<any>

line 267: 

line 268: def FuzzyLimit(pat: string): number

line 280: 

line 281: def Clear()

line 289: 

line 290: cmd.AddCmdlineEnterHook(() => {

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 294: cmd.AddCmdlineAbortHook(() => {

line 298: :defcompile

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 299: 

line 300: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/fuzzy.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
line 22: import './exec.vim'

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 22: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/exec.vim"
line 1: vim9script

line 2: 

line 3: # This Vim9 script implements non-fuzzy (regex) command-line auto-completion.

line 4: # It provides completion for shell commands, like live grep, and find

line 5: # operations, with support for asynchronous execution, as well as Ex commands.

line 6: # The script includes functions for highlighting matches, handling file visits

line 7: # from grep results, and various utility functions.

line 8: 

line 9: import autoload '../cmd.vim'

line 10: import autoload './job.vim'

line 12: var items: list<any>

line 13: var candidate: string

line 14: var exit_key: string

line 15: var hooks_added: dict<any>

line 16: 

line 17: # Generates a list of completion items based on the current command line.

line 18: # Command line should contain a shell program like 'find', 'grep' or 'ls -1'.

line 19: # External program is executed in shell command stored in `shell` option if

line 20: # `g:vimsuggest_shell` is set. Otherwise, executed directly.

line 21: # Arguments:

line 22: # - arglead: string

line 23: # - line: string

line 24: # - cursorpos: number

line 25: #     See :h command-completion-custom

line 26: # - shellprg: string

line 27: #     When provided, execute the command through shell. Example, "/bin/sh -c".

line 28: #     If 'g:vimsuggest_shell' is 'true', shell program in 'shell' option is used.

line 29: # - async: bool

line 30: #     A boolean flag indicating whether the completion should be executed asynchronously.

line 31: #     When set to true, it allows for non-blocking execution, enabling the user interface

line 32: #     to remain responsive.

line 33: # - timeout: number

line 34: #     The maximum amount of time (in milliseconds) to wait for the completion operation

line 35: #     to finish before giving up. This is particularly useful for asynchronous operations

line 36: #     where a delay might occur.

line 37: # - max_items: number

line 38: #     The maximum number of completion items to return. This limits the number of results

line 39: #     presented to the user, helping to manage performance and usability.

line 40: # Returns:

line 41: # - A list of completion items based on the provided line and arglead. If no valid

line 42: # completions are found, an empty list is returned.

line 43: # Note: Both 'arglead' and 'line' arg contains text up to 'cursorpos' only.

line 44: export def Complete(arglead: string, line: string, cursorpos: number,

line 59: 

line 60: # Same as Complete() above, except 'grep' shell command is obtained from

line 61: # g:vimsuggest_grepprg variable or 'grepprg' option.

line 62: export def GrepComplete(A: string, L: string, C: number, shellprg = null_string,

line 81: 

line 82: # Same as GrepComplete() above except 'find' shell command is obtained from

line 83: # g:vimsuggest_findprg variable.

line 84: export def FindComplete(A: string, L: string, C: number, shellprg = null_string,

line 112: 

line 113: # Same as above, except it executes a Ex command to obtain completion candidates.

line 114: export def CompleteExCmd(arglead: string, line: string, cursorpos: number,

line 128: 

line 129: # Utility function used by above functions to manage shell command execution.

line 130: export def CompletionItems(cmdstr = null_string, shellprg = null_string,

line 158: 

line 159: # Executes a specified action on a selected item.

line 160: # Arguments:

line 161: # - ActionFn: func(string, string)

line 162: #     A function to be executed on the selected item. This function takes two parameters:

line 163: #     - The selected item from the items list.

line 164: #     - A string representing the exit key (example: <CR>).

line 165: # - arg{1-20}

line 166: #     Placeholders for words typed on the command line.

line 167: # Usage:

line 168: # :<Command> Shell_cmd Shell_cmd_arg1 Shell_cmd_arg2 ...

line 169: # :<Command> <pattern>

line 170: export def DoAction(ActionFn: func(string, string), arg1: string = '',

line 186: 

line 187: # Open a given file for editing. File can be opened in a split window or a new

line 188: # tab.

line 189: #  - tgt

line 190: #      - File path or a line from the output of grep command.

line 191: #  - key

line 192: #      - A string representing the exit key (example: <CR>).

line 193: export def DefaultAction(tgt: string, key: string)

line 200: 

line 201: # Return arguments typed to a command.

line 202: export def ArgsStr(): string

line 205: 

line 206: # Pattern to match everything inside quotes including " and ' escaped as \" and '',

line 207: # and to match space escaped non-quoted text.

line 208: def MatchPattern(): string

line 211: 

line 212: # Extract file from grep output and edit it.

line 213: # Let quicfix parse output of 'grep' for filename, line, column. It deals with

line 214: # ':' in filename and other corner cases.

line 215: export def GrepVisitFile(key: string, line: string)

line 224: 

line 225: export def VisitBuffer(key: string, bufnr: number, lnum = -1, col = -1, visualcol = false)

line 238: 

line 239: export def VisitFile(key: string, filename: string, lnum: number = -1)

line 247: 

line 248: def Strip(pat: string): string # Remove surrounding quotes if any

line 251: 

line 252: def AddHooks(name: string)

line 269: 

line 270: export def Clear()

line 275: 

line 276: cmd.AddCmdlineEnterHook(() => {

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 280: :defcompile

line 281: 

line 282: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/exec.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
line 24: var enable_hook = []

line 44: enable_hook->add(() => {

line 47: cmd.AddOnSpaceHook('VSFind')

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest)
fchdir() to previous dir
line 63: enable_hook->add(() => {

line 66: cmd.AddOnSpaceHook('VSGitFind')

line 67: def GitFindComplete(A: string, L: string, C: number): list<any>

line 76: def GitFindAction(key: string, fpath: string)

line 85: 

line 86: ## Live Grep

line 87: #

line 88: #    Command:

line 89: #    `:VSGrep {pattern} [directory]`

line 90: #

line 91: #    Executes a `grep` command live, showing results as you type. `{pattern}` is a

line 92: #    glob pattern, and it’s best to enclose it in quotes to handle special

line 93: #    characters. You can also specify an optional directory.

line 94: #

line 95: #    The grep command is taken from `g:vimsuggest_grepprg` or the `:h 'grepprg'`

line 96: #    option. If it contains `$*`, it gets replaced by the command-line arguments.

line 97: #

line 98: #    Example key mappings:

line 99: #    ```

line 100: #    g:vimsuggest_grepprg = 'ggrep -REIHins $* --exclude-dir=.git --exclude=".*"'

line 101: #    nnoremap <key> :VSGrep ""<left>

line 102: #    nnoremap <key> :VSGrep "<c-r>=expand('<cword>')<cr>"<left>

line 103: #    ```

line 104: #

line 105: #    Note: You can substitute `grep` with `rg` or `ag`. For more advanced needs, see `:VSExec`.

line 106: #

line 107: enable_hook->add(() => {

line 125: enable_hook->add(() => {

line 142: enable_hook->add(() => {

line 166: enable_hook->add(() => {

line 169: def GlobalComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 197: def JumpToLine(line: string, _: string)

line 201: 

line 202: ## Search in Included Files (`:h include-search`)

line 203: #

line 204: #    Command:

line 205: #    `:VSInclSearch {regex_pattern}`

line 206: #

line 207: #    Similar to `VSGlobal`, but searches both the current buffer and included

line 208: #    files. The results are gathered using the `:ilist` command.

line 209: #

line 210: #    Example key mappings:

line 211: #    ```

line 212: #    nnoremap <key> :VSInclSearch<space>

line 213: #    ```

line 214: enable_hook->add(() => {

line 217: var incl_search_pattern = null_string

line 218: def InclSearchComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 235: def SelectItemPostCallback(line: string, dir: string): bool

line 241: def JumpToDef(line: string, _: string)

line 245: 

line 246: ## Fuzzy Search for Buffers, MRU (`v:oldfiles`), Keymaps, Changelists, Marks, and Registers

line 247: #

line 248: #    Commands:

line 249: #    ```

line 250: #    :VSBuffer [fuzzy_pattern]

line 251: #    :VSMru [fuzzy_pattern]

line 252: #    :VSKeymap [fuzzy_pattern]

line 253: #    :VSChangelist [fuzzy_pattern]

line 254: #    :VSMark [fuzzy_pattern]

line 255: #    :VSRegister [fuzzy_pattern]

line 256: #    ```

line 257: #

line 258: #    - `VSKeymap` opens the file containing the keymap when pressed.

line 259: #    - `VSMark` jumps to a specific mark.

line 260: #    - `VSRegister` pastes the register's content.

line 261: #

line 262: #    Example key mappings:

line 263: #    ```

line 264: #    nnoremap <key> :VSBuffer<space>

line 265: #    nnoremap <key> :VSMru<space>

line 266: #    nnoremap <key> :VSKeymap<space>

line 267: #    nnoremap <key> :VSMark<space>

line 268: #    nnoremap <key> :VSRegister<space>

line 269: #    ```

line 270: 

line 271: ## Fuzzy Search Buffers

line 272: 

line 273: enable_hook->add(() => {

line 276: cmd.AddOnSpaceHook('VSBuffer')

line 277: def BufferComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 280: def DoBufferAction(arglead: string = null_string)

line 285: def Buffers(list_all_buffers: bool): list<any>

line 298: 

line 299: ## Fuzzy Search MRU - Most Recently Used Files

line 300: 

line 301: enable_hook->add(() => {

line 304: cmd.AddOnSpaceHook('VSMru')

line 305: def MRUComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 308: def DoMRUAction(arglead: string = null_string)

line 313: def MRU(): list<any>

line 318: 

line 319: ## Fuzzy Search Keymap

line 320: 

line 321: enable_hook->add(() => {

line 324: cmd.AddOnSpaceHook('VSKeymap')

line 325: def KeymapComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 330: def DoKeymapAction(arglead: string = null_string)

line 345: 

line 346: ## Fuzzy Search Global and Local Marks

line 347: 

line 348: enable_hook->add(() => {

line 351: cmd.AddOnSpaceHook('VSMark')

line 352: def MarkComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 357: def DoMarkAction(arglead: string = null_string)

line 363: 

line 364: ## Fuzzy Search Registers

line 365: 

line 366: enable_hook->add(() => {

line 369: cmd.AddOnSpaceHook('VSRegister')

line 370: def RegisterComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 375: def DoRegisterAction(arglead: string = null_string)

line 381: 

line 382: ## Fuzzy Search Changelist

line 383: 

line 384: enable_hook->add(() => {

line 387: cmd.AddOnSpaceHook('VSChangelist')

line 388: def ChangelistComplete(arglead: string, cmdline: string, cursorpos: number): list<any>

line 393: def DoChangeListAction(arglead: string = null_string)

line 399: 

line 400: ## Fuzzy Search Code Artifacts (Use VSGlobal instead)

line 401: 

line 402: cmd.AddOnSpaceHook('VSArtifacts')

line 403: export def ArtifactsComplete(arglead: string, cmdline: string, cursorpos: number,

line 407: export def Jump(lnum: number)

line 411: export def DoArtifactsAction(arglead = null_string)

line 414: export def Artifacts(patterns: list<string>): list<any>

line 428: 

line 429: ##

line 430: 

line 431: export def Enable()

line 436: 

line 437: export def Disable()

line 446: 

line 447: :defcompile  # Debug: See note above.

chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons)
fchdir() to previous dir
line 448: 

line 449: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vimsuggest/addons/addons.vim
continuing in vimsuggest#cmd#Teardown
line 2:         augroup VimSuggestCmdAutocmds

line 2:  autocmd!

line 9:             autocmd CmdlineEnter    :  {^@                state = State.new()^@                EnableCmdline()^@                for Hook in State.cmdline_enter_hook^@                    Hook()^@                endfor^@            }

line 10:             autocmd CmdlineChanged  :  options.alwayson ? Complete() : TabComplete()

line 18:             autocmd CmdlineLeave    :  {^@                if state != null_object # <c-s> removes this object^@                    CmdlineLeaveHook(state.pmenu.SelectedItem(),^@                        state.pmenu.FirstItem(), state.exit_key)^@                    state.Clear()^@                    state = null_object^@                endif^@            }

line 19:         augroup END

line 24: 

line 25: autocmd VimEnter * call g:VimSuggestSetOptions(s:vim_suggest)

finished sourcing /Users/piotr/.config/vim/init/vimsuggest.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 47: source ~/.config/vim/init/vsnip.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 47: sourcing "/Users/piotr/.config/vim/init/vsnip.vim"
line 1: " NOTE: You can use other key to expand snippet.

line 2: 

line 3: " Expand

line 4: imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

line 5: smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

line 6: 

line 7: " Expand or jump

line 8: imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

line 9: smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

line 10: 

line 11: " Jump forward or backward

line 12: imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'

line 13: smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'

line 14: imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

line 15: smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

line 16: 

line 17: " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.

line 18: " See https://github.com/hrsh7th/vim-vsnip/pull/50

line 19: nmap        s   <Plug>(vsnip-select-text)

line 20: xmap        s   <Plug>(vsnip-select-text)

line 21: nmap        S   <Plug>(vsnip-cut-text)

line 22: xmap        S   <Plug>(vsnip-cut-text)

line 23: 

line 24: " If you want to use snippet for multiple filetypes, you can `g:vsnip_filetypes` for it.

line 25: let g:vsnip_filetypes = {}

line 26: let g:vsnip_filetypes.javascriptreact = ['javascript']

line 27: let g:vsnip_filetypes.typescriptreact = ['typescript']

line 28: let g:vsnip_filetypes.ruby = ['rails']

finished sourcing /Users/piotr/.config/vim/init/vsnip.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 48: source ~/.config/vim/init/netrw.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 48: sourcing "/Users/piotr/.config/vim/init/netrw.vim"
line 1: " let g:netrw_altv = 1

line 2: " let g:netrw_alto = 1

line 3: let g:netrw_browse_split = 0

finished sourcing /Users/piotr/.config/vim/init/netrw.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
line 49: source ~/.config/vim/init/lightline.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 49: sourcing "/Users/piotr/.config/vim/init/lightline.vim"
line 1: " Lightline configuration

line 2: 

line 3: let g:iconOctocat = "\ue708"

line 4: 

line 5: let g:lightline = { 'colorscheme': 'dayfox', 'active': { 'left':  [ [ 'mode', 'paste' ],            [ 'gitbranch' ],            [ 'readonly', 'filename', 'modified', 'lsp_status' ] ], 'right': [ [ 'lineinfo' ],            [ 'percent', 'filetype' ],            [ 'gutentags' ] ], }, 'inactive': { 'left':  [ [ 'filename' ] ], 'right': [ [ 'lineinfo' ],            [ 'percent' ] ] }, 'tabline': { 'left': [ [ 'tabs' ] ], 'right': [ [ 'close' ] ], }, 'component': { 'lineinfo': '%3l:%-2v%<', }, 'component_expand': { 'gutentags':    'gutentags#statusline', }, 'component_function': { 'fileformat': 'LightlineFileformat', 'filename': 'LightlineFilename', 'filetype': 'LightlineFiletype', 'gitbranch': 'LightlineGitBranch', 'lsp_status': 'LightlineLspStatus', 'mode': 'LightlineMode', 'readonly': 'LightlineReadonly', }, 'mode_map': { 'n' : 'N', 'i' : 'I', 'R' : 'R', 'v' : 'V', 'V' : 'VL', "\<C-v>": 'VB', 'c' : 'C', 's' : 'S', 'S' : 'SL', "\<C-s>": 'SB', 't': 'T', } }

line 53: 

line 54: function! LightlineLspStatus()

line 87: 

line 88: function! LightlineGitBranch()

line 99: 

line 100: function! LightlineFileformat()

line 103: 

line 104: function! LightlineFiletype()

line 107: 

line 108: function! LightlineFilename()

line 112: 

line 113: function! LightlineReadonly()

line 117: 

line 118: function! LightlineMode()

line 121: 

line 122: function s:is_netrw()

line 125: 

line 126: augroup my_lightline_lsp

line 127:   autocmd!

line 128:   autocmd User lsp_progress_updated call lightline#update()

line 129:   autocmd User lsp_server_init call lightline#update()

line 130: augroup END

line 131: 

line 132: augroup MyGutentagsStatusLineRefresher

line 133:   autocmd!

line 134:   autocmd User GutentagsUpdating call lightline#update()

line 135:   autocmd User GutentagsUpdated call lightline#update()

line 136: augroup END

finished sourcing /Users/piotr/.config/vim/init/lightline.vim
continuing in /Users/piotr/.config/vim/init/plugins.vim
finished sourcing /Users/piotr/.config/vim/init/plugins.vim
continuing in /Users/piotr/.config/vim/vimrc
line 15: source ~/.config/vim/init/remap.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 15: sourcing "/Users/piotr/.config/vim/init/remap.vim"
line 1: vim9script

line 2: 

line 3: packadd scope.vim

Searching for "pack/*/start/scope.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/scope.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/scope.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/scope.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/scope.vim"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/scope.vim"
not found in 'packpath': "pack/*/start/scope.vim"
Searching for "pack/*/opt/scope.vim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/scope.vim"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin)
fchdir() to previous dir
line 3: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim"
line 1: if !has('vim9script') ||  v:version < 901

line 2:     echoerr 'Needs Vim version 9.1 and above'

line 3:     finish

line 4: endif

line 5: vim9script

line 6: 

line 7: g:loaded_scope = true

line 9: import autoload '../autoload/scope/command.vim'

line 13: set grepformat^=%f:%l:%c:%m

line 14: 

line 15: command -nargs=+ -complete=custom,command.Completor Scope command.DoCommand(<f-args>)

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim
continuing in /Users/piotr/.config/vim/init/remap.vim
line 3: augroup filetypedetect

line 3: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/scope.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/scope.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/scope.vim"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/scope.vim"
line 4: import autoload 'scope/fuzzy.vim'

Searching for "autoload/scope/fuzzy.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/plugins/opt/scope.vim,/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/autoload/scope/fuzzy.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/autoload/scope/fuzzy.vim"
line 7: nnoremap <silent><localleader><space> :nohlsearch<cr>

line 8: 

line 9: # Ale

line 10: nmap <silent> <localleader>aj :ALENextWrap<CR>

line 11: nmap <silent> <localleader>ak :ALEPreviousWrap<CR>

line 12: nmap <silent> <localleader>al :ALELint<CR>

line 13: nmap <silent> <localleader>ad :ALEDetail<CR>

line 14: nmap <silent> <localleader>at :ALEToggle<CR>

line 15: nmap <localleader>ar <Plug>(ale_rename)

line 16: nmap gd <plug>(ale_go_to_definition_in_split)

line 17: nmap gr <plug>(ale_find_references)

line 18: nmap K <plug>(ale_hover)

line 19: 

line 20: # Test

line 21: nmap <silent> <localleader>tt :TestNearest<CR>

line 22: nmap <silent> <localleader>tf :TestFile<CR>

line 23: nmap <silent> <localleader>ts :TestSuite<CR>

line 24: nmap <silent> <localleader>tl :TestLast<CR>

line 25: nmap <silent> <localleader>tv :TestVisit<CR>

line 26: 

line 27: # Easy window navigation

line 28: map <C-h> <C-w>h

line 29: map <C-j> <C-w>j

line 30: map <C-k> <C-w>k

line 31: map <C-l> <C-w>l

line 32: 

line 33: # Scope

line 34: def FindCmd(dir: string = '.'): string

line 46: 

line 47: nnoremap <leader><space> <scriptcmd>fuzzy.Buffer()<cr>

line 48: nnoremap <leader>sb <scriptcmd>fuzzy.Buffer()<cr>

line 49: nnoremap <leader>sf <scriptcmd>fuzzy.File(FindCmd())<cr>

line 50: nnoremap <leader>sg <scriptcmd>fuzzy.GitFile()<cr>

line 51: nnoremap <leader>sr <scriptcmd>fuzzy.Grep('rg --vimgrep --smart-case')<cr>

line 52: 

line 53: # Shortcut to jump to next conflict marker

line 54: nmap <silent> <localleader>c /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>

finished sourcing /Users/piotr/.config/vim/init/remap.vim
continuing in /Users/piotr/.config/vim/vimrc
line 16: source ~/.config/vim/init/colorscheme.vim

chdir(/Users/piotr/.config/vim/init)
fchdir() to previous dir
line 16: sourcing "/Users/piotr/.config/vim/init/colorscheme.vim"
line 1: augroup update_bat_theme

line 2:     autocmd!

line 3:     autocmd colorscheme * call ToggleBatEnvVar()

line 4: augroup end

line 5: 

line 6: function! ToggleBatEnvVar()

line 13: 

line 14: " Set the colorscheme

line 15: set background=light

line 16: packadd nightfox.nvim

Searching for "pack/*/start/nightfox.nvim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/nightfox.nvim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/nightfox.nvim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/nightfox.nvim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/nightfox.nvim"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/nightfox.nvim"
not found in 'packpath': "pack/*/start/nightfox.nvim"
Searching for "pack/*/opt/nightfox.nvim" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/opt/nightfox.nvim"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin)
fchdir() to previous dir
line 16: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim"
line 1: " Load only once

line 2: if exists('g:loaded_nightfox') | finish | endif

line 2:  finish | endif

line 2:  endif

line 3: 

line 4: command! NightfoxCompile lua require('nightfox').compile()

line 5: command! NightfoxInteractive lua require('nightfox.interactive').attach()

line 6: 

line 7: let g:loaded_nightfox = 1

finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
line 16: augroup filetypedetect

line 16: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/opt/nightfox.nvim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/opt/nightfox.nvim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/opt/nightfox.nvim"
Searching for "/Users/piotr/.config/vim/after/pack/*/opt/nightfox.nvim"
line 17: colorscheme dayfox

Searching for "colors/lists/default.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim,/Users/piotr/.config/vim/pack/plugins/opt/scope.vim,/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists)
fchdir() to previous dir
line 17: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
line 1: " Maintainer:  Drew Vogel <dvogel@sidejump.org>

line 2: " Last Change: 2024 Mar 20

line 3: "

line 4: " Replaced rgb.txt as the source of de facto standard color names. This is

line 5: " sourced each time the colorscheme command is run. It is also sourced each

line 6: " time the highlight command fails to recognize a gui color. You can override

line 7: " these colors by introducing a new colors/lists/default.vim file earlier in

line 8: " the runtimepath.

line 9: " Note: the color names should be in lower case, because Vim will lookup the

line 10: " a color by its lower case name.

line 11: 

line 12: " make sure line continuation works

line 13: let s:keepcpo = &cpo

line 14: set cpo&vim

line 15: 

line 16: function! s:Cleanup()

line 20: 

line 21: function! s:AddColors(cnames) abort

line 40: 

line 41: if exists('s:default_cnames')

line 42:   call s:AddColors(s:default_cnames)

line 43:   call s:Cleanup()

line 44:   finish

line 45: endif

line 46: 

line 47: let s:default_cnames = { 'snow': '#fffafa', 'ghost white': '#f8f8ff', 'ghostwhite': '#f8f8ff', 'white smoke': '#f5f5f5', 'whitesmoke': '#f5f5f5', 'gainsboro': '#dcdcdc', 'floral white': '#fffaf0', 'floralwhite': '#fffaf0', 'old lace': '#fdf5e6', 'oldlace': '#fdf5e6', 'linen': '#faf0e6', 'antique white': '#faebd7', 'antiquewhite': '#faebd7', 'papaya whip': '#ffefd5', 'papayawhip': '#ffefd5', 'blanched almond': '#ffebcd', 'blanchedalmond': '#ffebcd', 'bisque': '#ffe4c4', 'peach puff': '#ffdab9', 'peachpuff': '#ffdab9', 'navajo white': '#ffdead', 'navajowhite': '#ffdead', 'moccasin': '#ffe4b5', 'cornsilk': '#fff8dc', 'ivory': '#fffff0', 'lemon chiffon': '#fffacd', 'lemonchiffon': '#fffacd', 'seashell': '#fff5ee', 'honeydew': '#f0fff0', 'mint cream': '#f5fffa', 'mintcream': '#f5fffa', 'azure': '#f0ffff', 'alice blue': '#f0f8ff', 'aliceblue': '#f0f8ff', 'lavender': '#e6e6fa', 'lavender blush': '#fff0f5', 'lavenderblush': '#fff0f5', 'misty rose': '#ffe4e1', 'mistyrose': '#ffe4e1', 'white': '#ffffff', 'blac

line 837: 

line 838: call s:AddColors(s:default_cnames)

calling <SNR>93_AddColors({'medium blue': '#0000cd', 'indianred'...mon3': '#cd7054', 'salmon4': '#8b4c39'})

line 1:   call extend(v:colornames, a:cnames, 'keep')

line 2: 

line 3:   " all keys should be in lower case, convert keys that are not yet

line 4:   let len_after = len(v:colornames)

line 5:   if len_after == len(a:cnames)

line 6:     " after extend(): v:colornames has all the keys of default_cnames

line 7:     " checked: v:colornames also has no extra keys

line 8:     " => keys are the same, and keys(default_cnames) are known to be ok

line 9:     return

<SNR>93_AddColors returning #0

continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim

line 839: call s:Cleanup()

calling <SNR>93_Cleanup()

line 1:   let &cpo = s:keepcpo

line 2:   unlet s:keepcpo

<SNR>93_Cleanup returning #0

continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim

line 840: 

line 841: "vim: sw=4

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/after/colors/lists/default.vim"
Searching for "colors/dayfox.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim,/Users/piotr/.config/vim/pack/plugins/opt/scope.vim,/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors)
fchdir() to previous dir
line 17: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
line 1: lua << EOF

line 9: if exists("colors_name")

line 9:   hi clear

line 9: endif

line 9: set termguicolors

line 9: let g:colors_name = "dayfox"

line 9: set background=light

line 9: let g:terminal_color_2 = '#396847'

line 9: let g:terminal_color_12 = '#4863b6'

line 9: let g:terminal_color_15 = '#f4ece6'

line 9: let g:terminal_color_14 = '#488d93'

line 9: let g:terminal_color_7 = '#f2e9e1'

line 9: let g:terminal_color_9 = '#b3434e'

line 9: let g:terminal_color_6 = '#287980'

line 9: let g:terminal_color_8 = '#534c45'

line 9: let g:terminal_color_10 = '#577f63'

line 9: let g:terminal_color_13 = '#8452d5'

line 9: let g:terminal_color_5 = '#6e33ce'

line 9: let g:terminal_color_3 = '#ac5402'

line 9: let g:terminal_color_4 = '#2848a9'

line 9: let g:terminal_color_0 = '#352c24'

line 9: let g:terminal_color_1 = '#a5222f'

line 9: let g:terminal_color_11 = '#b86e28'

line 9: highlight! link CmpItemKindConstant Constant

line 9: highlight! link Label Conditional

line 9: highlight GlyphPalette6 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette15 guifg=#f4ece6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitDeleted guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolCount Special

line 9: highlight diffIndexLine guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNumber Number

line 9: highlight! link WhichKeyDesc Keyword

line 9: highlight! link LazyProp LineNr

line 9: highlight Todo guifg=#f6f2ee guibg=#2848a9 gui=NONE guisp=NONE

line 9: highlight WinBar guifg=#824d5b guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight PounceMatch guifg=#3d2b5a guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight DiffText guifg=NONE guibg=#a4aed2 gui=NONE guisp=NONE

line 9: highlight NeoTreeRootName guifg=#955f61 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link NavicIconsVariable Identifier

line 9: highlight! link CmpItemKindEnum Constant

line 9: highlight MiniHipatternsFixme guifg=#e4dcd4 guibg=#a5222f gui=bold guisp=NONE

line 9: highlight MatchParen guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight IndentBlanklineIndent1 guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump2dSpotAhead guifg=#223d90 guibg=#e4dcd4 gui=nocombine guisp=NONE

line 9: highlight SneakScope guifg=NONE guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNamespace Identifier

line 9: highlight! link MiniPickMatchRanges DiagnosticFloatingHint

line 9: highlight LspTroubleNormal guifg=#824d5b guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NormalFloat guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsEnumMember Identifier

line 9: highlight GlyphPalette14 guifg=#488d93 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindOperator Operator

line 9: highlight LspSagaFinderSelection guifg=#e7d2be guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindEnumMember Identifier

line 9: highlight! link DapUIFrameName Normal

line 9: highlight NvimTreeGitNew guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyDEBUGBorder guifg=#98ad9b guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspFloatWinBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferInactive guifg=#837a72 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsEnum Constant

line 9: highlight NeoTreeDirectoryIcon guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowCyan guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight ErrorMsg guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeNormal guifg=#e4dcd4 guibg=#287980 gui=bold guisp=NONE

line 9: highlight IndentBlanklineChar guifg=#d3c7bb guibg=NONE gui=NONE guisp=NONE

line 9: highlight GitSignsDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight Search guifg=#3d2b5a guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight DapUIWatchesValue guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineModifiedCurrent guifg=#aab0ad guibg=#643f61 gui=bold guisp=NONE

line 9: highlight MiniTestFail guifg=#a5222f guibg=NONE gui=bold guisp=NONE

line 9: highlight Type guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaHeader guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeIndentMarker guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferCurrentSign guifg=#2848a9 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight NotifyWARNBorder guifg=#d1a378 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Visual guifg=NONE guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight! link WhichKeySeparator Comment

line 9: highlight! link CmpItemKindVariable Identifier

line 9: highlight! link SpecialChar Special

line 9: highlight! link CmpItemKindMethod Function

line 9: highlight DiagnosticVirtualTextInfo guifg=#2848a9 guibg=#b8bfd9 gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignWarn DiagnosticWarn

line 9: highlight! link MiniFilesNormal NormalFloat

line 9: highlight TSRainbowRed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link WhichKeyGroup Function

line 9: highlight ColorColumn guifg=NONE guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight BufferVisibleSign guifg=#2848a9 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight TabLineSel guifg=#f6f2ee guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordText LspReferenceText

line 9: highlight! link NavicIconsConstant Constant

line 9: highlight! link MiniPickPreviewLine CursorLine

line 9: highlight Conceal guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Exception Keyword

line 9: highlight! link Repeat Conditional

line 9: highlight MiniIconsOrange guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Float Number

line 9: highlight! link MiniStatuslineInactive StatusLineNC

line 9: highlight MiniDepsTitleUpdate guifg=#e4dcd4 guibg=#396847 gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolView Delimiter

line 9: highlight! link MiniStarterHeader Title

line 9: highlight NvimTreeRootFolder guifg=#955f61 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link PreCondit PreProc

line 9: highlight NeotestRunning guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniDiffSignAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Special guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestFailed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickIconFile MiniPickNormal

line 9: highlight! link NavicIconsEvent Constant

line 9: highlight BufferCurrent guifg=#3d2b5a guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link MiniPickPrompt DiagnosticFloatingInfo

line 9: highlight MiniHipatternsTodo guifg=#e4dcd4 guibg=#396847 gui=bold guisp=NONE

line 9: highlight! link QuickFixLine CursorLine

line 9: highlight! link MiniDepsMsgBreaking DiagnosticWarn

line 9: highlight MiniIconsPurple guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignInfo DiagnosticInfo

line 9: highlight! link Structure Type

line 9: highlight! link VertSplit WinSeparator

line 9: highlight! link AerialLine Search

line 9: highlight DapUIBreakpointsInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestPassed guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight WinBarNC guifg=#824d5b guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight NeotestSkipped guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineOk guifg=NONE guibg=NONE gui=undercurl guisp=#396847

line 9: highlight DiagnosticInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindConstructor Function

line 9: highlight! link CmpItemKindModule Identifier

line 9: highlight! link WildMenu Pmenu

line 9: highlight! link qfLineNr lineNr

line 9: highlight GlyphPalette4 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyDEBUGIcon NotifyDEBUGTitle

line 9: highlight LspSagaRenameBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueNextKey DiagnosticFloatingHint

line 9: highlight! link CmpItemMenu Comment

line 9: highlight! link qfFileName Directory

line 9: highlight GitSignsChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniNotifyBorder FloatBorder

line 9: highlight Cursor guifg=#f6f2ee guibg=#3d2b5a gui=NONE guisp=NONE

line 9: highlight WarningMsg guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Question MoreMsg

line 9: highlight IndentBlanklineIndent3 guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DashboardFooter guifg=#7f5152 guibg=NONE gui=italic guisp=NONE

line 9: highlight! link NotifyBackground NormalFloat

line 9: highlight StatusLine guifg=#643f61 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNull Type

line 9: highlight CmpDocumentationBorder guifg=#e7d2be guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight FoldColumn guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignError DiagnosticError

line 9: highlight! link MiniPickPreviewRegion IncSearch

line 9: highlight! link NavicIconsProperty Identifier

line 9: highlight! link CmpItemKindInterface Constant

line 9: highlight! link DashboardHeader Title

line 9: highlight! link SpecialKey NonText

line 9: highlight SignifySignDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferTabpage guifg=#d3c7bb guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight MiniDepsTitleError guifg=#e4dcd4 guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight AlphaHeaderLabel guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Include PreProc

line 9: highlight MiniStarterItemBullet guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesCursorLine CursorLine

line 9: highlight DiagnosticVirtualTextHint guifg=#396847 guibg=#bdc9bc gui=NONE guisp=NONE

line 9: highlight NvimTreeGitMerge guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolLine Title

line 9: highlight BufferCurrentTarget guifg=#a5222f guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link Debug Special

line 9: highlight CursorLine guifg=NONE guibg=#d3c7bb gui=NONE guisp=NONE

line 9: highlight NeogitNotificationWarning guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent2 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette0 guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesTitle FloatTitle

line 9: highlight NvimTreeOpenedFolderName guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyWARNTitle guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LspSagaCodeActionContent String

line 9: highlight Directory guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindField Identifier

line 9: highlight Normal guifg=#3d2b5a guibg=#f6f2ee gui=NONE guisp=NONE

line 9: highlight! link MiniClueNextKeyWithPostkeys DiagnosticFloatingError

line 9: highlight rainbowcol2 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickHeader DiagnosticFloatingHint

line 9: highlight NeotestFocused guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight! link NeoTreeDimText Conceal

line 9: highlight DapUIVariable guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IncSearch guifg=#f6f2ee guibg=#396847 gui=NONE guisp=NONE

line 9: highlight! link MiniFilesBorderModified DiagnosticFloatingWarn

line 9: highlight rainbowcol4 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffAdded guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindTypeParameter Identifier

line 9: highlight MiniStatuslineDevinfo guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NotifyDEBUGTitle guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterQuery guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitRemote guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueBorder FloatBorder

line 9: highlight! link CmpItemKindUnit Constant

line 9: highlight NeoTreeSymbolicLinkTarget guifg=#b25dc0 guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrMatch guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrDeprecated guifg=#824d5b guibg=NONE gui=strikethrough guisp=NONE

line 9: highlight TSRainbowGreen guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickMatchMarked Visual

line 9: highlight diffLine guifg=#7f5152 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaShortcut guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Typedef Type

line 9: highlight! link DashboardShortCut Identifier

line 9: highlight DapUIScope guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaSignatureHelpBorder guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeImageFile guifg=#534c45 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitNotificationInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsTitleSame DiffText

line 9: highlight TSRainbowViolet guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight HopNextKey guifg=#287980 guibg=NONE gui=bold guisp=NONE

line 9: highlight CmpItemKindSnippet guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette10 guifg=#577f63 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffDeleteHighlight guifg=NONE guibg=#e6c8c8 gui=NONE guisp=NONE

line 9: highlight BufferVisibleIndex guifg=#2848a9 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindFunction Function

line 9: highlight! link StorageClass Type

line 9: highlight TabLine guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NeotestMarked guifg=#3d2b5a guibg=NONE gui=bold guisp=NONE

line 9: highlight! link FidgetTitle Title

line 9: highlight Bold guifg=NONE guibg=NONE gui=bold guisp=NONE

line 9: highlight NeoTreeDotfile guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeFileNameOpened guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitConflict guifg=#955f61 guibg=NONE gui=italic guisp=NONE

line 9: highlight ModesCopy guifg=NONE guibg=#ac5402 gui=NONE guisp=NONE

line 9: highlight Underlined guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight NeogitBranch guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyTRACEIcon NotifyTRACETitle

line 9: highlight! link MiniCursorwordCurrent LspReferenceText

line 9: highlight MiniTablineCurrent guifg=#643f61 guibg=#aab0ad gui=bold guisp=NONE

line 9: highlight SpellRare guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight TabLineFill guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrMatchFuzzy guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIconsBlue guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffNewFile guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIModifiedValue guifg=#352c24 guibg=NONE gui=bold guisp=NONE

line 9: highlight DiffAdd guifg=NONE guibg=#d0d6cd gui=NONE guisp=NONE

line 9: highlight GlyphPalette11 guifg=#b86e28 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineModifiedVisible guifg=#dbd1dd guibg=#643f61 gui=NONE guisp=NONE

line 9: highlight HopUnmatched guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniFilesFile guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NonText guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LspSagaBorderTitle Title

line 9: highlight Operator guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickBorderBusy DiagnosticFloatingWarn

line 9: highlight NeoTreeGitUntracked guifg=#8452d5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NeotestIndent Conceal

line 9: highlight AerialGuide guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterFooter guifg=#7f5152 guibg=NONE gui=italic guisp=NONE

line 9: highlight LspFloatWinNormal guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineError guifg=NONE guibg=NONE gui=undercurl guisp=#a5222f

line 9: highlight rainbowcol1 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellLocal guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight! link LazyButtonActive TabLineSel

line 9: highlight! link CmpItemKindValue Keyword

line 9: highlight FloatBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIDecoration guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestFile guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SignifySignAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DapUIType Type

line 9: highlight DapUIValue guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticVirtualTextError guifg=#a5222f guibg=#deb4b5 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsBoolean Boolean

line 9: highlight MiniDiffSignChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsPlaceholder Comment

line 9: highlight MiniJump2dSpot guifg=#287980 guibg=NONE gui=bold guisp=NONE

line 9: highlight MiniStatuslineModeReplace guifg=#e4dcd4 guibg=#a5222f gui=bold guisp=NONE

line 9: highlight! link FidgetTask LineNr

line 9: highlight rainbowcol3 guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LazyDimmed LineNr

line 9: highlight! link NavicIconsTypeParameter Identifier

line 9: highlight NotifyERRORBorder guifg=#ce8a8f guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpDocumentation guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link DapUIThread String

line 9: highlight MiniIconsCyan guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniStarterItem Normal

line 9: highlight BufferVisibleMod guifg=#ac5402 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight PounceGap guifg=#3d2b5a guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent5 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueDescGroup DiagnosticFloatingWarn

line 9: highlight NeoTreeFileName guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent4 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Folded guifg=#824d5b guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link SymbolOutlineConnector Conceal

line 9: highlight! link SpecialComment Special

line 9: highlight ModesDelete guifg=NONE guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight! link FocusedSymbol Search

line 9: highlight! link MiniClueDescSingle NormalFloat

line 9: highlight DapUIBreakpointsPath guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaHoverBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniNotifyNormal NormalFloat

line 9: highlight MiniIconsRed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsKey Identifier

line 9: highlight! link MiniTablineFill TabLineFill

line 9: highlight! link MiniPickIconDirectory Directory

line 9: highlight IndentBlanklineIndent6 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffContextHighlight guifg=NONE guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight Italic guifg=NONE guibg=NONE gui=italic guisp=NONE

line 9: highlight Comment guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight LeapMatch guifg=#f6f2ee guibg=#8b369a gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverContext DiffChange

line 9: highlight! link DiagnosticSignHint DiagnosticHint

line 9: highlight CocInlayHint guifg=#837a72 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordRead LspReferenceText

line 9: highlight! link MiniDiffOverDelete DiffDelete

line 9: highlight MiniTablineHidden guifg=#824d5b guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NotifyTRACEBorder guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight LineNr guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyERRORTitle guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight GitGutterChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SignColumn guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestNamespace guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickMatchCurrent CursorLine

line 9: highlight Pmenu guifg=#3d2b5a guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight NvimTreeOpenedFile guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitAdded guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NavicSeparator guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemKindDefault guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffOldFile guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette3 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverChange DiffText

line 9: highlight TSRainbowBlue guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterCurrent guifg=NONE guibg=NONE gui=nocombine guisp=NONE

line 9: highlight! link NavicIconsMethod Function

line 9: highlight! link MiniFilesDirectory Directory

line 9: highlight! link CurSearch IncSearch

line 9: highlight HopNextKey2 guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsInfo DiagnosticInfo

line 9: highlight! link MiniJump2dDim Comment

line 9: highlight! link MiniOperatorsExchangeFrom IncSearch

line 9: highlight DiagnosticError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsField Identifier

line 9: highlight DiagnosticOk guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeOther guifg=#e4dcd4 guibg=#2848a9 gui=bold guisp=NONE

line 9: highlight LightspeedGreyWash guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight rainbowcol6 guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineInfo guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight! link MiniPickBorderText FloatTitle

line 9: highlight! link CursorIM Cursor

line 9: highlight! link WhichKey Identifier

line 9: highlight BufferInactiveIndex guifg=#837a72 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsModule Identifier

line 9: highlight! link LspSagaCodeActionTitle Title

line 9: highlight DiagnosticWarn guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeFolderName guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiffChange guifg=NONE guibg=#cdd0e0 gui=NONE guisp=NONE

line 9: highlight! link NeoTreeNormalNC NeoTreeNormal

line 9: highlight! link MiniMapNormal NormalFloat

line 9: highlight AlphaFooter guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsChangeRemoved diffRemoved

line 9: highlight Whitespace guifg=#d3c7bb guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIStoppedThread guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniDiffSignDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyINFOIcon NotifyINFOTitle

line 9: highlight! link CmpItemKindEvent Constant

line 9: highlight GlyphPalette8 guifg=#534c45 guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferVisible guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link Character String

line 9: highlight! link WhichKeySeperator Comment

line 9: highlight! link WhichKeyFloat NormalFloat

line 9: highlight BufferTabpages guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight MiniTestPass guifg=#396847 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link WhichKeyValue Comment

line 9: highlight! link DapUIBreakpointsLine DapUILineNumber

line 9: highlight! link NavicIconsInterface Constant

line 9: highlight ModesInsert guifg=NONE guibg=#287980 gui=NONE guisp=NONE

line 9: highlight diffFile guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineVisible guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link MiniDepsHint DiagnosticHint

line 9: highlight! link MiniClueTitle FloatTitle

line 9: highlight MiniStatuslineModeVisual guifg=#e4dcd4 guibg=#6e33ce gui=bold guisp=NONE

line 9: highlight MiniIconsYellow guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Title guifg=#223d90 guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitDiffDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight ModeMsg guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitDiffAddHighlight guifg=NONE guibg=#d0d6cd gui=NONE guisp=NONE

line 9: highlight! link NvimTreeVertSplit VertSplit

line 9: highlight NvimTreeSpecialFile guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIBreakpointsCurrentLine guifg=#396847 guibg=NONE gui=bold guisp=NONE

line 9: highlight GlyphPalette5 guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiffDelete guifg=NONE guibg=#e6c8c8 gui=NONE guisp=NONE

line 9: highlight! link MiniSurround IncSearch

line 9: highlight NavicText guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindClass Type

line 9: highlight BufferInactiveMod guifg=#e0c3a7 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NeotestDir guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TelescopeSelectionCaret guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitNotificationError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickNormal NormalFloat

line 9: highlight! link MiniDepsTitle Title

line 9: highlight! link NavicIconsPackage Identifier

line 9: highlight! link DiagnosticSignOk DiagnosticOk

line 9: highlight NvimTreeEmptyFolderName guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniHipatternsNote guifg=#e4dcd4 guibg=#2848a9 gui=bold guisp=NONE

line 9: highlight rainbowcol7 guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffRemoved guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterSection guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferInactiveTarget guifg=#a5222f guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight BufferInactiveSign guifg=#d3c7bb guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NotifyTRACETitle guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesBorder FloatBorder

line 9: highlight GlyphPalette7 guifg=#f4ece6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link SignColumnSB SignColumn

line 9: highlight! link NagicIconsOperator Operator

line 9: highlight IndentBlanklineContextStart guifg=NONE guibg=NONE gui=underline guisp=#352c24

line 9: highlight BufferCurrentIndex guifg=#2848a9 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight HopNextKey1 guifg=#2848a9 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link NavicIconsConstructor Function

line 9: highlight! link Delimiter Special

line 9: highlight! link CmpItemKindStruct Type

line 9: highlight! link MiniStarterInactive Comment

line 9: highlight! link PmenuSbar Pmenu

line 9: highlight DiagnosticUnderlineHint guifg=NONE guibg=NONE gui=undercurl guisp=#396847

line 9: highlight! link NavicIconsFile Directory

line 9: highlight StatusLineNC guifg=#824d5b guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NvimTreeGitDirty guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TelescopeBorder guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link TelescopeSelection CursorLine

line 9: highlight MiniFilesTitleFocused guifg=#3d2b5a guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitHunkHeaderHighlight guifg=#2848a9 guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight MiniTrailspace guifg=NONE guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight diffChanged guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyINFOTitle guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump guifg=#e4dcd4 guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight LeapBackdrop guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowYellow guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeNormal guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsString String

line 9: highlight MiniIconsAzure guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniHipatternsHack guifg=#e4dcd4 guibg=#ac5402 gui=bold guisp=NONE

line 9: highlight DiagnosticHint guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniCursorword LspReferenceText

line 9: highlight DapUIWatchesError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineWarn guifg=NONE guibg=NONE gui=undercurl guisp=#ac5402

line 9: highlight LeapLabelPrimary guifg=#f6f2ee guibg=#8b369a gui=NONE guisp=NONE

line 9: highlight GlyphPalette9 guifg=#b3434e guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette13 guifg=#8452d5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordWrite LspReferenceText

line 9: highlight! link MiniDepsChangeAdded diffAdded

line 9: highlight NormalNC guifg=#3d2b5a guibg=#f6f2ee gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeCommand guifg=#e4dcd4 guibg=#ac5402 gui=bold guisp=NONE

line 9: highlight MiniCompletionActiveParameter guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight NvimTreeNormal guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link lCursor Cursor

line 9: highlight Keyword guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight EndOfBuffer guifg=#f6f2ee guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Boolean Number

line 9: highlight PounceAccept guifg=#f6f2ee guibg=#7f5152 gui=NONE guisp=NONE

line 9: highlight CursorLineNr guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight LspSagaDefPreviewBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellBad guifg=NONE guibg=NONE gui=undercurl guisp=#a5222f

line 9: highlight GitSignsAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitModified guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyINFOBorder guifg=#8f9dcc guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowOrange guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump2dSpotUnique guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight NvimTreeSymlink guifg=#b25dc0 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickBorder FloatBorder

line 9: highlight DiagnosticVirtualTextOk guifg=#396847 guibg=#bdc9bc gui=NONE guisp=NONE

line 9: highlight! link NeotestTest Normal

line 9: highlight MiniStarterItemPrefix guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaCodeActionBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight Substitute guifg=#f6f2ee guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight! link MiniIndentscopeSymbol Delimiter

line 9: highlight! link VisualNOS visual

line 9: highlight GitGutterDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIWatchesEmpty guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeDirectoryName guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsFunction Function

line 9: highlight! link Define PreProc

line 9: highlight! link NotifyERRORIcon NotifyERRORTitle

line 9: highlight PmenuThumb guifg=NONE guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight LspTroubleCount guifg=#6e33ce guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight Conditional guifg=#5e2baf guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineContextChar guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsClass Type

line 9: highlight! link NvimTreeGitRenamed NvimTreeGitDeleted

line 9: highlight Number guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitHunkHeader guifg=#2848a9 guibg=#d3c7bb gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeInsert guifg=#e4dcd4 guibg=#396847 gui=bold guisp=NONE

line 9: highlight MiniTablineModifiedHidden guifg=#dbd1dd guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight String guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindReference Keyword

line 9: highlight NeoTreeGitIgnored guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaButtons guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight PreProc guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferVisibleTarget guifg=#a5222f guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link MiniAnimateNormalFloat NormalFloat

line 9: highlight! link NavicIconsStruct Type

line 9: highlight WinSeparator guifg=#e4dcd4 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette1 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight LeapLabelSecondary guifg=#f6f2ee guibg=#22676d gui=NONE guisp=NONE

line 9: highlight MoreMsg guifg=#2848a9 guibg=NONE gui=bold guisp=NONE

line 9: highlight Error guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIconsGreen guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Tag Special

line 9: highlight MiniIconsGrey guifg=#302b5d guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CursorColumn CursorLine

line 9: highlight MiniAnimateCursor guifg=NONE guibg=NONE gui=reverse,nocombine guisp=NONE

line 9: highlight PmenuSel guifg=NONE guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverAdd DiffAdd

line 9: highlight MiniTablineTabpagesection guifg=#3d2b5a guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight FernBranchText guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyWARNIcon NotifyWARNTitle

line 9: highlight! link DapUISource Keyword

line 9: highlight! link CmpItemKindProperty Identifier

line 9: highlight MiniTestEmphasis guifg=NONE guibg=NONE gui=bold guisp=NONE

line 9: highlight! link MiniClueSeparator DiagnosticFloatingInfo

line 9: highlight MiniStatuslineFileinfo guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight ModesVisual guifg=NONE guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight NeotestAdapterName guifg=#a440b5 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link DashboardCenter String

line 9: highlight! link NeotestExpandMarker Conceal

line 9: highlight! link NvimTreeGitStaged NvimTreeGitStaged

line 9: highlight! link MiniStatuslineFilename StatusLine

line 9: highlight NeoTreeIndentMarker guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindKeyword Identifier

line 9: highlight rainbowcol5 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeFolderIcon guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIndentscopePrefix guifg=NONE guibg=NONE gui=nocombine guisp=NONE

line 9: highlight Sneak guifg=#e4dcd4 guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight LspTroubleText guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette2 guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DapUIFloatBorder FloatBorder

line 9: highlight Constant guifg=#7f5152 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellCap guifg=NONE guibg=NONE gui=undercurl guisp=#ac5402

line 9: highlight! link MiniNotifyTitle FloatTitle

line 9: highlight DiagnosticVirtualTextWarn guifg=#ac5402 guibg=#e0c3a7 gui=NONE guisp=NONE

line 9: highlight PounceAcceptBest guifg=#f6f2ee guibg=#22676d gui=NONE guisp=NONE

line 9: highlight! link DapUILineNumber Number

line 9: highlight GitGutterAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferCurrentMod guifg=#ac5402 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight DapUIBreakpointsDisabledLine guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette12 guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Statement guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight Identifier guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsObject Identifier

line 9: highlight SignifySignChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Macro PreProc

line 9: highlight NvimTreeGitDeleted guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbr guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight Function guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link TelescopeMatching Search

finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
continuing in /Users/piotr/.config/vim/init/colorscheme.vim
Executing ColorScheme Autocommands for "*"
autocommand call ToggleBatEnvVar()

Executing: call ToggleBatEnvVar()

calling ToggleBatEnvVar()

line 1:     if (&background ==# 'light')

line 2:         let $BAT_THEME=''

line 3:     else

line 4:         let $BAT_THEME='fly16'

line 5:     endif

ToggleBatEnvVar returning #0

continuing in ColorScheme Autocommands for "*"

finished sourcing /Users/piotr/.config/vim/init/colorscheme.vim
continuing in /Users/piotr/.config/vim/vimrc
finished sourcing ~/.config/vim/vimrc
could not source ".vimrc"
could not source ".exrc"
Searching for "pack/*/start/*" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/*"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/*"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/*"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/*"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/*"
Searching for "plugin/**/*.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim,/Users/piotr/.config/vim/pack/plugins/opt/scope.vim,/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest,/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip,/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets,/Users/piotr/.config/vim/pack/plugins/start/vim-rooter,/Users/piotr/.config/vim/pack/plugins/opt/lsp,/Users/piotr/.config/vim/pack/plugins/opt/ale,/Users/piotr/.config/vim/pack/plugins/opt/matchit,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit,/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim"
line 1: " Load only once

line 2: if exists('g:loaded_nightfox') | finish | endif

line 2:  finish | endif

line 2:  endif

finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/plugin/nightfox.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim"
line 1: if !has('vim9script') ||  v:version < 901

line 2:     echoerr 'Needs Vim version 9.1 and above'

line 3:     finish

line 4: endif

line 5: vim9script

line 6: 

line 7: g:loaded_scope = true

line 9: import autoload '../autoload/scope/command.vim'

line 13: set grepformat^=%f:%l:%c:%m

line 14: 

line 15: command -nargs=+ -complete=custom,command.Completor Scope command.DoCommand(<f-args>)

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/scope.vim/plugin/scope.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim"
line 1: if !has('vim9script') || v:versionlong < 9000196

line 2:     " Needs Vim version 9.1 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: g:loaded_vimsuggest = true

line 10: import autoload '../autoload/vimsuggest/search.vim'

line 11: import autoload '../autoload/vimsuggest/cmd.vim'

line 13: def! g:VimSuggestSetOptions(opts: dict<any>)

line 24: 

line 25: def VimSuggestEnable(flag: bool)

line 30: 

line 31: command! VimSuggestEnable  VimSuggestEnable(true)

line 32: command! VimSuggestDisable VimSuggestEnable(false)

line 33: 

line 34: def Reset()

line 40: 

line 41: autocmd VimEnter * Reset()

line 42: 

line 43: if empty(prop_type_get('VimSuggestMatch'))

line 44:     :highlight default link VimSuggestMatch PmenuMatch

line 45:     prop_type_add('VimSuggestMatch', {highlight: "VimSuggestMatch", override: false})

line 46: endif

line 47: :highlight default link VimSuggestMatchSel PmenuMatchSel

line 48: :highlight default link VimSuggestMute NonText

line 49: 

line 50: # vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/plugin/vimsuggest.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim"
line 1: if !has('vim9script') ||  v:versionlong < 9000196

line 2:     " Needs Vim version 9.0.0196 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: import autoload '../autoload/vimcomplete/abbrev.vim'

line 9: import autoload '../autoload/vimcomplete/buffer.vim'

line 10: import autoload '../autoload/vimcomplete/path.vim'

line 11: import autoload '../autoload/vimcomplete/dictionary.vim'

line 12: import autoload '../autoload/vimcomplete/lsp.vim'

line 13: import autoload '../autoload/vimcomplete/omnifunc.vim'

line 14: import autoload '../autoload/vimcomplete/vimscript.vim'

line 15: import autoload '../autoload/vimcomplete/vsnip.vim'

line 16: import autoload '../autoload/vimcomplete/tmux.vim'

line 17: import autoload '../autoload/vimcomplete/tag.vim'

line 18: import autoload '../autoload/vimcomplete/util.vim'

line 19: import autoload '../autoload/vimcomplete/completor.vim'

line 21: def RegisterPlugins()

line 41: 

line 42: def RegisterLsp()

line 57: 

line 58: autocmd User VimCompleteLoaded ++once RegisterPlugins() | util.InitKindHighlightGroups()

line 59: autocmd User LspAttached RegisterLsp()

line 60: autocmd VimEnter * lsp.Setup()

line 61: 

line 62: # Set vimcomplete plugin options from 'opts'.

line 63: def! g:VimCompleteOptionsSet(opts: dict<any>)

line 79: 

line 80: def! g:VimCompleteInfoPopupOptionsSet(opts: dict<any>)

line 83: 

line 84: def! g:VimCompleteOptionsGet(): dict<any>

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/plugins.vim
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:     " Needs Vim version 9.0 and above

line 3:     finish

line 4: endif

line 5: 

line 6: vim9script

line 7: 

line 8: # Async completion plugin for Vim

line 9: 

line 10: g:loaded_vimcomplete = true

line 12: import autoload '../autoload/vimcomplete/completor.vim'

line 14: def VimCompEnable(filetypes: string)

line 50: 

line 51: command! -nargs=* -complete=filetype VimCompleteEnable VimCompEnable(<q-args>)

line 52: command! -nargs=0 VimCompleteDisable completor.Disable() | g:vimcomplete_noname_buf_enable = false

line 53: command! -nargs=0 VimCompleteCompletors completor.ShowCompletors()

line 54: 

line 55: augroup VimcompleteAutoCmds | autocmd!

line 55:  autocmd!

line 56:     if get(g:, 'vimcomplete_enable_by_default', true)

line 57:         autocmd VimEnter * VimCompEnable("")

line 58:     endif

line 59: augroup END

line 60: 

line 61: if exists('#User#VimCompleteLoaded')

line 62:     :au VimEnter * doau <nomodeline> User VimCompleteLoaded

line 63: endif

line 64: 

line 65: inoremap <silent> <Plug>(vimcomplete-do-complete) <c-r>=<SID>completor.DoComplete()<cr>

line 66: inoremap <silent> <Plug>(vimcomplete-skip) <c-r>=<SID>completor.SkipCompleteSet()<cr>

line 67: 

line 68: # filetype detection is needed for this plugin to work

line 69: filetype plugin on

Searching for "filetype.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins/st
Searching for "/Users/piotr/.config/vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim"
line 1: " Vim support file to detect file types

line 2: "

line 3: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 4: " Last Change:^I2024 May 31

line 5: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 6: 

line 7: " Listen very carefully, I will say this only once

line 8: if exists("did_load_filetypes")

line 9:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/filetype.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/filetype.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/filetype.vim"
Searching for "/Users/piotr/.config/vim/after/filetype.vim"
Searching for "ftplugin.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins/st
Searching for "/Users/piotr/.config/vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
line 69: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim"
line 1: vim9script noclear

line 2: 

line 3: # Vim support file to switch on loading plugins for file types

line 4: #

line 5: # Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 6: # Last change:^I2023 Aug 10

line 7: # Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 8: 

line 9: if exists("g:did_load_ftplugin")

line 10:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/ftplugin.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/ftplugin.vim"
Searching for "/Users/piotr/.config/vim/after/ftplugin.vim"
finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/plugin/vimcomplete.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim"
line 1: if exists('g:loaded_vsnip_integ')

line 2:   finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/plugin/vsnip_integ.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim"
line 1: if exists('g:loaded_vsnip')

line 2:   finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/plugin/vsnip.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim"
line 1: " Vim plugin to change the working directory to the project root.

line 2: "

line 3: " Copyright 2010-2020 Andrew Stewart, <boss@airbladesoftware.com>

line 4: " Released under the MIT licence.

line 5: 

line 6: if exists('g:loaded_rooter') || &cp

line 7:   finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:   " Needs Vim version 9.0 and above

line 3:   finish

line 4: endif

line 5: 

line 6: vim9script noclear

line 7: 

line 8: # Language Server Protocol (LSP) plugin for vim

line 9: 

line 10: if get(g:, 'loaded_lsp', false)

line 11:   finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/lsp/plugin/lsp.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim"
line 1: " Author: w0rp <devw0rp@gmail.com>

line 2: " Description: Main entry point for the plugin: sets up prefs and autocommands

line 3: "   Preferences can be set in vimrc files and so on to configure ale

line 4: 

line 5: " Sanity Checks

line 6: 

line 7: if exists('g:loaded_ale_dont_use_this_in_other_plugins_please')

line 8:     finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/ale/plugin/ale.vim
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching

line 2: "  Maintainer:  Christian Brabandt

line 3: "  Version:     1.20

line 4: "  Last Change: 2024 May 20

line 5: "  Repository:  https://github.com/chrisbra/matchit

line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39

line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>

line 8: 

line 9: " Documentation:

line 10: "  The documentation is in a separate file: ../doc/matchit.txt

line 11: 

line 12: " Credits:

line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)

line 14: "  Original script and design by Raul Segura Acevedo

line 15: "  Support for comments by Douglas Potts

line 16: "  Support for back references and other improvements by Benji Fisher

line 17: "  Support for many languages by Johannes Zellner

line 18: "  Suggestions for improvement, bug reports, and support for additional

line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark

line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.

line 21: 

line 22: " Debugging:

line 23: "  If you'd like to try the built-in debugging commands...

line 24: "   :MatchDebug      to activate debugging for the current buffer

line 25: "  This saves the values of several key script variables as buffer-local

line 26: "  variables.  See the MatchDebug() function, below, for details.

line 27: 

line 28: " TODO:  I should think about multi-line patterns for b:match_words.

line 29: "   This would require an option:  how many lines to scan (default 1).

line 30: "   This would be useful for Python, maybe also for *ML.

line 31: " TODO:  Maybe I should add a menu so that people will actually use some of

line 32: "   the features that I have implemented.

line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to

line 34: "   Match_wrapper() instead.

line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'

line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).

line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my

line 38: "   work but extend it.

line 39: 

line 40: " Allow user to prevent loading and prevent duplicate loading.

line 41: if exists("g:loaded_matchit") || &cp

line 42:   finish

line 43: endif

line 44: let g:loaded_matchit = 1

line 45: 

line 46: let s:save_cpo = &cpo

line 47: set cpo&vim

line 48: 

line 49: fun MatchEnable()

line 89: 

line 90: fun MatchDisable()

line 108: 

line 109: " Call this function to turn on debugging information.  Every time the main

line 110: " script is run, buffer variables will be saved.  These can be used directly

line 111: " or viewed using the menu items below.

line 112: if !exists(":MatchDebug")

line 113:   command! -nargs=0 MatchDebug call matchit#Match_debug()

line 114: endif

line 115: if !exists(":MatchDisable")

line 116:   command! -nargs=0 MatchDisable :call MatchDisable()

line 117: endif

line 118: if !exists(":MatchEnable")

line 119:   command! -nargs=0 MatchEnable :call MatchEnable()

line 120: endif

line 121: 

line 122: call MatchEnable()

calling MatchEnable()

line 1:   nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>

line 2:   nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>

line 3:   xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") \| exe ":normal! m'" \| endif<cr>gv``

line 5:   xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``

line 6:   onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>

line 7:   onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>

line 8: 

line 9:   " Analogues of [{ and ]} using matching patterns:

line 10:   nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>

line 11:   nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>

line 12:   xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``

line 13:   xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``

line 14:   onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>

line 15:   onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>

line 16: 

line 17:   " text object:

line 18:   xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)

line 19: 

line 20:   if !exists("g:no_plugin_maps")

line 21:     nmap <silent> %  <Plug>(MatchitNormalForward)

line 22:     nmap <silent> g% <Plug>(MatchitNormalBackward)

line 23:     xmap <silent> %  <Plug>(MatchitVisualForward)

line 24:     xmap <silent> g% <Plug>(MatchitVisualBackward)

line 25:     omap <silent> %  <Plug>(MatchitOperationForward)

line 26:     omap <silent> g% <Plug>(MatchitOperationBackward)

line 27: 

line 28:     " Analogues of [{ and ]} using matching patterns:

line 29:     nmap <silent> [% <Plug>(MatchitNormalMultiBackward)

line 30:     nmap <silent> ]% <Plug>(MatchitNormalMultiForward)

line 31:     xmap <silent> [% <Plug>(MatchitVisualMultiBackward)

line 32:     xmap <silent> ]% <Plug>(MatchitVisualMultiForward)

line 33:     omap <silent> [% <Plug>(MatchitOperationMultiBackward)

line 34:     omap <silent> ]% <Plug>(MatchitOperationMultiForward)

line 35: 

line 36:     " Text object

line 37:     xmap a% <Plug>(MatchitVisualTextObject)

line 38:   endif

MatchEnable returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/matchit.vim

line 123: 

line 124: let &cpo = s:save_cpo

line 125: unlet s:save_cpo

line 126: 

line 127: " vim:sts=2:sw=2:et:

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/matchit/plugin/matchit.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/plugin/**/*.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/**/*.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim"
line 1: " ---------------------------------------------------------------------

line 2: " getscriptPlugin.vim

line 3: "  Maintainer:^IThis runtime file is looking for a new maintainer.

line 4: "  Original Author:^ICharles E. Campbell

line 5: "  Date:^INov 29, 2013

line 6: "  Installing:^I:help glvs-install

line 7: "  Usage:^I:help glvs

line 8: "

line 9: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim

line 10: "

line 11: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let

line 12: " all the peoples praise Him."

line 13: " ---------------------------------------------------------------------

line 14: " Initialization:^I{{{1

line 15: " if you're sourcing this file, surely you can't be

line 16: " expecting vim to be in its vi-compatible mode

line 17: if exists("g:loaded_getscriptPlugin")

line 18:  finish

line 19: endif

line 20: if &cp

line 21:  if &verbose

line 22:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"

line 23:  endif

line 24:  finish

line 25: endif

line 26: let g:loaded_getscriptPlugin = "v36"

line 27: let s:keepcpo                = &cpo

line 28: set cpo&vim

line 29: 

line 30: " ---------------------------------------------------------------------

line 31: "  Public Interface: {{{1

line 32: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()

line 33: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()

line 34: sil! com    -nargs=0 GLVS                call getscript#GetLatestVimScripts()

line 35: 

line 36: " ---------------------------------------------------------------------

line 37: " Restore Options: {{{1

line 38: let &cpo= s:keepcpo

line 39: unlet s:keepcpo

line 40: 

line 41: " ---------------------------------------------------------------------

line 42: " vim: ts=8 sts=2 fdm=marker nowrap

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " Exit quickly when:

line 7: " - this plugin was already loaded

line 8: " - when 'compatible' is set

line 9: " - some autocommands are already taking care of compressed files

line 10: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")

line 11:   finish

line 12: endif

line 13: let loaded_gzip = 1

line 14: 

line 15: augroup gzip

line 16:   " Remove all gzip autocommands

line 17:   au!

line 18: 

line 19:   " Enable editing of gzipped files.

line 20:   " The functions are defined in autoload/gzip.vim.

line 21:   "

line 22:   " Set binary mode before reading the file.

line 23:   " Use "gzip -d", gunzip isn't always available.

line 24:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin

line 25:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")

line 26:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")

line 27:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")

line 28:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")

line 29:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")

line 30:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")

line 31:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")

line 32:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")

line 33:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")

line 34:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")

line 35:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")

line 36:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")

line 37:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")

line 38:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")

line 39:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")

line 40:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")

line 41:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")

line 42:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")

line 43:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")

line 44:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")

line 45:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")

line 46:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")

line 47:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")

line 48:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")

line 49:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")

line 50:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")

line 51:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")

line 52:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")

line 53:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")

line 54:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")

line 55:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")

line 56:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")

line 57:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")

line 58:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")

line 59:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")

line 60:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")

line 61: augroup END

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim"
line 1: " LogiPat: Boolean logical pattern matcher

line 2: "   Maintainer:^IThis runtime file is looking for a new maintainer.

line 3: "   Original Author:  Charles E. Campbell

line 4: "   Date:    Apr 04, 2016

line 5: "   Version: 4

line 6: "   Purpose: to do Boolean-logic based regular expression pattern matching

line 7: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1

line 8: "               Permission is hereby granted to use and distribute this code,

line 9: "               with or without modifications, provided that this copyright

line 10: "               notice is copied with it. Like most anything else that's free,

line 11: "               LogiPat.vim is provided *as is* and comes with no warranty

line 12: "               of any kind, either expressed or implied. By using this

line 13: "               plugin, you agree that in no event will the copyright

line 14: "               holder be liable for any damages resulting from the use

line 15: "               of this software.

line 16: "

line 17: "   Usage: {{{1

line 18: "       :LogiPat ...

line 19: "

line 20: "         Boolean logic supported:

line 21: "            () grouping operators

line 22: "            !  not the following pattern

line 23: "            |  logical or

line 24: "            &  logical and

line 25: "            "..pattern.."

line 26: "^IExample: {{{1

line 27: "^I^I:LogiPat !("january"|"february")

line 28: "^I^I  would match all strings not containing the strings january

line 29: "^I^I  or february

line 30: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim

line 31: "

line 32: "  Behold, you will conceive in your womb, and bring forth a son, {{{1

line 33: "  and will call his name Jesus. He will be great, and will be

line 34: "  called the Son of the Most High. The Lord God will give him the

line 35: "  throne of his father, David, and he will reign over the house of

line 36: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)

line 37: 

line 38: " ---------------------------------------------------------------------

line 39: " Load Once: {{{1

line 40: if &cp || exists("loaded_logiPat")

line 41:  finish

line 42: endif

line 43: let g:loaded_logiPat = "v4"

line 44: let s:keepcpo        = &cpo

line 45: set cpo&vim

line 46: "DechoRemOn

line 47: 

line 48: " ---------------------------------------------------------------------

line 49: " Public Interface: {{{1

line 50: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)

line 51: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)

line 52: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")

line 53: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)

line 54: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"

line 55: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"

line 56: 

line 57: " =====================================================================

line 58: " Functions: {{{1

line 59: 

line 60: " ---------------------------------------------------------------------

line 61: " LogiPat: this function interprets the boolean-logic pattern {{{2

line 62: fun! LogiPat(pat,...)

line 147: 

line 148: " ---------------------------------------------------------------------

line 149: " s:String: Vim6.4 doesn't have string() {{{2

line 150: func! s:String(str)

line 153: 

line 154: " ---------------------------------------------------------------------

line 155: " LP_PatPush: {{{2

line 156: fun! s:LP_PatPush(pat)

line 163: 

line 164: " ---------------------------------------------------------------------

line 165: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2

line 166: fun! s:LP_PatPop(lookup)

line 179: 

line 180: " ---------------------------------------------------------------------

line 181: " LP_OpPush: {{{2

line 182: fun! s:LP_OpPush(op)

line 233: 

line 234: " ---------------------------------------------------------------------

line 235: " LP_Execute: execute operators from opstack using pattern stack {{{2

line 236: fun! s:LP_Execute(preclvl)

line 266: 

line 267: " ---------------------------------------------------------------------

line 268: " LP_Not: writes a logical-not for a pattern {{{2

line 269: fun! s:LP_Not(pat)

line 280: 

line 281: " ---------------------------------------------------------------------

line 282: " LP_Or: writes a logical-or branch using two patterns {{{2

line 283: fun! s:LP_Or(pat1,pat2)

line 289: 

line 290: " ---------------------------------------------------------------------

line 291: " LP_And: writes a logical-and concat using two patterns {{{2

line 292: fun! s:LP_And(pat1,pat2)

line 298: 

line 299: " ---------------------------------------------------------------------

line 300: " StackLook: {{{2

line 301: fun! s:StackLook(description)

line 335: 

line 336: " ---------------------------------------------------------------------

line 337: "  Cleanup And Modeline: {{{1

line 338: let &cpo= s:keepcpo

line 339: unlet s:keepcpo

line 340: " vim: ts=4 fdm=marker

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim"
line 1: " Vim plugin for using Vim as manpager.

line 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>

line 3: " Last Change: 2024 Jul 03

line 4: 

line 5: if exists('g:loaded_manpager_plugin')

line 6:   finish

line 7: endif

line 8: let g:loaded_manpager_plugin = 1

line 9: 

line 10: " Set up the current buffer (likely read from stdin) as a manpage

line 11: command MANPAGER call s:ManPager()

line 12: 

line 13: function s:ManPager()

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2024 May 18

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " Exit quickly when:

line 7: " - this plugin was already loaded (or disabled)

line 8: " - when 'compatible' is set

line 9: if exists("g:loaded_matchparen") || &cp

line 10:   finish

line 11: endif

line 12: let g:loaded_matchparen = 1

line 13: 

line 14: if !exists("g:matchparen_timeout")

line 15:   let g:matchparen_timeout = 300

line 16: endif

line 17: if !exists("g:matchparen_insert_timeout")

line 18:   let g:matchparen_insert_timeout = 60

line 19: endif

line 20: 

line 21: let s:has_matchaddpos = exists('*matchaddpos')

line 22: 

line 23: augroup matchparen

line 24:   " Replace all matchparen autocommands

line 25:   autocmd! CursorMoved,CursorMovedI,WinEnter,WinScrolled * call s:Highlight_Matching_Pair()

line 26:   autocmd! BufWinEnter * autocmd SafeState * ++once call s:Highlight_Matching_Pair()

line 27:   autocmd! WinLeave,BufLeave * call s:Remove_Matches()

line 28:   if exists('##TextChanged')

line 29:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()

line 30:     autocmd! TextChangedP * call s:Remove_Matches()

line 31:   endif

line 32: augroup END

line 33: 

line 34: " Skip the rest if it was already done.

line 35: if exists("*s:Highlight_Matching_Pair")

line 36:   finish

line 37: endif

line 38: 

line 39: let s:cpo_save = &cpo

line 40: set cpo-=C

line 41: 

line 42: " The function that is invoked (very often) to define a ":match" highlighting

line 43: " for any matching paren.

line 44: func s:Highlight_Matching_Pair()

line 201: 

line 202: func s:Remove_Matches()

line 210: 

line 211: " Define commands that will disable and enable the plugin.

line 212: command DoMatchParen call s:DoMatchParen()

line 213: command NoMatchParen call s:NoMatchParen()

line 214: 

line 215: func s:NoMatchParen()

line 222: 

line 223: func s:DoMatchParen()

line 229: 

line 230: let &cpo = s:cpo_save

line 231: unlet s:cpo_save

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network

line 2: "            PLUGIN SECTION

line 3: " Maintainer:^IThis runtime file is looking for a new maintainer.

line 4: " Date:^I^IFeb 09, 2021

line 5: " Last Change:

line 6: "   2024 May 08 by Vim Project: cleanup legacy Win9X checks

line 7: " Former Maintainer:   Charles E Campbell

line 8: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim

line 9: " Copyright:    Copyright (C) 1999-2021 Charles E. Campbell {{{1

line 10: "               Permission is hereby granted to use and distribute this code,

line 11: "               with or without modifications, provided that this copyright

line 12: "               notice is copied with it. Like anything else that's free,

line 13: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided

line 14: "               *as is* and comes with no warranty of any kind, either

line 15: "               expressed or implied. By using this plugin, you agree that

line 16: "               in no event will the copyright holder be liable for any damages

line 17: "               resulting from the use of this software.

line 18: "

line 19: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1

line 20: "  (James 1:22 RSV)

line 21: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

line 22: " Load Once: {{{1

line 23: if &cp || exists("g:loaded_netrwPlugin")

line 24:  finish

line 25: endif

line 26: let g:loaded_netrwPlugin = "v173"

line 27: let s:keepcpo = &cpo

line 28: set cpo&vim

line 29: "DechoRemOn

line 30: 

line 31: " ---------------------------------------------------------------------

line 32: " Public Interface: {{{1

line 33: 

line 34: " Local Browsing Autocmds: {{{2

line 35: augroup FileExplorer

line 36:  au!

line 37:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

line 38:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))

line 39:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))

line 40:  if has("win32")

line 41:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))

line 42:  endif

line 43: augroup END

line 44: 

line 45: " Network Browsing Reading Writing: {{{2

line 46: augroup Network

line 47:  au!

line 48:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))

line 49:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))

line 50:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))

line 51:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))

line 52:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))

line 53:  try

line 54:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))

line 55:  catch /^Vim\%((\a\+)\)\=:E216/

line 56:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))

line 57:  endtry

line 58: augroup END

line 59: 

line 60: " Commands: :Nread, :Nwrite, :NetUserPass {{{2

line 61: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)

line 62: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)

line 63: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)

line 64: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)

line 65: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)

line 66: 

line 67: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2

line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)

line 69: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)

line 70: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)

line 71: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)

line 72: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)

line 73: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)

line 74: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)

line 75: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)

line 76: 

line 77: " Commands: NetrwSettings {{{2

line 78: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()

line 79: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)

line 80: 

line 81: " Maps:

line 82: if !exists("g:netrw_nogx")

line 83:  if maparg('gx','n') == ""

line 84:   if !hasmapto('<Plug>NetrwBrowseX')

line 85:    nmap <unique> gx <Plug>NetrwBrowseX

line 86:   endif

line 87:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>

line 88:  endif

line 89:  if maparg('gx','x') == ""

line 90:   if !hasmapto('<Plug>NetrwBrowseXVis')

line 91:    xmap <unique> gx <Plug>NetrwBrowseXVis

line 92:   endif

line 93:   xno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>

line 94:  endif

line 95: endif

line 96: if exists("g:netrw_usetab") && g:netrw_usetab

line 97:  if maparg('<c-tab>','n') == ""

line 98:   nmap <unique> <c-tab> <Plug>NetrwShrink

line 99:  endif

line 100:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>

line 101: endif

line 102: 

line 103: " ---------------------------------------------------------------------

line 104: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2

line 105: fun! s:LocalBrowse(dirname)

line 149: 

line 150: " ---------------------------------------------------------------------

line 151: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2

line 152: "             Its purpose: to look over all windows and run s:LocalBrowse() on

line 153: "             them, which checks if they're directories and will create a directory

line 154: "             listing when appropriate.

line 155: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()

line 156: "             has already been called.

line 157: fun! s:VimEnter(dirname)

line 177: 

line 178: " ---------------------------------------------------------------------

line 179: " NetrwStatusLine: {{{1

line 180: fun! NetrwStatusLine()

line 191: 

line 192: " ------------------------------------------------------------------------

line 193: " NetUserPass: set username and password for subsequent ftp transfer {{{1

line 194: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password

line 195: "^I    :call NetUserPass("uid")^I^I-- will prompt for password

line 196: "^I    :call NetUserPass("uid","password") -- sets global userid and password

line 197: fun! NetUserPass(...)

line 221: 

line 222: " ------------------------------------------------------------------------

line 223: " Modelines And Restoration: {{{1

line 224: let &cpo= s:keepcpo

line 225: unlet s:keepcpo

line 226: " vim:ts=8 fdm=marker

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim"
line 1: " Vim plugin with helper function(s) for --remote-wait

line 2: " Maintainer: Flemming Madsen <fma@cci.dk>

line 3: " Last Change: 2008 May 29

line 4: 

line 5: " Has this already been loaded?

line 6: if exists("loaded_rrhelper") || !has("clientserver")

line 7:   finish

line 8: endif

line 9: let loaded_rrhelper = 1

line 10: 

line 11: " Setup answers for a --remote-wait client who will assume

line 12: " a SetupRemoteReplies() function in the command server

line 13: 

line 14: function SetupRemoteReplies()

line 41: 

line 42: function DoRemoteReply(id, cnt, group, file)

line 47: 

line 48: " vim: set sw=2 sts=2 :

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " Exit quickly when:

line 7: " - this plugin was already loaded

line 8: " - when 'compatible' is set

line 9: " - some autocommands are already taking care of spell files

line 10: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")

line 11:   finish

line 12: endif

line 13: let loaded_spellfile_plugin = 1

line 14: 

line 15: " The function is in the autoload directory.

line 16: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles

line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>

line 3: " Modified by Charles E. Campbell

line 4: " Distributed under the GNU General Public License.

line 5: "

line 6: " Updates are available from <http://michael.toren.net/code/>.  If you

line 7: " find this script useful, or have suggestions for improvements, please

line 8: " let me know.

line 9: " Also look there for further comments and documentation.

line 10: "

line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.

line 12: " ---------------------------------------------------------------------

line 13: "  Load Once: {{{1

line 14: if &cp || exists("g:loaded_tarPlugin")

line 15:  finish

line 16: endif

line 17: let g:loaded_tarPlugin = "v32"

line 18: let s:keepcpo          = &cpo

line 19: set cpo&vim

line 20: 

line 21: " ---------------------------------------------------------------------

line 22: "  Public Interface: {{{1

line 23: augroup tar

line 24:   au!

line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)

line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)

line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))

line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))

line 29: 

line 30:   if has("unix")

line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)

line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)

line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))

line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))

line 35:   endif

line 36: 

line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))

line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))

line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))

line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))

line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))

line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))

line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))

line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))

line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))

line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))

line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))

line 48:   au BufReadCmd   *.tzst^I^I^Icall tar#Browse(expand("<amatch>"))

line 49: augroup END

line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)

line 51: 

line 52: " ---------------------------------------------------------------------

line 53: " Restoration And Modelines: {{{1

line 54: " vim: fdm=marker

line 55: let &cpo= s:keepcpo

line 56: unlet s:keepcpo

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.

line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>

line 3: " Last Change: 2023 Sep 07

line 4: "

line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and

line 6: " $VIMRUNTIME/syntax/2html.vim

line 7: "

line 8: if exists('g:loaded_2html_plugin')

line 9:   finish

line 10: endif

line 11: let g:loaded_2html_plugin = 'vim9.0_v2'

line 12: 

line 13: "

line 14: " Changelog: {{{

line 15: "   9.0_v2  (this version): - Warn if using deprecated g:use_xhtml option

line 16: "                           - Change default g:html_use_input_for_pc to "none"

line 17: "                             instead of "fallback". All modern browsers support

line 18: "                             the "user-select: none" and "content:" CSS

line 19: "                             properties so the older method relying on extra

line 20: "                             markup and unspecified browser/app clipboard

line 21: "                             handling is only needed in rare special cases.

line 22: "                           - Fix SourceForge issue #33: generate diff filler

line 23: "                             correctly when new lines have been added to or

line 24: "                             removed from end of buffer.

line 25: "                           - Fix SourceForge issue #32/Vim Github issue #8547:

line 26: "                             use translated highlight ID for styling the

line 27: "                             special-use group names (e.g. LineNr) used

line 28: "                             directly by name in the 2html processing.

line 29: "                           - Fix SourceForge issue #26, refactoring to use

line 30: "                             :let-heredoc style string assignment and

line 31: "                             additional fixes for ".." vs. "." style string

line 32: "                             concatenation. Requires Vim v8.1.1354 or higher.

line 33: "   9.0_v1  (Vim 9.0.1275): - Implement g:html_no_doc and g:html_no_modeline

line 34: "                             for diff mode. Add tests.

line 35: "           (Vim 9.0.1122): NOTE: no version string update for this version!

line 36: "                           - Bugfix for variable name in g:html_no_doc

line 37: "           (Vim 9.0.0819): NOTE: no version string update for this version!

line 38: "                           - Add options g:html_no_doc, g:html_no_lines,

line 39: "                             and g:html_no_modeline (partially included in Vim

line 40: "                             runtime prior to version string update).

line 41: "                           - Updates for new Vim9 string append style (i.e. use

line 42: "                             ".." instead of "."). Requires Vim version

line 43: "                             8.1.1114 or higher.

line 44: "

line 45: "   8.1 updates: {{{

line 46: "   8.1_v2  (Vim 8.1.2312): - Fix SourceForge issue #19: fix calculation of tab

line 47: "                             stop position to use in expanding a tab, when that

line 48: "                             tab occurs after a syntax match which in turn

line 49: "                             comes after previously expanded tabs.

line 50: "                           - Set eventignore while splitting a window for the

line 51: "                             destination file to ignore FileType events;

line 52: "                             speeds up processing when the destination file

line 53: "                             already exists and HTML highlight takes too long.

line 54: "                           - Fix SourceForge issue #20: progress bar could not be

line 55: "                             seen when DiffDelete background color matched

line 56: "                             StatusLine background color. Added TOhtmlProgress

line 57: "                             highlight group for manual user override, but

line 58: "                             calculate it to be visible compared to StatusLine

line 59: "                             by default.

line 60: "                           - Fix SourceForge issue #1: Remove workaround for old

line 61: "                             browsers which don't support 'ch' CSS unit, since

line 62: "                             all modern browsers, including IE>=9, support it.

line 63: "                           - Fix SourceForge issue #10: support termguicolors

line 64: "                           - Fix SourceForge issue #21: default to using

line 65: "                             generated content instead of <input> tags for

line 66: "                             uncopyable text, so that text is correctly

line 67: "                             prevented from being copied in chrome. Use

line 68: "                             g:html_use_input_for_pc option to control the

line 69: "                             method used.

line 70: "                           - Switch to HTML5 to allow using vnu as a validator

line 71: "                             in unit test.

line 72: "                           - Fix fallback sizing of <input> tags for browsers

line 73: "                             without "ch" support.

line 74: "                           - Fix cursor on unselectable diff filler text.

line 75: "   8.1_v1  (Vim 8.1.0528): - Fix SourceForge issue #6: Don't generate empty

line 76: "                             script tag.

line 77: "                           - Fix SourceForge issue #5: javascript should

line 78: "                             declare variables with "var".

line 79: "                           - Fix SourceForge issue #13: errors thrown sourcing

line 80: "                             2html.vim directly when plugins not loaded.

line 81: "                           - Fix SourceForge issue #16: support 'vartabstop'.

line 82: "}}}

line 83: "

line 84: "   7.4 updates: {{{

line 85: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing

line 86: "                           an empty buffer. Jan Stocker: allow g:html_font to

line 87: "                           take a list so it is easier to specfiy fallback

line 88: "                           fonts in the generated CSS.

line 89: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and

line 90: "^I^I^I    also for version-specific modelines like "vim>703:".

line 91: "}}}

line 92: "

line 93: "   7.3 updates: {{{

line 94: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using

line 95: "^I^I^I    g:html_line_ids=0. Allow customizing

line 96: "^I^I^I    important IDs (like line IDs and fold IDs) using

line 97: "^I^I^I    g:html_id_expr evaluated when the buffer conversion

line 98: "^I^I^I    is started.

line 99: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and

line 100: "^I^I^I    insert modeline to set it to manual.

line 101: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a

line 102: "^I^I^I    duplicate of one buffer instead of including both.

line 103: "^I^I^I    Add anchors to each line so you can put '#L123'

line 104: "^I^I^I    or '#123' at the end of the URL to jump to line 123

line 105: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds

line 106: "^I^I^I    to show the anchor being jumped to if it is hidden.

line 107: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.

line 108: "^I^I^I    Allow TOhtml to chain together with other commands

line 109: "^I^I^I    using |.

line 110: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple

line 111: "^I^I^I    highlight groups make up the start-of-modeline text.

line 112: "^I^I^I    Improve render time of page with uncopyable regions

line 113: "^I^I^I    by not using one-input-per-char. Change name of

line 114: "^I^I^I    uncopyable option from html_unselectable to

line 115: "^I^I^I    html_prevent_copy. Added html_no_invalid option and

line 116: "^I^I^I    default to inserting invalid markup for uncopyable

line 117: "^I^I^I    regions to prevent MS Word from pasting undeletable

line 118: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).

line 119: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to

line 120: "^I^I^I    eliminate post-processing substitute commands in

line 121: "^I^I^I    favor of doing the work up front. Remove unnecessary

line 122: "^I^I^I    special treatment of 'LineNr' highlight group. Minor

line 123: "^I^I^I    speed improvements. Fix modeline mangling in

line 124: "^I^I^I    generated output so it works for text in the first

line 125: "^I^I^I    column. Fix missing line number and fold column in

line 126: "^I^I^I    diff filler lines. Fix that some fonts have a 1px

line 127: "^I^I^I    gap (using a dirty hack, improvements welcome). Add

line 128: "^I^I^I    "colorscheme" meta tag. Does NOT include support for

line 129: "^I^I^I    the new default foldtext added in v11, as the patch

line 130: "^I^I^I    adding it has not yet been included in Vim.

line 131: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian

line 132: "^I^I^I    Brabandt in

line 133: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.

line 134: "^I^I^I    This patch has not yet been included in Vim, thus

line 135: "^I^I^I    these changes are removed in the next version.

line 136: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside

line 137: "^I^I^I    multiple nested folds with dynamic folding on.

line 138: "^I^I^I    Also fix problem with foldtext in this situation.

line 139: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css

line 140: "^I^I^I    and without html_no_pre, default value same as

line 141: "^I^I^I    'wrap' option, (Andy Spencer). Don't use

line 142: "^I^I^I    'fileencoding' for converted document encoding if

line 143: "^I^I^I    'buftype' indicates a special buffer which isn't

line 144: "^I^I^I    written.

line 145: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab

line 146: "^I^I^I    characters in generated output (Andy Spencer).

line 147: "^I^I^I    Escape text that looks like a modeline so Vim

line 148: "^I^I^I    doesn't use anything in the converted HTML as a

line 149: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts

line 150: "^I^I^I    before the conversion range. Remove fold column when

line 151: "^I^I^I    there are no folds.

line 152: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:

line 153: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.

line 154: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not

line 155: "^I^I^I    supported by all major browsers according to

line 156: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and

line 157: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make

line 158: "^I^I^I    HTML encoding to Vim encoding detection be

line 159: "^I^I^I    case-insensitive for built-in pairs.

line 160: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be

line 161: "^I^I^I    called in restricted mode (Andy Spencer). Use

line 162: "^I^I^I    'fencoding' instead of 'encoding' to determine by

line 163: "^I^I^I    charset, and make sure the 'fenc' of the generated

line 164: "^I^I^I    file matches its indicated charset. Add charsets for

line 165: "^I^I^I    all of Vim's natively supported encodings.

line 166: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other

line 167: "^I^I^I    user settings interfering with diff mode generation,

line 168: "^I^I^I    trailing whitespace (e.g. line number column) when

line 169: "^I^I^I    using html_no_pre, and bugs when using

line 170: "^I^I^I    html_hover_unfold.

line 171: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync

line 172: "^I^I^I    folds in diff mode when first line was folded.

line 173: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode

line 174: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css

line 175: "^I^I^I    default to true when not set to anything. Use strict

line 176: "^I^I^I    doctypes where possible. Rename use_xhtml option to

line 177: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension

line 178: "^I^I^I    when using this option. Add meta tag for settings.

line 179: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the

line 180: "^I^I^I    diff colors and the normal syntax colors

line 181: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output

line 182: "}}}

line 183: "}}}

line 184: 

line 185: " TODO: {{{

line 186: "   * Check the issue tracker:

line 187: "     https://sourceforge.net/p/vim-tohtml/issues/search/?q=%21status%3Aclosed

line 188: "   * Options for generating the CSS in external style sheets. New :TOcss

line 189: "     command to convert the current color scheme into a (mostly) generic CSS

line 190: "     stylesheet which can be re-used. Alternate stylesheet support? Good start

line 191: "     by Erik Falor

line 192: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).

line 193: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,

line 194: "     term) to use for the styling. Suggestion by "nacitar".

line 195: "   * Add way to override or specify which RGB colors map to the color numbers

line 196: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".

line 197: "   * Disable filetype detection until after all processing is done.

line 198: "   * Add option for not generating the hyperlink on stuff that looks like a

line 199: "     URL? Or just color the link to fit with the colorscheme (and only special

line 200: "     when hovering)?

line 201: "   * Bug: Opera does not allow printing more than one page if uncopyable

line 202: "     regions is turned on. Possible solution: Add normal text line numbers with

line 203: "     display:none, set to display:inline for print style sheets, and hide

line 204: "     <input> elements for print, to allow Opera printing multiple pages (and

line 205: "     other uncopyable areas?). May need to make the new text invisible to IE

line 206: "     with conditional comments to prevent copying it, IE for some reason likes

line 207: "     to copy hidden text. Other browsers too?

line 208: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is

line 209: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome

line 210: "     on Windows). Perhaps it is font related?

line 211: "   * Bug: still some gaps in the fold column when html_prevent_copy contains

line 212: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps

line 213: "     on diff lines though.

line 214: "   * Undercurl support via CSS3, with fallback to dotted or something:

line 215: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion

line 216: "   * Redo updates for modified default foldtext (v11) when/if the patch is

line 217: "     accepted to modify it.

line 218: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold

line 219: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress

line 220: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml

line 221: "     does not show the whole diff filler as it is supposed to?

line 222: "   * Bug: when 'isprint' is wrong for the current encoding, will generate

line 223: "     invalid content. Can/should anything be done about this? Maybe a separate

line 224: "     plugin to correct 'isprint' based on encoding?

line 225: "   * Check to see if the windows-125\d encodings actually work in Unix without

line 226: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.

line 227: "   * Font auto-detection similar to

line 228: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of

line 229: "     platforms.

line 230: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :

line 231: "^I- listchars support

line 232: "^I- full-line background highlight

line 233: "^I- other?

line 234: "   * Make it so deleted lines in a diff don't create side-scrolling (get it

line 235: "     free with full-line background highlight above).

line 236: "   * Restore open/closed folds and cursor position after processing each file

line 237: "     with option not to restore for speed increase.

line 238: "   * Add extra meta info (generation time, etc.)?

line 239: "   * Tidy up so we can use strict doctype in even more situations

line 240: "   * Implementation detail: add threshold for writing the lines to the html

line 241: "     buffer before we're done (5000 or so lines should do it)

line 242: "   * TODO comments for code cleanup scattered throughout

line 243: "}}}

line 244: 

line 245: " Define the :TOhtml command when:

line 246: " - 'compatible' is not set

line 247: " - this plugin or user override was not already loaded

line 248: " - user commands are available. {{{

line 249: if !&cp && !exists(":TOhtml") && has("user_commands")

line 250:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)

line 251: endif "}}}

line 252: 

line 253: " Make sure any patches will probably use consistent indent

line 254: "   vim: ts=8 sw=2 sts=2 noet fdm=marker

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim"
line 1: " vimballPlugin : construct a file containing both paths and files

line 2: " Maintainer:^IThis runtime file is looking for a new maintainer.

line 3: " Original Author: Charles E. Campbell

line 4: " Copyright: (c) 2004-2014 by Charles E. Campbell

line 5: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt

line 6: "            (see |copyright|) except use "Vimball" instead of "Vim".

line 7: "            No warranty, express or implied.

line 8: "  *** ***   Use At-Your-Own-Risk!   *** ***

line 9: "

line 10: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who

line 11: "      judge. For in that which you judge another, you condemn yourself. For

line 12: "      you who judge practice the same things.

line 13: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim

line 14: 

line 15: " ---------------------------------------------------------------------

line 16: "  Load Once: {{{1

line 17: if &cp || exists("g:loaded_vimballPlugin")

line 18:  finish

line 19: endif

line 20: let g:loaded_vimballPlugin = "v37"

line 21: let s:keepcpo              = &cpo

line 22: set cpo&vim

line 23: 

line 24: " ------------------------------------------------------------------------------

line 25: " Public Interface: {{{1

line 26: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)

line 27: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)

line 28: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)

line 29: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()

line 30: augroup Vimball

line 31:  au!

line 32:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz if getline(1) =~ '^" Vimball Archiver' |  setlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0, "Source this file to extract it! (:so %)")|endif | endif

line 36:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif

line 37:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif

line 38:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz if getline(1) =~ '^" Vimball Archiver' |  setlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif | endif

line 42:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif

line 43:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif

line 44: augroup END

line 45: 

line 46: " =====================================================================

line 47: " Restoration And Modelines: {{{1

line 48: " vim: fdm=marker

line 49: let &cpo= s:keepcpo

line 50: unlet s:keepcpo

line 51: 

line 52: " vim: ts=4:

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles

line 2: "            PLUGIN PORTION

line 3: " Date:^I^I^IDec 07, 2021

line 4: " Maintainer:^IThis runtime file is looking for a new maintainer.

line 5: " Former Maintainer:^ICharles E Campbell

line 6: " License:^I^IVim License  (see vim's :help license)

line 7: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1

line 8: "               Permission is hereby granted to use and distribute this code,

line 9: "               with or without modifications, provided that this copyright

line 10: "               notice is copied with it. Like anything else that's free,

line 11: "               zipPlugin.vim is provided *as is* and comes with no warranty

line 12: "               of any kind, either expressed or implied. By using this

line 13: "               plugin, you agree that in no event will the copyright

line 14: "               holder be liable for any damages resulting from the use

line 15: "               of this software.

line 16: "

line 17: " (James 4:8 WEB) Draw near to God, and he will draw near to you.

line 18: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.

line 19: " ---------------------------------------------------------------------

line 20: " Load Once: {{{1

line 21: if &cp || exists("g:loaded_zipPlugin")

line 22:  finish

line 23: endif

line 24: let g:loaded_zipPlugin = "v33"

line 25: let s:keepcpo          = &cpo

line 26: set cpo&vim

line 27: 

line 28: " ---------------------------------------------------------------------

line 29: " Options: {{{1

line 30: if !exists("g:zipPlugin_ext")

line 31:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'

line 32: endif

line 33: 

line 34: " ---------------------------------------------------------------------

line 35: " Public Interface: {{{1

line 36: augroup zip

line 37:  au!

line 38:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)

line 39:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)

line 40:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))

line 41:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))

line 42: 

line 43:  if has("unix")

line 44:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)

line 45:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)

line 46:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))

line 47:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))

line 48:  endif

line 49: 

line 50:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'

line 50: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))

line 51: augroup END

line 52: 

line 53: " ---------------------------------------------------------------------

line 54: "  Restoration And Modelines: {{{1

line 55: "  vim: fdm=marker

line 56: let &cpo= s:keepcpo

line 57: unlet s:keepcpo

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin/**/*.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin)
fchdir() to previous dir
sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching

line 2: "  Maintainer:  Christian Brabandt

line 3: "  Version:     1.20

line 4: "  Last Change: 2024 May 20

line 5: "  Repository:  https://github.com/chrisbra/matchit

line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39

line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>

line 8: 

line 9: " Documentation:

line 10: "  The documentation is in a separate file: ../doc/matchit.txt

line 11: 

line 12: " Credits:

line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)

line 14: "  Original script and design by Raul Segura Acevedo

line 15: "  Support for comments by Douglas Potts

line 16: "  Support for back references and other improvements by Benji Fisher

line 17: "  Support for many languages by Johannes Zellner

line 18: "  Suggestions for improvement, bug reports, and support for additional

line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark

line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.

line 21: 

line 22: " Debugging:

line 23: "  If you'd like to try the built-in debugging commands...

line 24: "   :MatchDebug      to activate debugging for the current buffer

line 25: "  This saves the values of several key script variables as buffer-local

line 26: "  variables.  See the MatchDebug() function, below, for details.

line 27: 

line 28: " TODO:  I should think about multi-line patterns for b:match_words.

line 29: "   This would require an option:  how many lines to scan (default 1).

line 30: "   This would be useful for Python, maybe also for *ML.

line 31: " TODO:  Maybe I should add a menu so that people will actually use some of

line 32: "   the features that I have implemented.

line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to

line 34: "   Match_wrapper() instead.

line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'

line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).

line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my

line 38: "   work but extend it.

line 39: 

line 40: " Allow user to prevent loading and prevent duplicate loading.

line 41: if exists("g:loaded_matchit") || &cp

line 42:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
Searching for "pack/*/start/*" in "/Users/piotr/.config/vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,/Users/piotr/.config/vim/after"
Searching for "/Users/piotr/.config/vim/pack/*/start/*"
chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin/pairs.vim"
line 1: " Insert or delete brackets, parens, quotes in pairs.

line 2: " Maintainer:^IJiangMiao <jiangfriend@gmail.com>

line 3: " Contributor: camthompson

line 4: " Last Change:  2019-02-02

line 5: " Version: 2.0.0

line 6: " Homepage: http://www.vim.org/scripts/script.php?script_id=3599

line 7: " Repository: https://github.com/jiangmiao/auto-pairs

line 8: " License: MIT

line 9: 

line 10: import autoload 'pairs/utils.vim'

Searching for "autoload/pairs/utils.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pac
Searching for "/Users/piotr/.config/vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/pairs/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/pairs/utils.vim"
line 11: import autoload 'pairs.vim'

Searching for "autoload/pairs.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/pairs.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/pairs.vim"
line 12: 

line 13: if exists('g:AutoPairsLoaded') || &cp

line 14:   finish

line 15: end

line 16: let g:AutoPairsLoaded = 1

line 17: 

line 18: if !exists('g:AutoPairs')

line 19:   let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`"}

line 20: end

line 21: 

line 22: if !exists('g:AutoPairsMapBS')

line 23:   let g:AutoPairsMapBS = 1

line 24: end

line 25: 

line 26: " Map <C-h> as the same BS

line 27: if !exists('g:AutoPairsMapCh')

line 28:   let g:AutoPairsMapCh = 1

line 29: end

line 30: 

line 31: if !exists('g:AutoPairsMapCR')

line 32:   let g:AutoPairsMapCR = 1

line 33: end

line 34: 

line 35: if !exists('g:AutoPairsWildClosedPair')

line 36:   let g:AutoPairsWildClosedPair = ''

line 37: end

line 38: 

line 39: if !exists('g:AutoPairsMapSpace')

line 40:   let g:AutoPairsMapSpace = 1

line 41: end

line 42: 

line 43: if !exists('g:AutoPairsCenterLine')

line 44:   let g:AutoPairsCenterLine = 1

line 45: end

line 46: 

line 47: if !exists('g:AutoPairsShortcutToggle')

line 48:   let g:AutoPairsShortcutToggle = '<M-p>'

line 49: end

line 50: 

line 51: if !exists('g:AutoPairsShortcutFastWrap')

line 52:   let g:AutoPairsShortcutFastWrap = '<M-e>'

line 53: end

line 54: 

line 55: if !exists('g:AutoPairsShortcutJump')

line 56:   let g:AutoPairsShortcutJump = '<M-n>'

line 57: endif

line 58: 

line 59: " Fly mode will for closed pair to jump to closed pair instead of insert.

line 60: " also support AutoPairsBackInsert to insert pairs where jumped.

line 61: if !exists('g:AutoPairsFlyMode')

line 62:   let g:AutoPairsFlyMode = 0

line 63: endif

line 64: 

line 65: " When skipping the closed pair, look at the current and

line 66: " next line as well.

line 67: if !exists('g:AutoPairsMultilineClose')

line 68:   let g:AutoPairsMultilineClose = 1

line 69: endif

line 70: 

line 71: " Work with Fly Mode, insert pair where jumped

line 72: if !exists('g:AutoPairsShortcutBackInsert')

line 73:   let g:AutoPairsShortcutBackInsert = '<M-b>'

line 74: endif

line 75: 

line 76: if !exists('g:AutoPairsSmartQuotes')

line 77:   let g:AutoPairsSmartQuotes = 1

line 78: endif

line 79: 

line 80: " add or delete pairs base on g:AutoPairs

line 81: " AutoPairsDefine(addPairs:dict[, removeOpenPairList:list])

line 82: "

line 83: " eg:

line 84: "   au FileType html let b:AutoPairs = AutoPairsDefine({'<!--' : '-->'}, ['{'])

line 85: "   add <!-- --> pair and remove '{' for html file

line 86: func! AutoPairsDefine(pairs, ...)

line 98: 

line 99: func! AutoPairsInsert(key)

line 203: 

line 204: func! AutoPairsDelete()

line 235: 

line 236: 

line 237: " Fast wrap the word in brackets

line 238: func! AutoPairsFastWrap()

line 267: 

line 268: func! AutoPairsBackInsert()

line 274: 

line 275: func! AutoPairsSpace()

line 296: 

line 297: func! AutoPairsMap(key)

line 307: 

line 308: func! AutoPairsToggle()

line 318: 

line 319: func! s:sortByLength(i1, i2)

line 322: 

line 323: func! AutoPairsInit()

line 437: 

line 438: au BufEnter * :call AutoPairsInit()

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/auto-pairs/plugin/pairs.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin/fastfold.vim"
line 1: scriptencoding utf-8

line 2: 

line 3: " LICENCE PUBLIQUE RIEN À BRANLER

line 4: " Version 1, Mars 2009

line 5: "

line 6: " Copyright (C) 2009 Sam Hocevar

line 7: " 14 rue de Plaisance, 75014 Paris, France

line 8: "

line 9: " La copie et la distribution de copies exactes de cette licence sont

line 10: " autorisées, et toute modification est permise à condition de changer

line 11: " le nom de la licence.

line 12: "

line 13: " CONDITIONS DE COPIE, DISTRIBUTON ET MODIFICATION

line 14: " DE LA LICENCE PUBLIQUE RIEN À BRANLER

line 15: "

line 16: " 0. Faites ce que vous voulez, j'en ai RIEN À BRANLER.

line 17: 

line 18: if exists('g:loaded_fastfold') || &cp

line 19:   finish

line 20: endif

line 21: let g:loaded_fastfold = 1

line 22: 

line 23: let s:keepcpo         = &cpo

line 24: set cpo&vim

line 25: " ------------------------------------------------------------------------------

line 26: 

line 27: if !exists('g:fastfold_fdmhook')        | let g:fastfold_fdmhook        = 0  | endif

line 27:  let g:fastfold_fdmhook        = 0  | endif

line 27:  endif

line 28: if !exists('g:fastfold_savehook')       | let g:fastfold_savehook       = 1  | endif

line 28:  let g:fastfold_savehook       = 1  | endif

line 28:  endif

line 29: if !exists('g:fastfold_force')          | let g:fastfold_force          = 0  | endif

line 29:  let g:fastfold_force          = 0  | endif

line 29:  endif

line 30: 

line 31: if !exists('g:fastfold_skip_filetypes') | let g:fastfold_skip_filetypes = [] | endif

line 31:  let g:fastfold_skip_filetypes = [] | endif

line 31:  endif

line 32: if !exists('g:fastfold_minlines') | let g:fastfold_minlines = 100 | endif

line 32:  let g:fastfold_minlines = 100 | endif

line 32:  endif

line 33: if !exists('g:fastfold_fold_command_suffixes')

line 34:   let g:fastfold_fold_command_suffixes = ['x','X','a','A','o','O','c','C']

line 35: endif

line 36: if !exists('g:fastfold_fold_movement_commands')

line 37:   let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']

line 38: endif

line 39: 

line 40: function! s:EnterWin()

line 50: 

line 51: function! s:LeaveWin()

line 70: 

line 71: " Like windo but restore the current buffer.

line 72: " See http://vim.wikia.com/wiki/Run_a_command_in_multiple_buffers#Restoring_position

line 73: function! s:WinDo( command )

line 98: 

line 99: " WinEnter then TabEnter then BufEnter then BufWinEnter

line 100: function! s:UpdateWin()

line 105: 

line 106: function! s:UpdateBuf(feedback)

line 122: 

line 123: function! s:UpdateTab()

line 130: 

line 131: function! s:Skip()

line 140: 

line 141: function! s:isReasonable()

line 148: 

line 149: function! s:inSkipList()

line 156: 

line 157: function! s:isSmall()

line 164: 

line 165: command! -bar -bang FastFoldUpdate call s:UpdateBuf(<bang>0)

line 166: 

line 167: nnoremap <silent> <Plug>(FastFoldUpdate) :<c-u>FastFoldUpdate!<CR>

line 168: 

line 169: if !hasmapto('<Plug>(FastFoldUpdate)', 'n') && empty(mapcheck('zuz', 'n'))

line 170:   nmap zuz <Plug>(FastFoldUpdate)

line 171: endif

line 172: 

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zx :<c-u>call <SID>UpdateWin()<CR>zx

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zX :<c-u>call <SID>UpdateWin()<CR>zX

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> za :<c-u>call <SID>UpdateWin()<CR>za

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zA :<c-u>call <SID>UpdateWin()<CR>zA

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zo :<c-u>call <SID>UpdateWin()<CR>zo

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zO :<c-u>call <SID>UpdateWin()<CR>zO

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zc :<c-u>call <SID>UpdateWin()<CR>zc

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 174: nnoremap <silent> zC :<c-u>call <SID>UpdateWin()<CR>zC

line 175: endfor

line 173: for suffix in g:fastfold_fold_command_suffixes

line 174:   execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix

line 175: endfor

line 176: 

line 177: for cmd in g:fastfold_fold_movement_commands

line 178:   exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"

line 178: nnoremap <silent><expr> ]z ':<c-u>call <SID>UpdateWin()<CR>'.v:count.']z'

line 179:   exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"

line 179: xnoremap <silent><expr> ]z ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count.']z'

line 180:   exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"

line 180: onoremap <silent><expr> ]z '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '"' . v:register . v:operator . v:count1 . ']z'

line 181: endfor

line 177: for cmd in g:fastfold_fold_movement_commands

line 178:   exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"

line 178: nnoremap <silent><expr> [z ':<c-u>call <SID>UpdateWin()<CR>'.v:count.'[z'

line 179:   exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"

line 179: xnoremap <silent><expr> [z ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count.'[z'

line 180:   exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"

line 180: onoremap <silent><expr> [z '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '"' . v:register . v:operator . v:count1 . '[z'

line 181: endfor

line 177: for cmd in g:fastfold_fold_movement_commands

line 178:   exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"

line 178: nnoremap <silent><expr> zj ':<c-u>call <SID>UpdateWin()<CR>'.v:count.'zj'

line 179:   exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"

line 179: xnoremap <silent><expr> zj ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count.'zj'

line 180:   exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"

line 180: onoremap <silent><expr> zj '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '"' . v:register . v:operator . v:count1 . 'zj'

line 181: endfor

line 177: for cmd in g:fastfold_fold_movement_commands

line 178:   exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"

line 178: nnoremap <silent><expr> zk ':<c-u>call <SID>UpdateWin()<CR>'.v:count.'zk'

line 179:   exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"

line 179: xnoremap <silent><expr> zk ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count.'zk'

line 180:   exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"

line 180: onoremap <silent><expr> zk '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '"' . v:register . v:operator . v:count1 . 'zk'

line 181: endfor

line 177: for cmd in g:fastfold_fold_movement_commands

line 178:   exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"

line 179:   exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"

line 180:   exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"

line 181: endfor

line 182: 

line 183: augroup FastFold

line 184:   autocmd!

line 185:   autocmd VimEnter * call s:init()

line 186: augroup end

line 187: 

line 188: function! s:init()

line 237: 

line 238: " ------------------------------------------------------------------------------

line 239: let &cpo= s:keepcpo

line 240: unlet s:keepcpo

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/FastFold/plugin/fastfold.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin/lightline.vim"
line 1: " =============================================================================

line 2: " Filename: plugin/lightline.vim

line 3: " Author: itchyny

line 4: " License: MIT License

line 5: " Last Change: 2021/11/21 22:54:41.

line 6: " =============================================================================

line 7: 

line 8: if exists('g:loaded_lightline') || v:version < 703

line 9:   finish

line 10: endif

line 11: let g:loaded_lightline = 1

line 12: 

line 13: let s:save_cpo = &cpo

line 14: set cpo&vim

line 15: 

line 16: augroup lightline

line 17:   autocmd!

line 18:   autocmd WinEnter,BufEnter,SessionLoadPost,FileChangedShellPost * call lightline#update()

line 19:   if !has('patch-8.1.1715')

line 20:     autocmd FileType qf call lightline#update()

line 21:   endif

line 22:   autocmd SessionLoadPost * call lightline#highlight()

line 23:   autocmd ColorScheme * if !has('vim_starting') || expand('<amatch>') !=# 'macvim' | call lightline#update() | call lightline#highlight() | endif

line 25: augroup END

line 26: 

line 27: " This quickfix option was introduced at Vim 85850f3a5ef9, which is the commit

line 28: " just before 8.1.1715. Before this patch, autocmd FileType is required to

line 29: " overwrite the statusline of the quickfix and location windows.

line 30: let g:qf_disable_statusline = 1

line 31: 

line 32: let &cpo = s:save_cpo

line 33: unlet s:save_cpo

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/plugin/lightline.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin/tagalong.vim"
line 1: if exists('g:loaded_tagalong') || &cp

line 2:   finish

line 3: endif

line 4: 

line 5: let g:loaded_tagalong = '0.2.1' " version number

line 6: let s:keepcpo = &cpo

line 7: set cpo&vim

line 8: 

line 9: if !exists('g:tagalong_filetypes')

line 10:   let g:tagalong_filetypes = [ 'eco', 'eelixir', 'ejs', 'eruby', 'gohtmltmpl', 'html', 'htmldjango', 'javascriptreact', 'jsx', 'php', 'typescriptreact', 'vue', 'xml', ]

line 25: endif

line 26: 

line 27: if !exists('g:tagalong_additional_filetypes')

line 28:   let g:tagalong_additional_filetypes = []

line 29: endif

line 30: 

line 31: if !exists('g:tagalong_excluded_filetype_combinations')

line 32:   let g:tagalong_excluded_filetype_combinations = ['eruby.yaml']

line 33: endif

line 34: 

line 35: if !exists('g:tagalong_mappings')

line 36:   let g:tagalong_mappings = ['c', 'C', 'v', 'i', 'a', 'A']

line 37: endif

line 38: 

line 39: if !exists('g:tagalong_verbose')

line 40:   let g:tagalong_verbose = 0

line 41: endif

line 42: 

line 43: if !exists('g:tagalong_timeout')

line 44:   let g:tagalong_timeout = 500

line 45: endif

line 46: 

line 47: augroup tagalong

line 48:   autocmd!

line 49:   autocmd FileType * call s:InitIfSupportedFiletype(expand('<amatch>'))

line 50: augroup END

line 51: 

line 52: " Manually enable/disable the plugin

line 53: command TagalongInit   call tagalong#Init()

line 54: command TagalongDeinit call tagalong#Deinit()

line 55: 

line 56: " needed for silent execution of the . operator

line 57: nnoremap <silent> <Plug>TagalongReapply :call tagalong#Reapply()<cr>

line 58: 

line 59: " Needed in order to handle dot-filetypes like "javascript.jsx" or

line 60: " "custom.html".

line 61: function s:InitIfSupportedFiletype(filetype_string)

line 91: 

line 92: let &cpo = s:keepcpo

line 93: unlet s:keepcpo

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/plugin/tagalong.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin/closetag.vim"
line 1: " {{{

line 2: "

line 3: "      Modifier:  Alvan

line 4: "   Description:  Auto close tag.

line 5: "                 Based on xml.vim(http://www.vim.org/scripts/script.php?script_id=1397)

line 6: "

line 7: " }}}

line 8: "

line 9: if exists("g:loaded_closetag") | fini | en | let g:loaded_closetag = "1.8.11"

line 9:  fini | en | let g:loaded_closetag = "1.8.11"

line 9:  en | let g:loaded_closetag = "1.8.11"

line 9:  let g:loaded_closetag = "1.8.11"

line 10: 

line 11: fun! s:Initial()

line 73: 

line 74: " Define default variables

line 75: fun! s:Declare(var, def)

line 80: 

line 81: " Buffer variables

line 82: fun! s:InitBuf()

line 91: 

line 92: fun! s:SavePos()

line 95: 

line 96: fun! s:Handler(xml_tag, isHtml)

line 107: 

line 108: " Gets the tagname from start position.

line 109: "

line 110: " Now lets go for the name part. The namepart are xmlnamechars which

line 111: " is quite a big range. We assume that everything after '<' or '</'

line 112: " until the first 'space', 'forward slash' or '>' ends de name part.

line 113: fun! s:TagName(from)

line 122: 

line 123: " Looks for attribute in open tag

line 124: " expect cursor to be on <

line 125: fun! s:HaveAtt()

line 134: 

line 135: " Should the tag be treated as an non closing) tag?

line 136: " check the current tag with the set of tags defined in b:closetag_emptyTags

line 137: " closetag_emptyTags_caseSensitive defines if the check is case sensitive

line 138: fun! s:AsEmpty()

line 143: 

line 144: " Is there a tag under the cursor?

line 145: " Set bufer wide variable

line 146: "  - b:closetag_firstWasEndTag

line 147: "  - b:closetag_tagName

line 148: "  - b:gotoCloseTag (if the tag under the cursor is one)

line 149: "  - b:gotoOpenTag  (if the tag under the cursor is one)

line 150: " on exit

line 151: "    - returns 1 (true)  or 0 (false)

line 152: "    - position is at '<'

line 153: fun! s:FindTag()

line 222: 

line 223: fun! s:InValidRegion()

line 242: 

line 243: fun! s:CloseIt()

line 313: 

line 314: call s:Initial()

calling <SNR>115_Initial()

line 1:     call s:Declare('g:closetag_filetypes', 'html,xhtml,phtml')

calling <SNR>115_Declare('g:closetag_filetypes', 'html,xhtml,phtml')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 2:     call s:Declare('g:closetag_xhtml_filetypes', 'xhtml')

calling <SNR>115_Declare('g:closetag_xhtml_filetypes', 'xhtml')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 3: 

line 4:     call s:Declare('g:closetag_filenames', '*.html,*.xhtml,*.phtml')

calling <SNR>115_Declare('g:closetag_filenames', '*.html,*.xhtml,*.phtml')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 5:     call s:Declare('g:closetag_xhtml_filenames', '*.xhtml')

calling <SNR>115_Declare('g:closetag_xhtml_filenames', '*.xhtml')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 6: 

line 7:     call s:Declare('g:closetag_shortcut', '>')

calling <SNR>115_Declare('g:closetag_shortcut', '>')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 8:     call s:Declare('g:closetag_close_shortcut', '')

calling <SNR>115_Declare('g:closetag_close_shortcut', '')

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 9: 

line 10:     call s:Declare('g:closetag_emptyTags_caseSensitive', 0)

calling <SNR>115_Declare('g:closetag_emptyTags_caseSensitive', 0)

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 11: 

line 12:     " call s:Declare('g:closetag_enable_react_fragment', 0)

line 13: 

line 14:     call s:Declare('g:closetag_regions', { 'typescript.tsx': 'jsxRegion,tsxRegion', 'javascript.jsx': 'jsxRegion', 'typescriptreact': 'jsxRegion,tsxRegion', 'javascriptreact': 'jsxRegion', })

calling <SNR>115_Declare('g:closetag_regions', {'javascript.jsx': 'jsxRegion', 'javas...typescript.tsx': 'jsxRegion,tsxRegion'})

line 1:     if !exists(a:var)

line 2:         let {a:var} = a:def

line 3:     en

<SNR>115_Declare returning #0

continuing in <SNR>115_Initial

line 20: 

line 21:     let g:closetag_filenames = substitute(g:closetag_filenames, '\s*,\s\+', ',', 'g')

line 22:     let g:closetag_xhtml_filenames = substitute(g:closetag_xhtml_filenames, '\s*,\s\+', ',', 'g')

line 23:     let g:closetag_filetypes = substitute(g:closetag_filetypes, '\s*,\s\+', ',', 'g')

line 24:     let g:closetag_xhtml_filetypes = substitute(g:closetag_xhtml_filetypes, '\s*,\s\+', ',', 'g')

line 25: 

line 26:     if g:closetag_shortcut != ''

line 27:         exec "au User vim-closetag inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"

line 27: au User vim-closetag inoremap <silent> <buffer> > ><Esc>:call <SID>CloseIt()<Cr>

line 28: 

line 29:         if g:closetag_filetypes != ''

line 30:             exec "au FileType " . g:closetag_filetypes . " inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"

line 30: au FileType html,xhtml,phtml inoremap <silent> <buffer> > ><Esc>:call <SID>CloseIt()<Cr>

line 31:         en

line 32:         if g:closetag_filenames != ''

line 33:             exec "au BufNewFile,Bufread " . g:closetag_filenames . " inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"

line 33: au BufNewFile,Bufread *.html,*.tsx,*.jsx,*.erb inoremap <silent> <buffer> > ><Esc>:call <SID>CloseIt()<Cr>

line 34:         en

line 35:     en

line 36: 

line 37:     if g:closetag_close_shortcut != ''

line 38:         if g:closetag_filetypes != ''

line 39:             exec "au FileType " . g:closetag_filetypes . " inoremap <silent> <buffer> " . g:closetag_close_shortcut . " >"

line 40:         en

line 41:         if g:closetag_filenames != ''

line 42:             exec "au BufNewFile,Bufread " . g:closetag_filenames . " inoremap <silent> <buffer> " . g:closetag_close_shortcut . " >"

line 43:         en

line 44:     en

line 45: 

line 46:     if g:closetag_xhtml_filetypes != ''

line 47:         exec "au FileType " . g:closetag_xhtml_filetypes . " call <SID>Declare('b:closetag_use_xhtml', 1)"

line 47: au FileType xhtml call <SID>Declare('b:closetag_use_xhtml', 1)

line 48:     en

line 49:     if g:closetag_xhtml_filenames != ''

line 50:         exec "au BufNewFile,Bufread " . g:closetag_xhtml_filenames . " call <SID>Declare('b:closetag_use_xhtml', 1)"

line 50: au BufNewFile,Bufread *.xhtml call <SID>Declare('b:closetag_use_xhtml', 1)

line 51:     en

line 52: 

line 53:     com! -nargs=* -complete=file CloseTagEnableBuffer let b:closetag_disabled = 0

line 54:     com! -nargs=* -complete=file CloseTagDisableBuffer let b:closetag_disabled = 1

line 55:     com! -nargs=* -complete=file CloseTagToggleBuffer let b:closetag_disabled = exists('b:closetag_disabled') && b:closetag_disabled ? 0 : 1

line 56: 

line 57:     " Script rgular expresion used. Documents those nasty criters

line 58:     " Don't check for quotes around attributes!!!

line 59:     let s:ReqAttrib = '\(\(\s\|\n\)\+\([^>= \t]\+=\([^&]\+\)\)\(\s\|\n\)*\)\+\(\/\)\@<!>'

line 60:     let s:EndofName = '\($\|\s\|\(=\)\@<!>\)'

<SNR>115_Initial returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin/closetag.vim

line 315: " End of file : closetag.vim

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-closetag/plugin/closetag.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin/commentary.vim"
line 1: " commentary.vim - Comment stuff out

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      1.3

line 4: " GetLatestVimScripts: 3695 1 :AutoInstall: commentary.vim

line 5: 

line 6: if exists("g:loaded_commentary") || v:version < 703

line 7:   finish

line 8: endif

line 9: let g:loaded_commentary = 1

line 10: 

line 11: function! s:surroundings() abort

line 15: 

line 16: function! s:strip_white_space(l,r,line) abort

line 26: 

line 27: function! s:go(...) abort

line 83: 

line 84: function! s:textobject(inner) abort

line 104: 

line 105: command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)

line 106: xnoremap <expr>   <Plug>Commentary     <SID>go()

line 107: nnoremap <expr>   <Plug>Commentary     <SID>go()

line 108: nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'

line 109: onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>

line 110: nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>

line 111: 

line 112: if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''

line 113:   xmap gc  <Plug>Commentary

line 114:   nmap gc  <Plug>Commentary

line 115:   omap gc  <Plug>Commentary

line 116:   nmap gcc <Plug>CommentaryLine

line 117:   nmap gcu <Plug>Commentary<Plug>Commentary

line 118: endif

line 119: 

line 120: nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary"<CR>

line 121: 

line 122: " vim:set et sw=2:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-commentary/plugin/commentary.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin/eunuch.vim"
line 1: " eunuch.vim - Helpers for UNIX

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      1.3

line 4: 

line 5: if exists('g:loaded_eunuch') || &cp || v:version < 704

line 6:   finish

line 7: endif

line 8: let g:loaded_eunuch = 1

line 9: 

line 10: let s:slash_pat = exists('+shellslash') ? '[\/]' : '/'

line 11: 

line 12: function! s:separator() abort

line 15: 

line 16: function! s:ffn(fn, path) abort

line 19: 

line 20: function! s:fcall(fn, path, ...) abort

line 23: 

line 24: function! s:AbortOnError(cmd) abort

line 32: 

line 33: function! s:MinusOne(...) abort

line 36: 

line 37: function! EunuchRename(src, dst) abort

line 57: 

line 58: function! s:MkdirCallable(name) abort

line 69: 

line 70: function! s:Delete(path) abort

line 77: 

line 78: command! -bar -bang -nargs=? -complete=dir Mkdir let s:dst = empty(<q-args>) ? expand('%:h') : <q-args> | if call('call', s:MkdirCallable(s:dst)) == -1 |   echohl WarningMsg |   echo "Directory already exists: " . s:dst |   echohl NONE | elseif empty(<q-args>) |    silent keepalt execute 'file' fnameescape(@%) | endif | unlet s:dst

line 88: 

line 89: function! s:DeleteError(file) abort

line 96: 

line 97: command! -bar -bang Unlink if <bang>1 && &undoreload >= 0 && line('$') >= &undoreload |   echoerr "Buffer too big for 'undoreload' (add ! to override)" | elseif s:Delete(@%) |   echoerr s:DeleteError(@%) | else |   edit! |   silent exe 'doautocmd <nomodeline> User FileUnlinkPost' | endif

line 106: 

line 107: command! -bar -bang Remove Unlink<bang>

line 108: 

line 109: command! -bar -bang Delete if <bang>1 && !(line('$') == 1 && empty(getline(1)) || s:fcall('getftype', @%) !=# 'file') |   echoerr "File not empty (add ! to override)" | else |   let s:file = expand('%:p') |   execute 'bdelete<bang>' |   if !bufloaded(s:file) && s:Delete(s:file) |     echoerr s:DeleteError(s:sfile) |   endif |   unlet s:file | endif

line 120: 

line 121: function! s:FileDest(q_args) abort

line 130: 

line 131: command! -bar -nargs=1 -bang -complete=file Copy let s:dst = s:FileDest(<q-args>) | call call('call', s:MkdirCallable(fnamemodify(s:dst, ':h'))) | let s:dst = s:fcall('simplify', s:dst) | exe expand('<mods>') 'saveas<bang>' fnameescape(remove(s:, 'dst')) | filetype detect

line 137: 

line 138: function! s:Move(bang, arg) abort

line 163: 

line 164: command! -bar -nargs=1 -bang -complete=file Move exe s:Move(<bang>0, <q-args>)

line 165: 

line 166: " ~/f, $VAR/f, /f, C:/f, url://f, ./f, ../f

line 167: let s:absolute_pat = '^[~$]\|^' . s:slash_pat . '\|^\a\+:\|^\.\.\=\%(' . s:slash_pat . '\|$\)'

line 168: 

line 169: function! s:RenameComplete(A, L, P) abort

line 180: 

line 181: function! s:RenameArg(arg) abort

line 188: 

line 189: command! -bar -nargs=1 -bang -complete=customlist,s:RenameComplete Duplicate exe 'Copy<bang>' escape(s:RenameArg(<q-args>), '"|')

line 191: 

line 192: command! -bar -nargs=1 -bang -complete=customlist,s:RenameComplete Rename exe 'Move<bang>' escape(s:RenameArg(<q-args>), '"|')

line 194: 

line 195: let s:permlookup = ['---','--x','-w-','-wx','r--','r-x','rw-','rwx']

line 196: function! s:Chmod(bang, perm, ...) abort

line 218: 

line 219: command! -bar -bang -nargs=+ Chmod exe s:Chmod(<bang>0, <f-args>)

line 221: 

line 222: function! s:FindPath() abort

line 237: 

line 238: command! -bang -complete=file -nargs=+ Cfind   exe s:Grep(<q-bang>, <q-args>, s:FindPath(), '')

line 239: command! -bang -complete=file -nargs=+ Clocate exe s:Grep(<q-bang>, <q-args>, 'locate', '')

line 240: command! -bang -complete=file -nargs=+ Lfind   exe s:Grep(<q-bang>, <q-args>, s:FindPath(), 'l')

line 241: command! -bang -complete=file -nargs=+ Llocate exe s:Grep(<q-bang>, <q-args>, 'locate', 'l')

line 242: function! s:Grep(bang, args, prg, type) abort

line 264: 

line 265: function! s:SilentSudoCmd(editor) abort

line 280: 

line 281: augroup eunuch_sudo

line 282: augroup END

line 283: 

line 284: function! s:SudoSetup(file, resolve_symlink) abort

line 304: 

line 305: let s:error_file = tempname()

line 306: 

line 307: function! s:SudoError() abort

line 315: 

line 316: function! s:SudoReadCmd() abort

line 333: 

line 334: function! s:SudoWriteCmd() abort

line 346: 

line 347: command! -bar -bang -complete=file -nargs=? SudoEdit let s:arg = resolve(<q-args>) | call s:SudoSetup(fnamemodify(empty(s:arg) ? @% : s:arg, ':p'), empty(s:arg) && <bang>0) | if !&modified || !empty(s:arg) || <bang>0 |   exe 'edit<bang>' fnameescape(s:arg) | endif | if empty(<q-args>) || expand('%:p') ==# fnamemodify(s:arg, ':p') |   set noreadonly | endif | unlet s:arg

line 357: 

line 358: if exists(':SudoWrite') != 2

line 359: command! -bar -bang SudoWrite call s:SudoSetup(expand('%:p'), <bang>0) | setlocal noreadonly | write!

line 363: endif

line 364: 

line 365: command! -bar Wall call s:Wall()

line 366: if exists(':W') !=# 2

line 367:   command! -bar W Wall

line 368: endif

line 369: function! s:Wall() abort

line 381: 

line 382: " Adapted from autoload/dist/script.vim.

line 383: let s:interpreters = { '.': '/bin/sh', 'sh': '/bin/sh', 'bash': 'bash', 'csh': 'csh', 'tcsh': 'tcsh', 'zsh': 'zsh', 'tcl': 'tclsh', 'expect': 'expect', 'gnuplot': 'gnuplot', 'make': 'make -f', 'pike': 'pike', 'lua': 'lua', 'perl': 'perl', 'php': 'php', 'python': 'python3', 'groovy': 'groovy', 'raku': 'raku', 'ruby': 'ruby', 'javascript': 'node', 'bc': 'bc', 'sed': 'sed', 'ocaml': 'ocaml', 'awk': 'awk', 'wml': 'wml', 'scheme': 'scheme', 'cfengine': 'cfengine', 'erlang': 'escript', 'haskell': 'haskell', 'scala': 'scala', 'clojure': 'clojure', 'pascal': 'instantfpc', 'fennel': 'fennel', 'routeros': 'rsc', 'fish': 'fish', 'forth': 'gforth', }

line 420: 

line 421: function! s:NormalizeInterpreter(str) abort

line 430: 

line 431: function! s:FileTypeInterpreter() abort

line 447: 

line 448: let s:shebang_pat = '^#!\s*[/[:alnum:]_-]'

line 449: 

line 450: function! EunuchNewLine(...) abort

line 480: 

line 481: function! s:MapCR() abort

line 499: call s:MapCR()

calling <SNR>117_MapCR()

line 1:   imap <silent><script> <SID>EunuchNewLine <C-R>=EunuchNewLine()<CR>

line 2:   let map = maparg('<CR>', 'i', 0, 1)

line 3:   let rhs = substitute(get(map, 'rhs', ''), '\c<sid>', '<SNR>' . get(map, 'sid') . '_', 'g')

line 4:   if get(g:, 'eunuch_no_maps') || rhs =~# 'Eunuch' || get(map, 'desc') =~# 'Eunuch' || get(map, 'buffer')

line 5:     return

line 6:   endif

line 7:   let imap = get(map, 'script', rhs !~? '<plug>') || get(map, 'noremap') ? 'imap <script>' : 'imap'

line 8:   if get(map, 'expr') && type(get(map, 'callback')) == type(function('tr'))

line 9:     lua local m = vim.fn.maparg('<CR>', 'i', 0, 1); vim.api.nvim_set_keymap('i', '<CR>', m.rhs or '', { expr = true, silent = true, callback = function() return vim.fn.EunuchNewLine(vim.api.nvim_replace_termcodes(m.callback(), true, true, m.replace_keycodes)) end, desc = "EunuchNewLine() wrapped around " .. (m.desc or "Lua function") })

line 10:   elseif get(map, 'expr') && !empty(rhs)

line 11:     exe imap '<silent><expr> <CR> EunuchNewLine(' . rhs . ')'

line 12:   elseif rhs =~? '^<cr>' || rhs =~# '<[Pp]lug>\w\+CR'

line 13:     exe imap '<silent> <CR>' rhs . '<SID>EunuchNewLine'

line 14:   elseif empty(rhs)

line 15:     imap <script><silent><expr> <CR> EunuchNewLine("<Bslash>r")

line 16:   endif

<SNR>117_MapCR returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin/eunuch.vim

line 500: 

line 501: augroup eunuch

line 502:   autocmd!

line 503:   autocmd BufNewFile  * let b:eunuch_chmod_shebang = 1

line 504:   autocmd BufReadPost * if getline(1) !~# '^#!\s*\S' | let b:eunuch_chmod_shebang = 1 | endif

line 505:   autocmd BufWritePost,FileWritePost * nested if exists('b:eunuch_chmod_shebang') && getline(1) =~# s:shebang_pat |   call s:Chmod(0, '+x', '<afile>') |   edit | endif | unlet! b:eunuch_chmod_shebang

line 511:   autocmd InsertLeave * nested if line('.') == 1 && getline(1) ==# @. && @. =~# s:shebang_pat | filetype detect | endif

line 513:   autocmd User FileChmodPost,FileUnlinkPost "

line 514:   autocmd VimEnter * call s:MapCR() | if has('patch-8.1.1113') || has('nvim-0.4') |   exe 'autocmd eunuch InsertEnter * ++once call s:MapCR()' | endif

line 518: augroup END

line 519: 

line 520: " vim:set sw=2 sts=2:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/plugin/eunuch.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim"
line 1: " fugitive.vim - A Git wrapper so awesome, it should be illegal

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      3.7

line 4: " GetLatestVimScripts: 2975 1 :AutoInstall: fugitive.vim

line 5: 

line 6: if exists('g:loaded_fugitive')

line 7:   finish

line 8: endif

line 9: let g:loaded_fugitive = 1

line 10: 

line 11: let s:bad_git_dir = '/$\|^fugitive:'

line 12: 

line 13: " FugitiveGitDir() returns the detected Git dir for the given buffer number,

line 14: " or the current buffer if no argument is passed.  This will be an empty

line 15: " string if no Git dir was found.  Use !empty(FugitiveGitDir()) to check if

line 16: " Fugitive is active in the current buffer.  Do not rely on this for direct

line 17: " filesystem access; use FugitiveFind('.git/whatever') instead.

line 18: function! FugitiveGitDir(...) abort

line 47: 

line 48: " FugitiveReal() takes a fugitive:// URL and returns the corresponding path in

line 49: " the work tree.  This may be useful to get a cleaner path for inclusion in

line 50: " the statusline, for example.  Note that the file and its parent directories

line 51: " are not guaranteed to exist.

line 52: "

line 53: " This is intended as an abstract API to be used on any "virtual" path.  For a

line 54: " buffer named foo://bar, check for a function named FooReal(), and if it

line 55: " exists, call FooReal("foo://bar").

line 56: function! FugitiveReal(...) abort

line 70: 

line 71: " FugitiveFind() takes a Fugitive object and returns the appropriate Vim

line 72: " buffer name.  You can use this to generate Fugitive URLs ("HEAD:README") or

line 73: " to get the absolute path to a file in the Git dir (".git/HEAD"), the common

line 74: " dir (".git/config"), or the work tree (":(top)Makefile").

line 75: "

line 76: " An optional second argument provides the Git dir, or the buffer number of a

line 77: " buffer with a Git dir.  The default is the current buffer.

line 78: function! FugitiveFind(...) abort

line 85: 

line 86: " FugitiveParse() takes a fugitive:// URL and returns a 2 element list

line 87: " containing an object name ("commit:file") and the Git dir.  It's effectively

line 88: " the inverse of FugitiveFind().

line 89: function! FugitiveParse(...) abort

line 100: 

line 101: " FugitiveGitVersion() queries the version of Git in use.  Pass up to 3

line 102: " arguments to return a Boolean of whether a certain minimum version is

line 103: " available (FugitiveGitVersion(2,3,4) checks for 2.3.4 or higher) or no

line 104: " arguments to get a raw string.

line 105: function! FugitiveGitVersion(...) abort

line 108: 

line 109: " FugitiveResult() returns an object encapsulating the result of the most

line 110: " recent :Git command.  Will be empty if no result is available.  During a

line 111: " User FugitiveChanged event, this is guaranteed to correspond to the :Git

line 112: " command that triggered the event, or be empty if :Git was not the trigger.

line 113: " Pass in the name of a temp buffer to get the result object for that command

line 114: " instead.  Contains the following keys:

line 115: "

line 116: " * "args": List of command arguments, starting with the subcommand.  Will be

line 117: "   empty for usages like :Git --help.

line 118: " * "git_dir": Git dir of the relevant repository.

line 119: " * "exit_status": The integer exit code of the process.

line 120: " * "flags": Flags passed directly to Git, like -c and --help.

line 121: " * "file": Path to file containing command output.  Not guaranteed to exist,

line 122: "   so verify with filereadable() before trying to access it.

line 123: function! FugitiveResult(...) abort

line 126: 

line 127: " FugitiveExecute() runs Git with a list of arguments and returns a dictionary

line 128: " with the following keys:

line 129: "

line 130: " * "exit_status": The integer exit code of the process.

line 131: " * "stdout": The stdout produced by the process, as a list of lines.

line 132: " * "stderr": The stdout produced by the process, as a list of lines.

line 133: "

line 134: " An optional second argument provides the Git dir, or the buffer number of a

line 135: " buffer with a Git dir.  The default is the current buffer.

line 136: "

line 137: " An optional final argument is a callback Funcref, for asynchronous

line 138: " execution.

line 139: function! FugitiveExecute(args, ...) abort

line 142: 

line 143: " FugitiveShellCommand() turns an array of arguments into a Git command string

line 144: " which can be executed with functions like system() and commands like :!.

line 145: " Integer arguments will be treated as buffer numbers, and the appropriate

line 146: " relative path inserted in their place.

line 147: "

line 148: " An optional second argument provides the Git dir, or the buffer number of a

line 149: " buffer with a Git dir.  The default is the current buffer.

line 150: function! FugitiveShellCommand(...) abort

line 153: 

line 154: " FugitiveConfig() get returns an opaque structure that can be passed to other

line 155: " FugitiveConfig functions in lieu of a Git directory.  This can be faster

line 156: " when performing multiple config queries.  Do not rely on the internal

line 157: " structure of the return value as it is not guaranteed.  If you want a full

line 158: " dictionary of every config value, use FugitiveConfigGetRegexp('.*').

line 159: "

line 160: " An optional argument provides the Git dir, or the buffer number of a

line 161: " buffer with a Git dir.  The default is the current buffer.  Pass a blank

line 162: " string to limit to the global config.

line 163: function! FugitiveConfig(...) abort

line 166: 

line 167: " FugitiveConfigGet() retrieves a Git configuration value.  An optional second

line 168: " argument can be either the object returned by FugitiveConfig(), or a Git

line 169: " dir or buffer number to be passed along to FugitiveConfig().

line 170: function! FugitiveConfigGet(name, ...) abort

line 173: 

line 174: " FugitiveConfigGetAll() is like FugitiveConfigGet() but returns a list of

line 175: " all values.

line 176: function! FugitiveConfigGetAll(name, ...) abort

line 179: 

line 180: " FugitiveConfigGetRegexp() retrieves a dictionary of all configuration values

line 181: " with a key matching the given pattern.  Like git config --get-regexp, but

line 182: " using a Vim regexp.  Second argument has same semantics as

line 183: " FugitiveConfigGet().

line 184: function! FugitiveConfigGetRegexp(pattern, ...) abort

line 187: 

line 188: " FugitiveRemoteUrl() retrieves the remote URL for the given remote name,

line 189: " defaulting to the current branch's remote or "origin" if no argument is

line 190: " given.  Similar to `git remote get-url`, but also attempts to resolve HTTP

line 191: " redirects and SSH host aliases.

line 192: "

line 193: " An optional second argument provides the Git dir, or the buffer number of a

line 194: " buffer with a Git dir.  The default is the current buffer.

line 195: function! FugitiveRemoteUrl(...) abort

line 198: 

line 199: " FugitiveRemote() returns a data structure parsed from the remote URL.

line 200: " For example, for remote URL "https://me@example.com:1234/repo.git", the

line 201: " returned dictionary will contain the following:

line 202: "

line 203: " * "scheme": "https"

line 204: " * "authority": "user@example.com:1234"

line 205: " * "path": "/repo.git" (for SSH URLs this may be a relative path)

line 206: " * "pathname": "/repo.git" (always coerced to absolute path)

line 207: " * "host": "example.com:1234"

line 208: " * "hostname": "example.com"

line 209: " * "port": "1234"

line 210: " * "user": "me"

line 211: " * "path": "/repo.git"

line 212: " * "url": "https://me@example.com:1234/repo.git"

line 213: function! FugitiveRemote(...) abort

line 216: 

line 217: " FugitiveDidChange() triggers a FugitiveChanged event and reloads the summary

line 218: " buffer for the current or given buffer number's repository.  You can also

line 219: " give the result of a FugitiveExecute() and that context will be made

line 220: " available inside the FugitiveChanged() event.

line 221: "

line 222: " Passing the special argument 0 (the number zero) softly expires summary

line 223: " buffers for all repositories.  This can be used after a call to system()

line 224: " with unclear implications.

line 225: function! FugitiveDidChange(...) abort

line 228: 

line 229: " FugitiveHead() retrieves the name of the current branch. If the current HEAD

line 230: " is detached, FugitiveHead() will return the empty string, unless the

line 231: " optional argument is given, in which case the hash of the current commit

line 232: " will be truncated to the given number of characters.

line 233: "

line 234: " An optional second argument provides the Git dir, or the buffer number of a

line 235: " buffer with a Git dir.  The default is the current buffer.

line 236: function! FugitiveHead(...) abort

line 252: 

line 253: function! FugitivePath(...) abort

line 264: 

line 265: function! FugitiveStatusline(...) abort

line 271: 

line 272: let s:resolved_git_dirs = {}

line 273: function! FugitiveActualDir(...) abort

line 283: 

line 284: let s:commondirs = {}

line 285: function! FugitiveCommonDir(...) abort

line 307: 

line 308: function! FugitiveWorkTree(...) abort

line 316: 

line 317: function! FugitiveIsGitDir(...) abort

line 326: 

line 327: function! s:ReadFile(path, line_count) abort

line 337: 

line 338: let s:worktree_for_dir = {}

line 339: let s:dir_for_worktree = {}

line 340: function! s:Tree(path) abort

line 387: 

line 388: function! s:CeilingDirectories() abort

line 404: 

line 405: function! s:ResolveGitDir(git_dir) abort

line 422: 

line 423: function! FugitiveExtractGitDir(path) abort

line 471: 

line 472: function! FugitiveDetect(...) abort

line 484: 

line 485: function! FugitiveGitPath(path) abort

line 488: 

line 489: if exists('+shellslash')

line 490: 

line 491:   function! s:Slash(path) abort

line 494: 

line 495:   function! s:VimSlash(path) abort

line 498: 

line 499:   function FugitiveVimPath(path) abort

line 502: 

line 503: else

line 504: 

line 505:   function! s:Slash(path) abort

line 508: 

line 509:   function! s:VimSlash(path) abort

line 512: 

line 513:   if has('win32unix') && filereadable('/git-bash.exe')

line 514:     function! FugitiveVimPath(path) abort

line 517:   else

line 518:     function! FugitiveVimPath(path) abort

line 521:   endif

line 522: 

line 523: endif

line 524: 

line 525: function! s:ProjectionistDetect() abort

line 542: 

line 543: let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''

line 544: let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''

line 545: let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''

line 546: 

line 547: if exists(':G') != 2

line 548:   command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 549: endif

line 550: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 551: 

line 552: if exists(':Gstatus') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 553:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gstatus is deprecated in favor of :Git (with no arguments)"|echohl NONE'

line 555: endif

line 556: 

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 557: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame']

line 558:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 559:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'

line 562:   endif

line 563: endfor

line 564: unlet s:cmd

line 565: 

line 566: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)"

line 566: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)

line 567: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)"

line 567: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)

line 568: 

line 569: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 569: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 570: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)'

line 570: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)

line 571: 

line 572: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'

line 572: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")

line 573: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'

line 573: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")

line 574: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'

line 574: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")

line 575: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'

line 575: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")

line 576: 

line 577: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'

line 577: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)

line 578: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'

line 578: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)

line 579: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)'

line 579: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)

line 580: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)'

line 580: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)

line 581: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)'

line 581: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#EditComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)

line 582: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_tabs  '-complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)'

line 582: command! -bar -bang -nargs=* -range=-1 -addr=tabs -complete=customlist,fugitive#EditComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)

line 583: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 583: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gdrop    exe fugitive#DropCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 584: 

line 585: if exists(':Gr') != 2

line 586:   exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 586: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 587: endif

line 588: exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 588: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 589: 

line 590: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)'

line 590: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)

line 591: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)'

line 591: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)

line 592: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)'

line 592: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)

line 593: 

line 594: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 594: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 595: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 595: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 596: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 596: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 597: 

line 598: exe 'command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 598: command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 599: exe 'command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 599: command! -bar -bang -nargs=0 GUnlink exe fugitive#UnlinkCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 600: exe 'command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 600: command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 601: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 601: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 602: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 602: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 603: if exists(':Gremove') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 604:   exe 'command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE'

line 606: elseif exists(':Gremove') != 2 && !exists('g:fugitive_legacy_commands')

line 607:   exe 'command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"'

line 607: command! -bar -bang -nargs=0 Gremove echoerr ":Gremove has been removed in favor of :GRemove"

line 608: endif

line 609: if exists(':Gdelete') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 610:   exe 'command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE'

line 612: elseif exists(':Gdelete') != 2 && !exists('g:fugitive_legacy_commands')

line 613:   exe 'command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"'

line 613: command! -bar -bang -nargs=0 Gdelete echoerr ":Gdelete has been removed in favor of :GDelete"

line 614: endif

line 615: if exists(':Gmove') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 616:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE'

line 618: elseif exists(':Gmove') != 2 && !exists('g:fugitive_legacy_commands')

line 619:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove' 'echoerr ":Gmove has been removed in favor of :GMove"'

line 619: command! -bar -bang -nargs=? -complete=customlist,fugitive#CompleteObject Gmove echoerr ":Gmove has been removed in favor of :GMove"

line 621: endif

line 622: if exists(':Grename') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 623:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE'

line 625: elseif exists(':Grename') != 2 && !exists('g:fugitive_legacy_commands')

line 626:   exe 'command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename' 'echoerr ":Grename has been removed in favor of :GRename"'

line 626: command! -bar -bang -nargs=? -complete=customlist,fugitive#RenameComplete Grename echoerr ":Grename has been removed in favor of :GRename"

line 628: endif

line 629: 

line 630: exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'

line 630: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

line 631: if exists(':Gbrowse') != 2 && get(g:, 'fugitive_legacy_commands', 0)

line 632:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE'

line 634: elseif exists(':Gbrowse') != 2 && !exists('g:fugitive_legacy_commands')

line 635:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse' 'echoerr ":Gbrowse has been removed in favor of :GBrowse"'

line 635: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse echoerr ":Gbrowse has been removed in favor of :GBrowse"

line 637: endif

line 638: 

line 639: if v:version < 704

line 640:   finish

line 641: endif

line 642: 

line 643: let g:io_fugitive = { 'simplify': function('fugitive#simplify'), 'resolve': function('fugitive#resolve'), 'getftime': function('fugitive#getftime'), 'getfsize': function('fugitive#getfsize'), 'getftype': function('fugitive#getftype'), 'filereadable': function('fugitive#filereadable'), 'filewritable': function('fugitive#filewritable'), 'isdirectory': function('fugitive#isdirectory'), 'getfperm': function('fugitive#getfperm'), 'setfperm': function('fugitive#setfperm'), 'readfile': function('fugitive#readfile'), 'writefile': function('fugitive#writefile'), 'glob': function('fugitive#glob'), 'delete': function('fugitive#delete'), 'Real': function('FugitiveReal')}

line 659: 

line 660: augroup fugitive

line 661:   autocmd!

line 662: 

line 663:   autocmd BufNewFile,BufReadPost * if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

line 667:   autocmd FileType           netrw if exists('b:git_dir') && b:git_dir =~# '^$\|' . s:bad_git_dir |   unlet b:git_dir | endif

line 671:   autocmd BufFilePost            *  unlet! b:git_dir

line 672: 

line 673:   autocmd FileType git call fugitive#MapCfile()

line 675:   autocmd FileType gitcommit call fugitive#MapCfile('fugitive#MessageCfile()')

line 677:   autocmd FileType git,gitcommit if &foldtext ==# 'foldtext()' |    setlocal foldtext=fugitive#Foldtext() | endif

line 681:   autocmd FileType fugitive call fugitive#MapCfile('fugitive#PorcelainCfile()')

line 683:   autocmd FileType gitrebase let &l:include = '^\%(pick\|squash\|edit\|reword\|fixup\|drop\|[pserfd]\)\>' | if &l:includeexpr !~# 'Fugitive' |   let &l:includeexpr = 'v:fname =~# ''^\x\{4,\}$'' && len(FugitiveGitDir()) ? FugitiveFind(v:fname) : ' .     (len(&l:includeexpr) ? &l:includeexpr : 'v:fname') | endif | let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|setl inex= inc='

line 690: 

line 691:   autocmd BufReadCmd index{,.lock} nested if FugitiveIsGitDir(expand('<amatch>:p:h')) |   let b:git_dir = s:Slash(expand('<amatch>:p:h')) |   exe fugitive#BufReadStatus(v:cmdbang) |   echohl WarningMSG |   echo "fugitive: Direct editing of .git/" . expand('%:t') . " is deprecated" |   echohl NONE | elseif filereadable(expand('<amatch>')) |   silent doautocmd BufReadPre |   keepalt noautocmd read <amatch> |   silent 1delete_ |   silent doautocmd BufReadPost | else |   silent doautocmd BufNewFile | endif

line 706: 

line 707:   autocmd BufReadCmd   fugitive://*          nested exe fugitive#BufReadCmd() | if &path =~# '^\.\%(,\|$\)' |   let &l:path = substitute(&path, '^\.,\=', '', '') | endif

line 711:   autocmd BufWriteCmd  fugitive://*          nested exe fugitive#BufWriteCmd()

line 712:   autocmd FileReadCmd  fugitive://*          nested exe fugitive#FileReadCmd()

line 713:   autocmd FileWriteCmd fugitive://*          nested exe fugitive#FileWriteCmd()

line 714:   if exists('##SourceCmd')

line 715:     autocmd SourceCmd     fugitive://*       nested exe fugitive#SourceCmd()

line 716:   endif

line 717: 

line 718:   autocmd User Flags call Hoist('buffer', function('FugitiveStatusline'))

line 719: 

line 720:   autocmd User ProjectionistDetect call s:ProjectionistDetect()

line 721: augroup END

line 722: 

line 723: nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>

line 724: nmap <script> <Plug>fugitive: <Nop>

line 725: 

line 726: if get(g:, 'fugitive_no_maps')

line 727:   finish

line 728: endif

line 729: 

line 730: function! s:Map(mode, lhs, rhs, flags) abort

line 752: 

line 753: call s:Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

calling <SNR>118_Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'

line 2:   let head = a:lhs

line 3:   let tail = ''

line 4:   let keys = get(g:, a:mode.'remap', {})

line 5:   if len(keys) && type(keys) == type({})

line 6:     while !empty(head)

line 7:       if has_key(keys, head)

line 8:         let head = keys[head]

line 9:         if empty(head)

line 10:           return

line 11:         endif

line 12:         break

line 13:       endif

line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail

line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')

line 16:     endwhile

line 17:   endif

line 18:   if empty(mapcheck(head.tail, a:mode))

line 19:     exe a:mode.'map' flags head.tail a:rhs

line 19: cmap <expr><script><nowait> <C-R><C-G> fnameescape(fugitive#Object(@%))

line 20:   endif

<SNR>118_Map returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim

line 754: call s:Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

calling <SNR>118_Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

line 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'

line 2:   let head = a:lhs

line 3:   let tail = ''

line 4:   let keys = get(g:, a:mode.'remap', {})

line 5:   if len(keys) && type(keys) == type({})

line 6:     while !empty(head)

line 7:       if has_key(keys, head)

line 8:         let head = keys[head]

line 9:         if empty(head)

line 10:           return

line 11:         endif

line 12:         break

line 13:       endif

line 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail

line 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')

line 16:     endwhile

line 17:   endif

line 18:   if empty(mapcheck(head.tail, a:mode))

line 19:     exe a:mode.'map' flags head.tail a:rhs

line 19: nmap <silent><script><nowait> y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>

line 20:   endif

<SNR>118_Map returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/plugin/fugitive.vim
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect/fugitive.vim"
line 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftdetect/fugitive.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect/git.vim"
line 1: function! s:Setf(filetype) abort

line 6: 

line 7: function! s:StarSetf(ft) abort

line 12: 

line 13: " Git

line 14: au BufNewFile,BufRead COMMIT_EDITMSG,TAG_EDITMSG,MERGE_MSG^Icall s:Setf('gitcommit')

line 15: au BufNewFile,BufRead NOTES_EDITMSG,EDIT_DESCRIPTION^I^Icall s:Setf('gitcommit')

line 16: au BufNewFile,BufRead *.git/config,.gitconfig,*/etc/gitconfig^Icall s:Setf('gitconfig')

line 17: au BufNewFile,BufRead */.config/git/config^I^I^Icall s:Setf('gitconfig')

line 18: au BufNewFile,BufRead */.git/config.worktree^I^I^Icall s:Setf('gitconfig')

line 19: au BufNewFile,BufRead */.git/worktrees/*/config.worktree^Icall s:Setf('gitconfig')

line 20: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Icall s:Setf('gitconfig')

line 21: if !empty($XDG_CONFIG_HOME)

line 22:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Icall s:Setf('gitconfig')

line 23: endif

line 24: au BufNewFile,BufRead git-rebase-todo^I^Icall s:Setf('gitrebase')

line 25: au BufNewFile,BufRead .gitsendemail.msg.??????^Icall s:Setf('gitsendemail')

line 26: au BufNewFile,BufRead *.git/* if empty(&filetype) && getline(1) =~# '^\x\{40,\}\>\|^ref: ' |   set ft=git | endif

line 30: 

line 31: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')

line 32: 

line 33: au BufNewFile,BufRead *.patch if getline(1) =~# '^From [0-9a-f]\{40,\} Mon Sep 17 00:00:00 2001$' |   call s:Setf('gitsendemail') | endif

line 37: 

line 38: " This logic really belongs in scripts.vim

line 39: au BufNewFile,BufRead,StdinReadPost * if empty(&filetype) && getline(1) =~# '^\(commit\|tree\|object\) \x\{40,\}\>\|^tag \S\+$' |   set ft=git | endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-git/ftdetect/git.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim"
line 1: scriptencoding utf-8

line 2: 

line 3: if exists('g:loaded_gitgutter') || !has('signs') || &cp

line 4:   finish

line 5: endif

line 6: let g:loaded_gitgutter = 1

line 7: 

line 8: " Initialisation {{{

line 9: 

line 10: if v:version < 703 || (v:version == 703 && !has("patch105"))

line 11:   call gitgutter#utility#warn('Requires Vim 7.3.105')

line 12:   finish

line 13: endif

line 14: 

line 15: let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''

line 16: 

line 17: function! s:obsolete(var)

line 22: 

line 23: 

line 24: let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')

line 25: if exists('*nvim_open_win')

line 26:   let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)

line 27:   let g:gitgutter_floating_window_options = get(g:, 'gitgutter_floating_window_options', { 'relative': 'cursor', 'row': 1, 'col': 0, 'width': 42, 'height': &previewheight, 'style': 'minimal' })

line 35: else

line 36:   let default = exists('&previewpopup') ? !empty(&previewpopup) : 0

line 37:   let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', default)

line 38:   let g:gitgutter_floating_window_options = get(g:, 'gitgutter_floating_window_options', { 'line': 'cursor+1', 'col': 'cursor', 'moved': 'any' })

line 43: endif

line 44: let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)

line 45: if exists('*sign_unplace')

line 46:   let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)

line 47: else

line 48:   let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)

line 49: endif

line 50: let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)

line 51: let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)

line 52: let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)

line 53: let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)

line 54: " Nvim 0.4.0 has an expanding sign column

line 55: " The sign_place() function supports sign priority.

line 56: if (has('nvim-0.4.0') || exists('*sign_place')) && !exists('g:gitgutter_sign_allow_clobber')

line 57:   let g:gitgutter_sign_allow_clobber = 1

line 58: endif

line 59: let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)

line 60: let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)

line 61: let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')

line 62: let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')

line 63: let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')

line 64: 

line 65: if gitgutter#utility#supports_overscore_sign()

Searching for "autoload/gitgutter/utility.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/v
Searching for "/Users/piotr/.config/vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/gitgutter/utility.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/utility.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 65: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/utility.vim"
line 1: function! gitgutter#utility#supports_overscore_sign()

line 8: 

line 9: " True for git v1.7.2+.

line 10: function! gitgutter#utility#git_supports_command_line_config_override() abort

line 17: 

line 18: function! gitgutter#utility#setbufvar(buffer, varname, val)

line 29: 

line 30: function! gitgutter#utility#getbufvar(buffer, varname, ...)

line 40: 

line 41: function! gitgutter#utility#warn(message) abort

line 47: 

line 48: function! gitgutter#utility#warn_once(bufnr, message, key) abort

line 57: 

line 58: " Returns truthy when the buffer's file should be processed; and falsey when it shouldn't.

line 59: " This function does not and should not make any system calls.

line 60: function! gitgutter#utility#is_active(bufnr) abort

line 67: 

line 68: function! s:not_git_dir(bufnr) abort

line 71: 

line 72: function! s:is_file_buffer(bufnr) abort

line 75: 

line 76: " From tpope/vim-fugitive

line 77: function! s:winshell()

line 80: 

line 81: " From tpope/vim-fugitive

line 82: function! gitgutter#utility#shellescape(arg) abort

line 91: 

line 92: function! gitgutter#utility#file(bufnr)

line 95: 

line 96: " Not shellescaped

line 97: function! gitgutter#utility#extension(bufnr) abort

line 100: 

line 101: function! gitgutter#utility#system(cmd, ...) abort

line 113: 

line 114: function! gitgutter#utility#has_repo_path(bufnr)

line 117: 

line 118: " Path of file relative to repo root.

line 119: "

line 120: " *     empty string - not set

line 121: " * non-empty string - path

line 122: " *               -1 - pending

line 123: " *               -2 - not tracked by git

line 124: " *               -3 - assume unchanged

line 125: function! gitgutter#utility#repo_path(bufnr, shellesc) abort

line 129: 

line 130: 

line 131: let s:set_path_handler = {}

line 132: 

line 133: function! s:set_path_handler.out(buffer, listing) abort

line 148: 

line 149: function! s:set_path_handler.err(buffer) abort

line 152: 

line 153: 

line 154: " continuation - a funcref or hash to call after setting the repo path asynchronously.

line 155: "

line 156: " Returns 'async' if the the path is set asynchronously, 0 otherwise.

line 157: function! gitgutter#utility#set_repo_path(bufnr, continuation) abort

line 190: 

line 191: 

line 192: function! gitgutter#utility#clean_smudge_filter_applies(bufnr)

line 203: 

line 204: 

line 205: function! s:use_known_shell() abort

line 217: 

line 218: function! s:restore_shell() abort

line 223: 

line 224: function! gitgutter#utility#get_diff_base(bufnr)

line 232: 

line 233: " Returns the original path (shellescaped) at the buffer's diff base.

line 234: function! gitgutter#utility#base_path(bufnr)

line 287: 

line 288: " Returns a dict of current path to original path at the given base.

line 289: function! s:obtain_file_renames(bufnr, base)

line 313: 

line 314: function! s:abs_path(bufnr, shellesc)

line 322: 

line 323: " Shellescaped

line 324: function! gitgutter#utility#dir(bufnr) abort

line 327: 

line 328: " Not shellescaped.

line 329: function! gitgutter#utility#filename(bufnr) abort

line 332: 

line 333: function! s:exists_file(bufnr) abort

line 336: 

line 337: " Get rid of any trailing new line or SOH character.

line 338: "

line 339: " git ls-files -z produces output with null line termination.

line 340: " Vim's system() replaces any null characters in the output

line 341: " with SOH (start of header), i.e. ^A.

line 342: function! s:strip_trailing_new_line(line) abort

line 345: 

line 346: function! gitgutter#utility#windows()

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/utility.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
calling gitgutter#utility#supports_overscore_sign()

line 1:   if gitgutter#utility#windows()

calling gitgutter#utility#windows()

line 1:   return has('win64') || has('win32') || has('win16')

gitgutter#utility#windows returning #0

continuing in gitgutter#utility#supports_overscore_sign

line 2:     return &encoding ==? 'utf-8'

line 3:   else

line 4:     return &termencoding ==? &encoding || &termencoding == ''

gitgutter#utility#supports_overscore_sign returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim

line 66:   let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '‾')

line 67: else

line 68:   let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')

line 69: endif

line 70: 

line 71: let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below', '_¯')

line 72: let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')

line 73: let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')

line 74: let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')

line 75: let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')

line 76: let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')

line 77: let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)

line 78: let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)

line 79: let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)

line 80: let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)

line 81: let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)

line 82: let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)

line 83: let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)

line 84: 

line 85: let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')

line 86: if !executable(g:gitgutter_git_executable)

line 87:   if g:gitgutter_enabled

line 88:     call gitgutter#utility#warn('Cannot find git. Please set g:gitgutter_git_executable.')

line 89:   endif

line 90:   finish

line 91: endif

line 92: 

line 93: let default_grep = 'grep'

line 94: let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)

line 95: if !empty(g:gitgutter_grep)

line 96:   if executable(split(g:gitgutter_grep)[0])

line 97:     if $GREP_OPTIONS =~# '--color=always'

line 98:       let g:gitgutter_grep .= ' --color=never'

line 99:     endif

line 100:   else

line 101:     if g:gitgutter_grep !=# default_grep

line 102:       call gitgutter#utility#warn('Cannot find '.g:gitgutter_grep.'. Please check g:gitgutter_grep.')

line 103:     endif

line 104:     let g:gitgutter_grep = ''

line 105:   endif

line 106: endif

line 107: 

line 108: call gitgutter#highlight#define_highlights()

Searching for "autoload/gitgutter/highlight.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config
Searching for "/Users/piotr/.config/vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/gitgutter/highlight.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/highlight.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter)
fchdir() to previous dir
line 108: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/highlight.vim"
line 1: function! gitgutter#highlight#line_disable() abort

line 11: 

line 12: function! gitgutter#highlight#line_enable() abort

line 24: 

line 25: function! gitgutter#highlight#line_toggle() abort

line 32: 

line 33: 

line 34: function! gitgutter#highlight#linenr_disable() abort

line 44: 

line 45: function! gitgutter#highlight#linenr_enable() abort

line 57: 

line 58: function! gitgutter#highlight#linenr_toggle() abort

line 65: 

line 66: 

line 67: function! gitgutter#highlight#define_highlights() abort

line 123: 

line 124: function! gitgutter#highlight#define_signs() abort

line 137: 

line 138: function! s:define_sign_text() abort

line 146: 

line 147: function! gitgutter#highlight#define_sign_text_highlights() abort

line 168: 

line 169: function! s:define_sign_line_highlights() abort

line 186: 

line 187: function! s:define_sign_linenr_highlights() abort

line 209: 

line 210: function! s:get_hl(group, what, mode) abort

line 217: 

line 218: function! s:get_foreground_colors(group) abort

line 223: 

line 224: function! s:get_background_colors(group) abort

line 229: 

line 230: function! s:useful_diff_colours()

line 236: 

line 237: function! s:get_foreground_fallback_colors(type)

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/gitgutter/highlight.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
calling gitgutter#highlight#define_highlights()

line 1:   let [guibg, ctermbg] = s:get_background_colors('SignColumn')

calling <SNR>123_get_background_colors('SignColumn')

line 1:   let ctermbg = s:get_hl(a:group, 'bg', 'cterm')

calling <SNR>123_get_hl('SignColumn', 'bg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '7'

continuing in <SNR>123_get_background_colors

line 2:   let guibg = s:get_hl(a:group, 'bg', 'gui')

calling <SNR>123_get_hl('SignColumn', 'bg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_background_colors

line 3:   return [guibg, ctermbg]

<SNR>123_get_background_colors returning ['NONE', '7']

continuing in gitgutter#highlight#define_highlights

line 2: 

line 3:   " Highlights used by the signs.

line 4: 

line 5:   " When they are invisible.

line 6:   execute "highlight GitGutterAddInvisible    guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 6: highlight GitGutterAddInvisible    guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 7:   execute "highlight GitGutterChangeInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 7: highlight GitGutterChangeInvisible guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 8:   execute "highlight GitGutterDeleteInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 8: highlight GitGutterDeleteInvisible guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 9:   highlight default link GitGutterChangeDeleteInvisible GitGutterChangeInvisible

line 10: 

line 11:   " When they are visible.

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterAdd')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterAdd', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterAdd', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#396847'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#396847', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterChange')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterChange', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterChange', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#ac5402'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#ac5402', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterDelete')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterDelete', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterDelete', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#a5222f'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#a5222f', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 18:     elseif s:useful_diff_colours()

line 19:       let [guifg, ctermfg] = s:get_foreground_colors('Diff'.type)

line 20:     else

line 21:       let [guifg, ctermfg] = s:get_foreground_fallback_colors(type)

line 22:     endif

line 23:     execute "highlight GitGutter".type." guifg=".guifg." guibg=".guibg." ctermfg=".ctermfg." ctermbg=".ctermbg

line 24:   endfor

line 25: 

line 26:   if hlexists("GitGutterChangeDelete") && g:gitgutter_set_sign_backgrounds

line 27:     execute "highlight GitGutterChangeDelete guibg=".guibg." ctermbg=".ctermbg

line 28:   endif

line 29: 

line 30:   highlight default link GitGutterChangeDelete GitGutterChange

line 31: 

line 32:   " Highlights used for the whole line.

line 33: 

line 34:   highlight default link GitGutterAddLine          DiffAdd

line 35:   highlight default link GitGutterChangeLine       DiffChange

line 36:   highlight default link GitGutterDeleteLine       DiffDelete

line 37:   highlight default link GitGutterChangeDeleteLine GitGutterChangeLine

line 38: 

line 39:   highlight default link GitGutterAddLineNr          CursorLineNr

line 40:   highlight default link GitGutterChangeLineNr       CursorLineNr

line 41:   highlight default link GitGutterDeleteLineNr       CursorLineNr

line 42:   highlight default link GitGutterChangeDeleteLineNr GitGutterChangeLineNr

line 43: 

line 44:   " Highlights used intra line.

line 45:   highlight default GitGutterAddIntraLine    gui=reverse cterm=reverse

line 46:   highlight default GitGutterDeleteIntraLine gui=reverse cterm=reverse

line 47:   " Set diff syntax colours (used in the preview window) - diffAdded,diffChanged,diffRemoved -

line 48:   " to match the signs, if not set aleady.

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

gitgutter#highlight#define_highlights returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim

line 109: call gitgutter#highlight#define_signs()

calling gitgutter#highlight#define_signs()

line 1:   sign define GitGutterLineAdded

line 2:   sign define GitGutterLineModified

line 3:   sign define GitGutterLineRemoved

line 4:   sign define GitGutterLineRemovedFirstLine

line 5:   sign define GitGutterLineRemovedAboveAndBelow

line 6:   sign define GitGutterLineModifiedRemoved

line 7: 

line 8:   call s:define_sign_text()

calling <SNR>123_define_sign_text()

line 1:   execute "sign define GitGutterLineAdded                 text=" . g:gitgutter_sign_added

line 1: sign define GitGutterLineAdded                 text=▎

line 2:   execute "sign define GitGutterLineModified              text=" . g:gitgutter_sign_modified

line 2: sign define GitGutterLineModified              text=▎

line 3:   execute "sign define GitGutterLineRemoved               text=" . g:gitgutter_sign_removed

line 3: sign define GitGutterLineRemoved               text=▎

line 4:   execute "sign define GitGutterLineRemovedFirstLine      text=" . g:gitgutter_sign_removed_first_line

line 4: sign define GitGutterLineRemovedFirstLine      text=▎

line 5:   execute "sign define GitGutterLineRemovedAboveAndBelow  text=" . g:gitgutter_sign_removed_above_and_below

line 5: sign define GitGutterLineRemovedAboveAndBelow  text=_¯

line 6:   execute "sign define GitGutterLineModifiedRemoved       text=" . g:gitgutter_sign_modified_removed

line 6: sign define GitGutterLineModifiedRemoved       text=▌

<SNR>123_define_sign_text returning #0

continuing in gitgutter#highlight#define_signs

line 9:   call gitgutter#highlight#define_sign_text_highlights()

calling gitgutter#highlight#define_sign_text_highlights()

line 1:   " Once a sign's text attribute has been defined, it cannot be undefined or

line 2:   " set to an empty value.  So to make signs' text disappear (when toggling

line 3:   " off or disabling) we make them invisible by setting their foreground colours

line 4:   " to the background's.

line 5:   if g:gitgutter_signs

line 6:     sign define GitGutterLineAdded                 texthl=GitGutterAdd

line 7:     sign define GitGutterLineModified              texthl=GitGutterChange

line 8:     sign define GitGutterLineRemoved               texthl=GitGutterDelete

line 9:     sign define GitGutterLineRemovedFirstLine      texthl=GitGutterDelete

line 10:     sign define GitGutterLineRemovedAboveAndBelow  texthl=GitGutterDelete

line 11:     sign define GitGutterLineModifiedRemoved       texthl=GitGutterChangeDelete

line 12:   else

line 13:     sign define GitGutterLineAdded                 texthl=GitGutterAddInvisible

line 14:     sign define GitGutterLineModified              texthl=GitGutterChangeInvisible

line 15:     sign define GitGutterLineRemoved               texthl=GitGutterDeleteInvisible

line 16:     sign define GitGutterLineRemovedFirstLine      texthl=GitGutterDeleteInvisible

line 17:     sign define GitGutterLineRemovedAboveAndBelow  texthl=GitGutterDeleteInvisible

line 18:     sign define GitGutterLineModifiedRemoved       texthl=GitGutterChangeDeleteInvisible

line 19:   endif

gitgutter#highlight#define_sign_text_highlights returning #0

continuing in gitgutter#highlight#define_signs

line 10:   call s:define_sign_line_highlights()

calling <SNR>123_define_sign_line_highlights()

line 1:   if g:gitgutter_highlight_lines

line 2:     sign define GitGutterLineAdded                 linehl=GitGutterAddLine

line 3:     sign define GitGutterLineModified              linehl=GitGutterChangeLine

line 4:     sign define GitGutterLineRemoved               linehl=GitGutterDeleteLine

line 5:     sign define GitGutterLineRemovedFirstLine      linehl=GitGutterDeleteLine

line 6:     sign define GitGutterLineRemovedAboveAndBelow  linehl=GitGutterDeleteLine

line 7:     sign define GitGutterLineModifiedRemoved       linehl=GitGutterChangeDeleteLine

line 8:   else

line 9:     sign define GitGutterLineAdded                 linehl=NONE

line 10:     sign define GitGutterLineModified              linehl=NONE

line 11:     sign define GitGutterLineRemoved               linehl=NONE

line 12:     sign define GitGutterLineRemovedFirstLine      linehl=NONE

line 13:     sign define GitGutterLineRemovedAboveAndBelow  linehl=NONE

line 14:     sign define GitGutterLineModifiedRemoved       linehl=NONE

line 15:   endif

<SNR>123_define_sign_line_highlights returning #0

continuing in gitgutter#highlight#define_signs

line 11:   call s:define_sign_linenr_highlights()

calling <SNR>123_define_sign_linenr_highlights()

line 1:   if has('nvim-0.3.2')

line 2:     try

line 3:       if g:gitgutter_highlight_linenrs

line 4:         sign define GitGutterLineAdded                 numhl=GitGutterAddLineNr

line 5:         sign define GitGutterLineModified              numhl=GitGutterChangeLineNr

line 6:         sign define GitGutterLineRemoved               numhl=GitGutterDeleteLineNr

line 7:         sign define GitGutterLineRemovedFirstLine      numhl=GitGutterDeleteLineNr

line 8:         sign define GitGutterLineRemovedAboveAndBelow  numhl=GitGutterDeleteLineNr

line 9:         sign define GitGutterLineModifiedRemoved       numhl=GitGutterChangeDeleteLineNr

line 10:       else

line 11:         sign define GitGutterLineAdded                 numhl=NONE

line 12:         sign define GitGutterLineModified              numhl=NONE

line 13:         sign define GitGutterLineRemoved               numhl=NONE

line 14:         sign define GitGutterLineRemovedFirstLine      numhl=NONE

line 15:         sign define GitGutterLineRemovedAboveAndBelow  numhl=NONE

line 16:         sign define GitGutterLineModifiedRemoved       numhl=NONE

line 17:       endif

line 18:     catch /E475/

line 19:     endtry

line 20:   endif

<SNR>123_define_sign_linenr_highlights returning #0

continuing in gitgutter#highlight#define_signs

gitgutter#highlight#define_signs returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim

line 110: 

line 111: " Prevent infinite loop where:

line 112: " - executing a job in the foreground launches a new window which takes the focus;

line 113: " - when the job finishes, focus returns to gvim;

line 114: " - the FocusGained event triggers a new job (see below).

line 115: if gitgutter#utility#windows() && !(g:gitgutter_async && gitgutter#async#available())

calling gitgutter#utility#windows()

line 1:   return has('win64') || has('win32') || has('win16')

gitgutter#utility#windows returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim

line 116:   set noshelltemp

line 117: endif

line 118: 

line 119: " }}}

line 120: 

line 121: " Primary functions {{{

line 122: 

line 123: command! -bar GitGutterAll call gitgutter#all(1)

line 124: command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)

line 125: 

line 126: command! -bar GitGutterDisable call gitgutter#disable()

line 127: command! -bar GitGutterEnable  call gitgutter#enable()

line 128: command! -bar GitGutterToggle  call gitgutter#toggle()

line 129: 

line 130: command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()

line 131: command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()

line 132: command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()

line 133: 

line 134: command! -bar GitGutterQuickFix call gitgutter#quickfix(0)

line 135: command! -bar GitGutterQuickFixCurrentFile call gitgutter#quickfix(1)

line 136: 

line 137: command! -bar GitGutterDiffOrig call gitgutter#difforig()

line 138: 

line 139: " }}}

line 140: 

line 141: " Line highlights {{{

line 142: 

line 143: command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()

line 144: command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()

line 145: command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()

line 146: 

line 147: " }}}

line 148: 

line 149: " 'number' column highlights {{{

line 150: command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()

line 151: command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()

line 152: command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()

line 153: " }}}

line 154: 

line 155: " Signs {{{

line 156: 

line 157: command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()

line 158: command! -bar GitGutterSignsDisable call gitgutter#sign#disable()

line 159: command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()

line 160: 

line 161: " }}}

line 162: 

line 163: " Hunks {{{

line 164: 

line 165: command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)

line 166: command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)

line 167: 

line 168: command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)

line 169: command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()

line 170: command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()

line 171: 

line 172: " Hunk text object

line 173: onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>

line 174: onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>

line 175: xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(1)<CR>

line 176: xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(0)<CR>

line 177: 

line 178: 

line 179: " Returns the git-diff hunks for the file or an empty list if there

line 180: " aren't any hunks.

line 181: "

line 182: " The return value is a list of lists.  There is one inner list per hunk.

line 183: "

line 184: "   [

line 185: "     [from_line, from_count, to_line, to_count],

line 186: "     [from_line, from_count, to_line, to_count],

line 187: "     ...

line 188: "   ]

line 189: "

line 190: " where:

line 191: "

line 192: " `from`  - refers to the staged file

line 193: " `to`    - refers to the working tree's file

line 194: " `line`  - refers to the line number where the change starts

line 195: " `count` - refers to the number of lines the change covers

line 196: function! GitGutterGetHunks()

line 200: 

line 201: " Returns an array that contains a summary of the hunk status for the current

line 202: " window.  The format is [ added, modified, removed ], where each value

line 203: " represents the number of lines added/modified/removed respectively.

line 204: function! GitGutterGetHunkSummary()

line 207: 

line 208: " }}}

line 209: 

line 210: " Folds {{{

line 211: 

line 212: command! -bar GitGutterFold call gitgutter#fold#toggle()

line 213: 

line 214: " }}}

line 215: 

line 216: command! -bar GitGutterDebug call gitgutter#debug#debug()

line 217: 

line 218: " Maps {{{

line 219: 

line 220: nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"

line 221: nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterNextHunk to \<lt>Plug>(GitGutterNextHunk)')\<CR>"

line 222: nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"

line 223: nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterPrevHunk to \<lt>Plug>(GitGutterPrevHunk)')\<CR>"

line 224: 

line 225: xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>

line 226: xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>

line 227: nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>

line 228: nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>

line 229: nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>

line 230: nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>

line 231: nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>

line 232: nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>

line 233: 

line 234: " }}}

line 235: 

line 236: function! s:on_bufenter()

line 263: 

line 264: function! s:next_tick(cmd)

line 267: 

line 268: function! s:on_buffilepre(bufnr)

line 276: 

line 277: function! s:on_buffilepost(bufnr)

line 296: 

line 297: " Autocommands {{{

line 298: 

line 299: augroup gitgutter

line 300:   autocmd!

line 301: 

line 302:   autocmd TabEnter * let t:gitgutter_didtabenter = 1

line 303: 

line 304:   autocmd BufEnter * call s:on_bufenter()

line 305: 

line 306:   " Ensure Vim is always checking for CursorMoved to avoid CursorMoved

line 307:   " being fired at the wrong time in floating preview window on Neovim.

line 308:   " See vim/vim#2053.

line 309:   autocmd CursorMoved * execute ''

line 310: 

line 311:   autocmd CursorHold,CursorHoldI * call gitgutter#process_buffer(bufnr(''), 0)

line 312:   if exists('*timer_start') && has('lambda')

line 313:     autocmd FileChangedShellPost * call s:next_tick("call gitgutter#process_buffer(+".expand('<abuf>').", 1)")

line 314:   else

line 315:     autocmd FileChangedShellPost * call gitgutter#process_buffer(+expand('<abuf>'), 1)

line 316:   endif

line 317: 

line 318:   " Ensure that all buffers are processed when opening vim with multiple files, e.g.:

line 319:   "

line 320:   "   vim -o file1 file2

line 321:   autocmd VimEnter * if winnr() != winnr('$') | call gitgutter#all(0) | endif

line 322: 

line 323:   autocmd ShellCmdPost * call gitgutter#all(1)

line 324:   autocmd BufLeave term://* call gitgutter#all(1)

line 325: 

line 326:   autocmd User FugitiveChanged call gitgutter#all(1)

line 327: 

line 328:   " Handle all buffers when focus is gained, but only after it was lost.

line 329:   " FocusGained gets triggered on startup with Neovim at least already.

line 330:   " Therefore this tracks also if it was lost before.

line 331:   let s:focus_was_lost = 0

line 332:   autocmd FocusGained * if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif

line 333:   autocmd FocusLost * let s:focus_was_lost = 1

line 334: 

line 335:   if exists('##VimResume')

line 336:     autocmd VimResume * call gitgutter#all(1)

line 337:   endif

line 338: 

line 339:   autocmd ColorScheme * call gitgutter#highlight#define_highlights()

line 340: 

line 341:   autocmd BufFilePre  * call s:on_buffilepre(expand('<abuf>'))

line 342:   autocmd BufFilePost * call s:on_buffilepost(expand('<abuf>'))

line 343: 

line 344:   autocmd QuickFixCmdPre  *vimgrep* let b:gitgutter_was_enabled = gitgutter#utility#getbufvar(expand('<abuf>'), 'enabled') | GitGutterBufferDisable

line 345:   autocmd QuickFixCmdPost *vimgrep* if b:gitgutter_was_enabled | GitGutterBufferEnable | endif | unlet b:gitgutter_was_enabled

line 346: augroup END

line 347: 

line 348: " }}}

line 349: 

line 350: " vim:set et sw=2 fdm=marker:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/plugin/gitgutter.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim"
line 1: " gutentags.vim - Automatic ctags management for Vim

line 2: " Maintainer:   Ludovic Chabant <http://ludovic.chabant.com>

line 3: " Version:      2.0.0

line 4: 

line 5: " Globals {{{

line 6: 

line 7: if (&cp || get(g:, 'gutentags_dont_load', 0))

line 8:     finish

line 9: endif

line 10: 

line 11: if v:version < 704

line 12:     echoerr "gutentags: this plugin requires vim >= 7.4."

line 13:     finish

line 14: endif

line 15: 

line 16: if !(has('job') || (has('nvim') && exists('*jobwait')))

line 17:     echoerr "gutentags: this plugin requires the job API from Vim8 or Neovim."

line 18:     finish

line 19: endif

line 20: 

line 21: let g:gutentags_debug = get(g:, 'gutentags_debug', 0)

line 22: 

line 23: if (exists('g:loaded_gutentags') && !g:gutentags_debug)

line 24:     finish

line 25: endif

line 26: if (exists('g:loaded_gutentags') && g:gutentags_debug)

line 27:     echom "Reloaded gutentags."

line 28: endif

line 29: let g:loaded_gutentags = 1

line 30: 

line 31: let g:gutentags_trace = get(g:, 'gutentags_trace', 0)

line 32: let g:gutentags_fake = get(g:, 'gutentags_fake', 0)

line 33: let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)

line 34: let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)

line 35: let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)

line 36: let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])

line 37: 

line 38: let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', get(g:, 'gutentags_enabled_user_func', ''))

line 40: 

line 41: let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)

line 42: let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)

line 43: let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])

line 44: if g:gutentags_add_default_project_roots

line 45:     let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']

line 46: endif

line 47: 

line 48: let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')

line 49: 

line 50: let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])

line 51: call add(g:gutentags_project_info, {'type': 'python', 'file': 'setup.py'})

line 52: call add(g:gutentags_project_info, {'type': 'ruby', 'file': 'Gemfile'})

line 53: 

line 54: let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['/usr/local', '/opt/homebrew', '/home/linuxbrew/.linuxbrew'])

line 56: 

line 57: let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])

line 58: let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)

line 59: let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)

line 60: let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)

line 61: let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)

line 62: let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)

line 63: let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')

line 64: 

line 65: let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))

line 66: 

line 67: if !exists('g:gutentags_cache_dir')

line 68:     let g:gutentags_cache_dir = ''

line 69: elseif !empty(g:gutentags_cache_dir)

line 70:     " Make sure we get an absolute/resolved path (e.g. expanding `~/`), and

line 71:     " strip any trailing slash.

line 72:     let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')

line 73:     let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[/\\]$??')

line 74: endif

line 75: 

line 76: let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)

line 77: 

line 78: if g:gutentags_cache_dir != '' && !isdirectory(g:gutentags_cache_dir)

line 79:     call mkdir(g:gutentags_cache_dir, 'p')

line 80: endif

line 81: 

line 82: if has('win32')

line 83:     let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\plat\\win32\\"

line 84:     let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\res\\"

line 85:     let g:gutentags_script_ext = '.cmd'

line 86: else

line 87:     let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '/plat/unix/'

line 88:     let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '/res/'

line 89:     let g:gutentags_script_ext = '.sh'

line 90: endif

line 91: 

line 92: let g:__gutentags_vim_is_leaving = 0

line 93: 

line 94: " }}}

line 95: 

line 96: " Gutentags Setup {{{

line 97: 

line 98: augroup gutentags_detect

line 99:     autocmd!

line 100:     autocmd BufNewFile,BufReadPost *  call gutentags#setup_gutentags()

line 101:     autocmd VimEnter               *  if expand('<amatch>')==''|call gutentags#setup_gutentags()|endif

line 102:     autocmd VimLeavePre            *  call gutentags#on_vim_leave_pre()

line 103:     autocmd VimLeave               *  call gutentags#on_vim_leave()

line 104: augroup end

line 105: 

line 106: " }}}

line 107: 

line 108: " Toggles and Miscellaneous Commands {{{

line 109: 

line 110: if g:gutentags_define_advanced_commands

line 111:     command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled

line 112:     command! GutentagsToggleTrace   :call gutentags#toggletrace()

line 113: endif

line 114: 

line 115: if g:gutentags_debug

line 116:     command! GutentagsToggleFake    :call gutentags#fake()

line 117: endif

line 118: 

line 119: " }}}

line 120: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/plugin/gutentags.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin/health.vim"
line 1: if exists('g:loaded_healthcheck') || has('nvim')

line 2:     finish

line 3: endif

line 4: let g:loaded_healthcheck = 1

line 5: 

line 6: command -nargs=* -bar CheckHealth call health#check([<f-args>])

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/plugin/health.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim"
line 1: " hexokinase.(n)vim - (Neo)Vim plugin for colouring hex codes

line 2: " Maintainer: Adam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>

line 3: " Vertion 2.0

line 4: 

line 5: if exists('g:loaded_hexokinase')

line 6:     finish

line 7: endif

line 8: 

line 9: let g:loaded_hexokinase = 1

line 10: 

line 11: let g:Hexokinase_executable_path = get(g:, 'Hexokinase_executable_path', executable(expand('<sfile>:h:h').'/hexokinase/hexokinase')   ? expand('<sfile>:h:h').'/hexokinase/hexokinase'   : expand($GOPATH).'/bin/hexokinase')

line 15: let g:Hexokinase_v2 = get(g:, 'Hexokinase_v2', 1)

line 16: 

line 17: if g:Hexokinase_v2

line 18:     if executable(g:Hexokinase_executable_path)

line 19:         call hexokinase#v2#setup()

Searching for "autoload/hexokinase/v2.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/p
Searching for "/Users/piotr/.config/vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/hexokinase/v2.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase)
fchdir() to previous dir
line 19: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2.vim"
line 1: scriptencoding utf-8

line 2: 

line 3: fun! hexokinase#v2#setup() abort

line 53: 

line 54: fun! s:on_refresh_event() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim
calling hexokinase#v2#setup()

line 1:     if has('nvim')

line 2:         let g:Hexokinase_highlighters = get(g:, 'Hexokinase_highlighters', ['virtual'])

line 3:     else

line 4:         let g:Hexokinase_highlighters = get(g:, 'Hexokinase_highlighters', ['sign_column'])

line 5:     endif

line 6:     if len(g:Hexokinase_highlighters) == 1 && g:Hexokinase_highlighters[0] == 'sign_column' && &signcolumn == 'no'

line 7:         echom "[vim-hexokinase] You seem to be using sign_column for highlighting but 'signcolumn' is set to 'no', try enabling it to see colours."

line 8:     endif

line 9: 

line 10:     let g:Hexokinase_virtualText = get(g:, 'Hexokinase_virtualText', '■')

line 11:     let g:Hexokinase_signIcon = get(g:, 'Hexokinase_signIcon', '■')

line 12: 

line 13:     let g:Hexokinase_optOutPatterns = get(g:, 'Hexokinase_optOutPatterns', '')

line 14:     let g:Hexokinase_optInPatterns = get(g:, 'Hexokinase_optInPatterns', 'full_hex,rgb,rgba,hsl,hsla,colour_names')

line 15:     let g:Hexokinase_ftOptOutPatterns = get(g:, 'Hexokinase_ftOptOutPatterns', {})

line 16:     let g:Hexokinase_ftOptInPatterns = get(g:, 'Hexokinase_ftOptInPatterns', {})

line 17:     let g:Hexokinase_palettes = get(g:, 'Hexokinase_palettes', [])

line 18: 

line 19:     let g:Hexokinase_builtinHighlighters = get(g:, 'Hexokinase_builtinHighlighters', [     'virtual',     'sign_column',     'background',     'backgroundfull',     'foreground',     'foregroundfull' ])

line 27:     let g:Hexokinase_highlightCallbacks = get(g:, 'Hexokinase_highlightCallbacks', [])

line 28:     let g:Hexokinase_tearDownCallbacks = get(g:, 'Hexokinase_tearDownCallbacks', [])

line 29:     for highlighter in g:Hexokinase_highlighters

line 30:         if index(g:Hexokinase_builtinHighlighters, highlighter) >= 0

line 31:             call add(g:Hexokinase_highlightCallbacks, function('hexokinase#highlighters#' . highlighter . '#highlightv2'))

line 32:             call add(g:Hexokinase_tearDownCallbacks, function('hexokinase#highlighters#' . highlighter . '#tearDownv2'))

line 33:         endif

line 34:     endfor

line 29:     for highlighter in g:Hexokinase_highlighters

line 30:         if index(g:Hexokinase_builtinHighlighters, highlighter) >= 0

line 31:             call add(g:Hexokinase_highlightCallbacks, function('hexokinase#highlighters#' . highlighter . '#highlightv2'))

line 32:             call add(g:Hexokinase_tearDownCallbacks, function('hexokinase#highlighters#' . highlighter . '#tearDownv2'))

line 33:         endif

line 34:     endfor

line 35: 

line 36:     command! HexokinaseToggle call hexokinase#v2#scraper#toggle()

line 37:     command! HexokinaseTurnOn call hexokinase#v2#scraper#on()

line 38:     command! HexokinaseTurnOff call hexokinase#v2#scraper#off()

line 39: 

line 40:     let g:Hexokinase_refreshEvents = get(g:, 'Hexokinase_refreshEvents', ['TextChanged', 'InsertLeave', 'BufRead'])

line 41:     let g:Hexokinase_ftDisabled = get(g:, 'Hexokinase_ftDisabled', [])

line 42:     let g:Hexokinase_termDisabled = get(g:, 'Hexokinase_termDisabled', 0)

line 43: 

line 44:     augroup hexokinase_autocmds

line 45:         autocmd!

line 46:         exe 'autocmd '.join(g:Hexokinase_refreshEvents, ',').' * call s:on_refresh_event()'

line 46: autocmd TextChanged,InsertLeave,BufRead * call s:on_refresh_event()

line 47:         autocmd ColorScheme * call s:on_refresh_event()

line 48:     augroup END

hexokinase#v2#setup returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim

line 20:     else

line 21:         echohl Error | echom 'vim-hexokinase needs updating. Run `make hexokinase` in project root. See `:h hexokinase-installation` for more info.' | echohl None

line 21:  echom 'vim-hexokinase needs updating. Run `make hexokinase` in project root. See `:h hexokinase-installation` for more info.' | echohl None

line 21:  echohl None

line 22:     endif

line 23: else

line 24:     call hexokinase#v1#setup()

line 25: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/plugin/hexokinase.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin/projectionist.vim"
line 1: " Location:     plugin/projectionist.vim

line 2: " Author:       Tim Pope <http://tpo.pe/>

line 3: " Version:      1.3

line 4: " GetLatestVimScripts: 4989 1 :AutoInstall: projectionist.vim

line 5: 

line 6: if exists("g:loaded_projectionist") || v:version < 704 || &cp

line 7:   finish

line 8: endif

line 9: let g:loaded_projectionist = 1

line 10: 

line 11: " ProjectionistHas('Gemfile&lib/|*.gemspec', '/path/to/root')

line 12: function! ProjectionistHas(req, ...) abort

line 26: 

line 27: let s:slash = exists('+shellslash') ? '\' : '/'

line 28: 

line 29: if !exists('g:projectionist_heuristics')

line 30:   let g:projectionist_heuristics = {}

line 31: endif

line 32: 

line 33: function! s:nscall(ns, fn, path, ...) abort

line 40: 

line 41: function! s:has(ns, root, requirements) abort

line 60: 

line 61: function! s:IsAbs(path) abort

line 64: 

line 65: function! s:Detect(...) abort

line 132: 

line 133: if !exists('g:did_load_ftplugin')

line 134:   filetype plugin on

line 135: endif

line 136: 

line 137: augroup projectionist

line 138:   autocmd!

line 139:   autocmd FileType * if &filetype !=# 'netrw' |   call s:Detect() | elseif !exists('b:projectionist') |   call s:Detect(get(b:, 'netrw_curdir', @%)) | endif

line 145:   autocmd BufFilePost * if type(getbufvar(+expand('<abuf>'), 'projectionist')) == type({}) |   call s:Detect(expand('<afile>')) | endif

line 149:   autocmd BufNewFile,BufReadPost * if empty(&filetype) |   call s:Detect() | endif

line 153:   autocmd CmdWinEnter * if !empty(getbufvar('#', 'projectionist_file')) |   let b:projectionist_file = getbufvar('#', 'projectionist_file') |   let b:projectionist = getbufvar('#', 'projectionist') |   call projectionist#activate() | endif

line 159:   autocmd User NERDTreeInit,NERDTreeNewRoot if exists('b:NERDTree.root.path.str') |   call s:Detect(b:NERDTree.root.path.str()) | endif

line 163:   autocmd VimEnter * if get(g:, 'projectionist_vim_enter', 1) && argc() == 0 && empty(v:this_session) |   call s:Detect(getcwd()) | endif

line 167:   autocmd BufWritePost .projections.json call s:Detect(expand('<afile>'))

line 168:   autocmd BufNewFile * if !empty(get(b:, 'projectionist')) |   call projectionist#apply_template() | endif

line 172: augroup END

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/plugin/projectionist.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin/rails.vim"
line 1: " rails.vim - Detect a rails application

line 2: " Author:       Tim Pope <http://tpo.pe/>

line 3: " GetLatestVimScripts: 1567 1 :AutoInstall: rails.vim

line 4: 

line 5: " Install this file as plugin/rails.vim.

line 6: 

line 7: if exists('g:loaded_rails') || &cp || v:version < 800

line 8:   finish

line 9: endif

line 10: let g:loaded_rails = 1

line 11: 

line 12: " Turn on $LOAD_PATH detection in the ruby ftplugin

line 13: if !exists('g:ruby_exec')

line 14:   let g:ruby_exec = 1

line 15: endif

line 16: 

line 17: " Utility Functions {{{1

line 18: 

line 19: function! s:error(str)

line 25: 

line 26: let s:slash = exists('+shellslash') ? '\' : '/'

line 27: function! s:IsAbs(path) abort

line 30: 

line 31: " }}}1

line 32: " Detection {{{1

line 33: 

line 34: function! RailsDetect(...) abort

line 75: 

line 76: function! s:LogDetect() abort

line 83: 

line 84: " }}}1

line 85: " Initialization {{{1

line 86: 

line 87: if !exists('g:did_load_ftplugin')

line 88:   filetype plugin on

line 89: endif

line 90: if !exists('g:loaded_projectionist')

line 91:   runtime! plugin/projectionist.vim

line 92: endif

line 93: 

line 94: augroup railsPluginDetect

line 95:   autocmd!

line 96: 

line 97:   autocmd BufNewFile,BufReadPost * if RailsDetect() && empty(&filetype) |   call rails#buffer_setup() | endif

line 101:   autocmd VimEnter * if get(g:, 'rails_vim_enter', get(g:, 'projectionist_vim_enter', 1)) &&     argc() == 0 && RailsDetect(getcwd()) |   call rails#buffer_setup() | endif

line 106:   autocmd FileType netrw if RailsDetect(get(b:, 'netrw_curdir', @%)) | endif

line 109:   autocmd FileType * if RailsDetect() | call rails#buffer_setup() | endif

line 110: 

line 111:   autocmd BufNewFile,BufReadPost */config/*.yml{,.example,.sample},*/{test,spec}/fixtures/*.yml if &filetype !=# 'eruby.yaml' && RailsDetect() |   set filetype=eruby.yaml | endif

line 115:   autocmd BufNewFile,BufReadPost *.rjs,*.rxml,*.builder,*.jbuilder,*.ruby if &filetype !=# 'ruby' | set filetype=ruby | endif

line 117:   autocmd BufNewFile,BufReadPost *.turbo_stream.erb if &filetype !=# 'eruby.html' | set filetype=eruby.html | endif

line 119:   autocmd BufReadPost *.log if RailsDetect() | set filetype=railslog | endif

line 120: 

line 121:   autocmd FileType qf call s:LogDetect()

line 122: 

line 123:   autocmd User ProjectionistDetect if RailsDetect(get(g:, 'projectionist_file', '')) |   call projectionist#append(b:rails_root,     {'*': {"console": rails#app().static_rails_command('console')}}) | endif

line 128: augroup END

line 129: 

line 130: command! -bang -bar -nargs=* -range=-1 -complete=customlist,rails#complete_rails Rails execute rails#command(<bang>0, '<mods>', <count>, <q-args>)

line 131: 

line 132: " }}}1

line 133: " dadbod.vim support {{{1

line 134: 

line 135: call extend(g:, {'db_adapters': {}}, 'keep')

line 136: call extend(g:db_adapters, { 'oracle-enhanced': 'oracle', 'mysql2': 'mysql', 'sqlite3': 'sqlite'}, 'keep')

line 140: 

line 141: let g:db_adapter_rails = 'rails#db_'

line 142: 

line 143: " }}}1

line 144: " abolish.vim support {{{1

line 145: 

line 146: augroup railsPluginAbolish

line 147:   autocmd!

line 148:   autocmd VimEnter * call s:abolish_setup()

line 149: augroup END

line 150: 

line 151: function! s:abolish_setup()

line 161: 

line 162: function! s:abolish_l(word)

line 166: 

line 167: function! s:abolish_t(word)

line 174: 

line 175: " }}}1

line 176: " vim:set sw=2 sts=2:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rails/plugin/rails.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim"
line 1: " rake.vim - It's like rails.vim without the rails

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      2.0

line 4: " GetLatestVimScripts: 3669 1 :AutoInstall: rake.vim

line 5: 

line 6: if exists('g:loaded_rake') || &cp || v:version < 800

line 7:   finish

line 8: endif

line 9: let g:loaded_rake = 1

line 10: 

line 11: " Turn on $LOAD_PATH detection in the ruby ftplugin

line 12: if !exists('g:ruby_exec')

line 13:   let g:ruby_exec = 1

line 14: endif

line 15: 

line 16: if !exists('g:dispatch_compilers')

line 17:   let g:dispatch_compilers = {}

line 18: endif

line 19: let g:dispatch_compilers['bundle exec'] = ''

line 20: let g:dispatch_compilers['ruby bin/rake'] = 'rake'

line 21: let g:dispatch_compilers['ruby -Itest'] = 'rubyunit'

line 22: 

line 23: " Utility {{{1

line 24: 

line 25: function! s:function(name) abort

line 28: 

line 29: function! s:shellslash(path) abort

line 36: 

line 37: function! s:throw(string) abort

line 41: 

line 42: function! s:add_methods(namespace, method_names) abort

line 47: 

line 48: let s:abstract_prototype = {}

line 49: 

line 50: " }}}1

line 51: " Initialization {{{1

line 52: 

line 53: function! s:find_root(path) abort

line 74: 

line 75: function! s:Detect(path) abort

line 83: 

line 84: " }}}1

line 85: " Projectionist {{{

line 86: 

line 87: let s:projections = { '*': {}, 'lib/*.rb': {'type': 'lib', 'alternate': [   'test/{}_test.rb', 'test/lib/{}_test.rb', 'test/unit/{}_test.rb',   'test/{dirname}/test_{basename}.rb',   'spec/{}_spec.rb', 'spec/lib/{}_spec.rb', 'spec/unit/{}_spec.rb']}, 'test/test_helper.rb': {'type': 'test'}, 'test/*_test.rb': {   'type': 'test',   'alternate': 'lib/{}.rb'}, 'test/lib/*_test.rb': {'alternate': 'lib/{}.rb'}, 'test/unit/*_test.rb': {'alternate': 'lib/{}.rb'}, 'test/**/test_*.rb': {   'type': 'test',   'alternate': 'lib/{}.rb'}, 'spec/spec_helper.rb': {'type': 'spec'}, 'spec/*_spec.rb': {   'type': 'spec',   'alternate': 'lib/{}.rb'}, 'spec/lib/*_spec.rb': {'alternate': 'lib/{}.rb'}, 'spec/unit/*_spec.rb': {'alternate': 'lib/{}.rb'}, 'rakelib/*.rake': {'type': 'task'}, 'Rakefile': {'type': 'task'}}

line 110: 

line 111: function! s:binstub(root, cmd) abort

line 120: 

line 121: function! s:ProjectionistDetect() abort

line 160: 

line 161: augroup rake_projectionist

line 162:   autocmd!

line 163:   autocmd User ProjectionistDetect call s:ProjectionistDetect()

line 164:   autocmd User ProjectionistActivate if exists('b:rake_root') | doautocmd User Rake | endif

line 166: augroup END

line 167: 

line 168: " }}}1

line 169: " Project {{{1

line 170: 

line 171: let s:project_prototype = {}

line 172: let s:projects = {}

line 173: 

line 174: function! rake#project(...) abort

line 187: 

line 188: function! s:project(...) abort

line 195: 

line 196: function! s:project_path(...) dict abort

line 199: 

line 200: function! s:project_real(...) dict abort

line 203: 

line 204: function! s:project_ruby_include_path() dict abort

line 221: 

line 222: call s:add_methods('project',['path','real','ruby_include_path'])

calling <SNR>130_add_methods('project', ['path', 'real', 'ruby_include_path'])

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

calling <SNR>130_function('s:project_path')

line 1:   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

<SNR>130_function returning function('<SNR>130_project_path')

continuing in <SNR>130_add_methods

line 3:   endfor

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

calling <SNR>130_function('s:project_real')

line 1:   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

<SNR>130_function returning function('<SNR>130_project_real')

continuing in <SNR>130_add_methods

line 3:   endfor

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

calling <SNR>130_function('s:project_ruby_include_path')

line 1:   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

<SNR>130_function returning function('<SNR>130_project_ruby_include_path')

continuing in <SNR>130_add_methods

line 3:   endfor

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

line 3:   endfor

<SNR>130_add_methods returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim

line 223: 

line 224: " }}}1

line 225: " Rake {{{1

line 226: 

line 227: function! s:project_makeprg() dict abort

line 240: 

line 241: call s:add_methods('project', ['makeprg'])

calling <SNR>130_add_methods('project', ['makeprg'])

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

calling <SNR>130_function('s:project_makeprg')

line 1:   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

<SNR>130_function returning function('<SNR>130_project_makeprg')

continuing in <SNR>130_add_methods

line 3:   endfor

line 1:   for name in a:method_names

line 2:     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)

line 3:   endfor

<SNR>130_add_methods returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim

line 242: 

line 243: function! s:Rake(bang, arg) abort

line 277: 

line 278: function! s:RakeComplete(A, L, P, ...) abort

line 282: 

line 283: function! CompilerComplete_rake(A, L, P) abort

line 295: 

line 296: function! s:Tasks(...) abort

line 313: 

line 314: function! s:define_rake() abort

line 318: 

line 319: augroup rake_command

line 320:   autocmd!

line 321:   autocmd User Rake if len(s:project().makeprg()) | call s:define_rake() | endif

line 322: augroup END

line 323: 

line 324: " }}}1

line 325: " Path {{{1

line 326: 

line 327: if !exists('g:did_load_ftplugin')

line 328:   filetype plugin on

line 329: endif

line 330: 

line 331: function! s:path_addition(file) abort

line 334: 

line 335: augroup rake_path

line 336:   autocmd!

line 337:   autocmd User Rake if &suffixesadd =~# '\.rb\>' && stridx(&path, s:path_addition('lib')) < 0 |   let &l:path = s:path_addition('lib')     . ',' . s:path_addition('ext') . ',' . &path | endif

line 342:   autocmd User Rake if len(s:project().ruby_include_path()) && &filetype =~# '^c\%(pp\)\=$' |   let &l:path = &path . ',' . escape(s:project().ruby_include_path(),', ') |   let &l:tags = &tags . ',' . escape(s:project().ruby_include_path().'/tags',', ') | endif

line 347: augroup END

line 348: 

line 349: " }}}1

line 350: 

line 351: " vim:set sw=2 sts=2:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rake/plugin/rake.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin/rhubarb.vim"
line 1: " rhubarb.vim - fugitive.vim extension for GitHub

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: 

line 4: if exists("g:loaded_rhubarb") || v:version < 700 || &cp

line 5:   finish

line 6: endif

line 7: let g:loaded_rhubarb = 1

line 8: 

line 9: if !exists('g:dispatch_compilers')

line 10:   let g:dispatch_compilers = {}

line 11: endif

line 12: let g:dispatch_compilers['hub'] = 'git'

line 13: 

line 14: function! s:SetUpMessage(filename) abort

line 31: 

line 32: augroup rhubarb

line 33:   autocmd!

line 34:   if exists('+omnifunc')

line 35:     autocmd FileType gitcommit call s:SetUpMessage(expand('<afile>:p'))

line 36:   endif

line 37:   autocmd BufEnter * if expand('%') ==# '' && &previewwindow && pumvisible() && getbufvar('#', '&omnifunc') ==# 'rhubarb#omnifunc' |    setlocal nolist linebreak filetype=markdown | endif

line 41:   autocmd BufNewFile,BufRead *.git/{PULLREQ_EDIT,ISSUE_EDIT,RELEASE_EDIT}MSG if &ft ==# '' || &ft ==# 'conf' |   set ft=gitcommit | endif

line 45: augroup END

line 46: 

line 47: if !exists('g:fugitive_browse_handlers')

line 48:   let g:fugitive_browse_handlers = []

line 49: endif

line 50: 

line 51: if index(g:fugitive_browse_handlers, function('rhubarb#FugitiveUrl')) < 0

line 52:   call insert(g:fugitive_browse_handlers, function('rhubarb#FugitiveUrl'))

line 53: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/plugin/rhubarb.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim"
line 1: " Vim plugin to change the working directory to the project root.

line 2: "

line 3: " Copyright 2010-2020 Andrew Stewart, <boss@airbladesoftware.com>

line 4: " Released under the MIT licence.

line 5: 

line 6: if exists('g:loaded_rooter') || &cp

line 7:   finish

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-rooter/plugin/rooter.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim"
line 1: " sensible.vim - Defaults everyone can agree on

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      2.0

line 4: 

line 5: if exists('g:loaded_sensible') || &compatible

line 6:   finish

line 7: else

line 8:   let g:loaded_sensible = 'yes'

line 9: endif

line 10: 

line 11: " Use :help 'option' to see the documentation for the given option.

line 12: 

line 13: " Disable vi compatibility, if for some reason it's on.

line 14: if &compatible

line 15:   set nocompatible

line 16: endif

line 17: 

line 18: " Check if an option was set from a file in $HOME.  This lets us avoid

line 19: " overriding options in the user's vimrc, but still override options in the

line 20: " system vimrc.

line 21: function! s:MaySet(option) abort

line 31: 

line 32: if s:MaySet('backspace')

calling <SNR>132_MaySet('backspace')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 33:   set backspace=indent,eol,start

line 34: endif

line 35: " Disable completing keywords in included files (e.g., #include in C).  When

line 36: " configured properly, this can result in the slow, recursive scanning of

line 37: " hundreds of files of dubious relevance.

line 38: set complete-=i

line 39: if s:MaySet('smarttab')

calling <SNR>132_MaySet('smarttab')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 40:   set smarttab

line 41: endif

line 42: 

line 43: set nrformats-=octal

line 44: 

line 45: " Make the escape key more responsive by decreasing the wait time for an

line 46: " escape sequence (e.g., arrow keys).

line 47: if !has('nvim') && &ttimeoutlen == -1

line 48:   set ttimeout

line 49:   set ttimeoutlen=100

line 50: endif

line 51: 

line 52: if has('reltime') && s:MaySet('incsearch')

calling <SNR>132_MaySet('incsearch')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 53:   set incsearch

line 54: endif

line 55: " Use CTRL-L to clear the highlighting of 'hlsearch' (off by default) and call

line 56: " :diffupdate.

line 57: if maparg('<C-L>', 'n') ==# ''

line 58:   nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

line 59: endif

line 60: 

line 61: if s:MaySet('laststatus')

calling <SNR>132_MaySet('laststatus')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 62:   set laststatus=2

line 63: endif

line 64: if s:MaySet('ruler')

calling <SNR>132_MaySet('ruler')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 65:   set ruler

line 66: endif

line 67: if s:MaySet('wildmenu')

calling <SNR>132_MaySet('wildmenu')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 68:   set wildmenu

line 69: endif

line 70: 

line 71: if s:MaySet('scrolloff')

calling <SNR>132_MaySet('scrolloff')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 72:   set scrolloff=1

line 73: endif

line 74: if s:MaySet('sidescroll') && s:MaySet('sidescrolloff')

calling <SNR>132_MaySet('sidescroll')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

calling <SNR>132_MaySet('sidescrolloff')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 75:   set sidescroll=1

line 76:   set sidescrolloff=2

line 77: endif

line 78: set display+=lastline

line 79: if has('patch-7.4.2109')

line 80:   set display+=truncate

line 81: endif

line 82: 

line 83: if s:MaySet('listchars')

calling <SNR>132_MaySet('listchars')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 84:   set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

line 85: endif

line 86: 

line 87: " Delete comment character when joining commented lines.

line 88: if v:version > 703 || v:version == 703 && has("patch541")

line 89:   set formatoptions+=j

line 90: endif

line 91: 

line 92: " Replace the check for a tags file in the parent directory of the current

line 93: " file with a check in every ancestor directory.

line 94: if has('path_extra') && (',' . &g:tags . ',') =~# ',\./tags,'

line 95:   setglobal tags-=./tags tags-=./tags; tags^=./tags;

line 96: endif

line 97: 

line 98: if s:MaySet('autoread')

calling <SNR>132_MaySet('autoread')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 99:   set autoread

line 100: endif

line 101: 

line 102: if s:MaySet('history')

calling <SNR>132_MaySet('history')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 103:   set history=1000

line 104: endif

line 105: if s:MaySet('tabpagemax')

calling <SNR>132_MaySet('tabpagemax')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 106:   set tabpagemax=50

line 107: endif

line 108: 

line 109: " Persist g:UPPERCASE variables, used by some plugins, in .viminfo.

line 110: if !empty(&viminfo)

line 111:   set viminfo^=!

line 112: endif

line 113: " Saving options in session and view files causes more problems than it

line 114: " solves, so disable it.

line 115: set sessionoptions-=options

line 116: set viewoptions-=options

line 117: 

line 118: " Allow color schemes to do bright colors without forcing bold.

line 119: if &t_Co == 8 && $TERM !~# '^Eterm'

line 120:   set t_Co=16

line 121: endif

line 122: 

line 123: " If the running Vim lacks support for the Fish shell, use Bash instead.

line 124: if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))

line 125:   set shell=/usr/bin/env\ bash

line 126: endif

line 127: 

line 128: " Disable a legacy behavior that can break plugin maps.

line 129: if has('langmap') && exists('+langremap') && &langremap && s:MaySet('langremap')

calling <SNR>132_MaySet('langremap')

line 1:   if exists('*execute')

line 2:     let out = execute('verbose setglobal all ' . a:option . '?')

line 3:   else

line 4:     redir => out

line 5:     silent verbose execute 'setglobal all' a:option . '?'

line 6:     redir END

line 7:   endif

line 8:   return out !~# " \\(\\~[\\/]\\|Lua\\)[^\n]*$"

<SNR>132_MaySet returning #1

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim

line 130:   set nolangremap

line 131: endif

line 132: 

line 133: if !(exists('g:did_load_filetypes') && exists('g:did_load_ftplugin') && exists('g:did_indent_on'))

line 134:   filetype plugin indent on

line 135: endif

line 136: if has('syntax') && !exists('g:syntax_on')

line 137:   syntax enable

line 137: so $VIMRUNTIME/syntax/syntax.vim

chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 137: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " This file is used for ":syntax on".

line 7: " It installs the autocommands and starts highlighting for all buffers.

line 8: 

line 9: if !has("syntax")

line 10:   finish

line 11: endif

line 12: 

line 13: " If Syntax highlighting appears to be on already, turn it off first, so that

line 14: " any leftovers are cleared.

line 15: if exists("syntax_on") || exists("syntax_manual")

line 16:   so <sfile>:p:h/nosyntax.vim

line 17: endif

line 18: 

line 19: " Load the Syntax autocommands and set the default methods for highlighting.

line 20: runtime syntax/synload.vim

Searching for "syntax/synload.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/syntax/synload.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/syntax/synload.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/syntax/synload.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 20: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " This file sets up for syntax highlighting.

line 7: " It is loaded from "syntax.vim" and "manual.vim".

line 8: " 1. Set the default highlight groups.

line 9: " 2. Install Syntax autocommands for all the available syntax files.

line 10: 

line 11: if !has("syntax")

line 12:   finish

line 13: endif

line 14: 

line 15: " let others know that syntax has been switched on

line 16: let syntax_on = 1

line 17: 

line 18: " Set the default highlighting colors.  Use a color scheme if specified.

line 19: if exists("colors_name")

line 20:   exe "colors " . colors_name

line 20: colors dayfox

Searching for "colors/lists/default.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pac
Searching for "/Users/piotr/.config/vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists)
fchdir() to previous dir
line 20: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim"
line 1: " Maintainer:  Drew Vogel <dvogel@sidejump.org>

line 2: " Last Change: 2024 Mar 20

line 3: "

line 4: " Replaced rgb.txt as the source of de facto standard color names. This is

line 5: " sourced each time the colorscheme command is run. It is also sourced each

line 6: " time the highlight command fails to recognize a gui color. You can override

line 7: " these colors by introducing a new colors/lists/default.vim file earlier in

line 8: " the runtimepath.

line 9: " Note: the color names should be in lower case, because Vim will lookup the

line 10: " a color by its lower case name.

line 11: 

line 12: " make sure line continuation works

line 13: let s:keepcpo = &cpo

line 14: set cpo&vim

line 15: 

line 16: function! s:Cleanup()

line 20: 

line 21: function! s:AddColors(cnames) abort

line 40: 

line 41: if exists('s:default_cnames')

line 42:   call s:AddColors(s:default_cnames)

calling <SNR>93_AddColors({'medium blue': '#0000cd', 'indianred'...mon3': '#cd7054', 'salmon4': '#8b4c39'})

line 1:   call extend(v:colornames, a:cnames, 'keep')

line 2: 

line 3:   " all keys should be in lower case, convert keys that are not yet

line 4:   let len_after = len(v:colornames)

line 5:   if len_after == len(a:cnames)

line 6:     " after extend(): v:colornames has all the keys of default_cnames

line 7:     " checked: v:colornames also has no extra keys

line 8:     " => keys are the same, and keys(default_cnames) are known to be ok

line 9:     return

<SNR>93_AddColors returning #0

continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim

line 43:   call s:Cleanup()

calling <SNR>93_Cleanup()

line 1:   let &cpo = s:keepcpo

line 2:   unlet s:keepcpo

<SNR>93_Cleanup returning #0

continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim

line 44:   finish

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/colors/lists/default.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/colors/lists/default.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/colors/lists/default.vim"
Searching for "/Users/piotr/.config/vim/after/colors/lists/default.vim"
Searching for "colors/dayfox.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/colors/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors)
fchdir() to previous dir
line 20: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim"
line 1: lua << EOF

line 9: if exists("colors_name")

line 9:   hi clear

Searching for "syntax/syncolor.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/syntax/syncolor.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/syntax/syncolor.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax)
fchdir() to previous dir
line 9: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim"
line 1: " Vim syntax support file

line 2: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 3: " Last Change:^I2023 Aug 10

line 4: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 5: 

line 6: " This file sets up the default methods for highlighting.

line 7: " It is loaded from "synload.vim" and from Vim for ":syntax reset".

line 8: " Also used from init_highlight().

line 9: 

line 10: if !exists("syntax_cmd") || syntax_cmd == "on"

line 11:   " ":syntax on" works like in Vim 5.7: set colors but keep links

line 12:   command -nargs=* SynColor hi <args>

line 13:   command -nargs=* SynLink hi link <args>

line 14: else

line 15:   if syntax_cmd == "enable"

line 16:     " ":syntax enable" keeps any existing colors

line 17:     command -nargs=* SynColor hi def <args>

line 18:     command -nargs=* SynLink hi def link <args>

line 19:   elseif syntax_cmd == "reset"

line 20:     " ":syntax reset" resets all colors to the default

line 21:     command -nargs=* SynColor hi <args>

line 22:     command -nargs=* SynLink hi! link <args>

line 23:   else

line 24:     " User defined syncolor file has already set the colors.

line 25:     finish

line 26:   endif

line 27: endif

line 28: 

line 29: " Many terminals can only use six different colors (plus black and white).

line 30: " Therefore the number of colors used is kept low. It doesn't look nice with

line 31: " too many colors anyway.

line 32: " Careful with "cterm=bold", it changes the color to bright for some terminals.

line 33: " There are two sets of defaults: for a dark and a light background.

line 34: if &background == "dark"

line 35:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE

line 36:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE

line 37:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE

line 38:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE

line 39:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE

line 40:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE

line 41:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE

line 42:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff

line 43:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE

line 44:   SynColor Added^Iterm=NONE cterm=NONE ctermfg=Green ctermbg=NONE gui=NONE guifg=LimeGreen guibg=NONE

line 45:   SynColor Changed^Iterm=NONE cterm=NONE ctermfg=Blue ctermbg=NONE gui=NONE guifg=DodgerBlue guibg=NONE

line 46:   SynColor Removed^Iterm=NONE cterm=NONE ctermfg=Red ctermbg=NONE gui=NONE guifg=Red guibg=NONE

line 47: else

line 48:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE

line 48: hi def Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE

line 49:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE

line 49: hi def Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE

line 50:   " #6a5acd is SlateBlue

line 51:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE

line 51: hi def Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE

line 52:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE

line 52: hi def Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE

line 53:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE

line 53: hi def Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE

line 54:   " #6a0dad is Purple

line 55:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE

line 55: hi def PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE

line 56:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE

line 56: hi def Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE

line 57:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue

line 57: hi def Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue

line 58:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE

line 58: hi def Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE

line 59:   SynColor Added^Iterm=NONE cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=NONE guifg=SeaGreen guibg=NONE

line 59: hi def Added^Iterm=NONE cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=NONE guifg=SeaGreen guibg=NONE

line 60:   SynColor Changed^Iterm=NONE cterm=NONE ctermfg=Blue ctermbg=NONE gui=NONE guifg=DodgerBlue guibg=NONE

line 60: hi def Changed^Iterm=NONE cterm=NONE ctermfg=Blue ctermbg=NONE gui=NONE guifg=DodgerBlue guibg=NONE

line 61:   SynColor Removed^Iterm=NONE cterm=NONE ctermfg=Red ctermbg=NONE gui=NONE guifg=Red guibg=NONE

line 61: hi def Removed^Iterm=NONE cterm=NONE ctermfg=Red ctermbg=NONE gui=NONE guifg=Red guibg=NONE

line 62: endif

line 63: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red

line 63: hi def Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red

line 64: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow

line 64: hi def Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow

line 65: 

line 66: " Common groups that link to default highlighting.

line 67: " You can specify other highlighting easily.

line 68: SynLink String^I^IConstant

line 68: hi def link String^I^IConstant

line 69: SynLink Character^IConstant

line 69: hi def link Character^IConstant

line 70: SynLink Number^I^IConstant

line 70: hi def link Number^I^IConstant

line 71: SynLink Boolean^I^IConstant

line 71: hi def link Boolean^I^IConstant

line 72: SynLink Float^I^INumber

line 72: hi def link Float^I^INumber

line 73: SynLink Function^IIdentifier

line 73: hi def link Function^IIdentifier

line 74: SynLink Conditional^IStatement

line 74: hi def link Conditional^IStatement

line 75: SynLink Repeat^I^IStatement

line 75: hi def link Repeat^I^IStatement

line 76: SynLink Label^I^IStatement

line 76: hi def link Label^I^IStatement

line 77: SynLink Operator^IStatement

line 77: hi def link Operator^IStatement

line 78: SynLink Keyword^I^IStatement

line 78: hi def link Keyword^I^IStatement

line 79: SynLink Exception^IStatement

line 79: hi def link Exception^IStatement

line 80: SynLink Include^I^IPreProc

line 80: hi def link Include^I^IPreProc

line 81: SynLink Define^I^IPreProc

line 81: hi def link Define^I^IPreProc

line 82: SynLink Macro^I^IPreProc

line 82: hi def link Macro^I^IPreProc

line 83: SynLink PreCondit^IPreProc

line 83: hi def link PreCondit^IPreProc

line 84: SynLink StorageClass^IType

line 84: hi def link StorageClass^IType

line 85: SynLink Structure^IType

line 85: hi def link Structure^IType

line 86: SynLink Typedef^I^IType

line 86: hi def link Typedef^I^IType

line 87: SynLink Tag^I^ISpecial

line 87: hi def link Tag^I^ISpecial

line 88: SynLink SpecialChar^ISpecial

line 88: hi def link SpecialChar^ISpecial

line 89: SynLink Delimiter^ISpecial

line 89: hi def link Delimiter^ISpecial

line 90: SynLink SpecialComment^ISpecial

line 90: hi def link SpecialComment^ISpecial

line 91: SynLink Debug^I^ISpecial

line 91: hi def link Debug^I^ISpecial

line 92: 

line 93: delcommand SynColor

line 94: delcommand SynLink

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim
continuing in /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/syntax/syncolor.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/syntax/syncolor.vim"
Searching for "/Users/piotr/.config/vim/after/syntax/syncolor.vim"
line 9: endif

line 9: set termguicolors

line 9: let g:colors_name = "dayfox"

line 9: set background=light

line 9: let g:terminal_color_2 = '#396847'

line 9: let g:terminal_color_12 = '#4863b6'

line 9: let g:terminal_color_15 = '#f4ece6'

line 9: let g:terminal_color_14 = '#488d93'

line 9: let g:terminal_color_7 = '#f2e9e1'

line 9: let g:terminal_color_9 = '#b3434e'

line 9: let g:terminal_color_6 = '#287980'

line 9: let g:terminal_color_8 = '#534c45'

line 9: let g:terminal_color_10 = '#577f63'

line 9: let g:terminal_color_13 = '#8452d5'

line 9: let g:terminal_color_5 = '#6e33ce'

line 9: let g:terminal_color_3 = '#ac5402'

line 9: let g:terminal_color_4 = '#2848a9'

line 9: let g:terminal_color_0 = '#352c24'

line 9: let g:terminal_color_1 = '#a5222f'

line 9: let g:terminal_color_11 = '#b86e28'

line 9: highlight! link CmpItemKindConstant Constant

line 9: highlight! link Label Conditional

line 9: highlight GlyphPalette6 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette15 guifg=#f4ece6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitDeleted guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolCount Special

line 9: highlight diffIndexLine guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNumber Number

line 9: highlight! link WhichKeyDesc Keyword

line 9: highlight! link LazyProp LineNr

line 9: highlight Todo guifg=#f6f2ee guibg=#2848a9 gui=NONE guisp=NONE

line 9: highlight WinBar guifg=#824d5b guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight PounceMatch guifg=#3d2b5a guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight DiffText guifg=NONE guibg=#a4aed2 gui=NONE guisp=NONE

line 9: highlight NeoTreeRootName guifg=#955f61 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link NavicIconsVariable Identifier

line 9: highlight! link CmpItemKindEnum Constant

line 9: highlight MiniHipatternsFixme guifg=#e4dcd4 guibg=#a5222f gui=bold guisp=NONE

line 9: highlight MatchParen guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight IndentBlanklineIndent1 guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump2dSpotAhead guifg=#223d90 guibg=#e4dcd4 gui=nocombine guisp=NONE

line 9: highlight SneakScope guifg=NONE guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNamespace Identifier

line 9: highlight! link MiniPickMatchRanges DiagnosticFloatingHint

line 9: highlight LspTroubleNormal guifg=#824d5b guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NormalFloat guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsEnumMember Identifier

line 9: highlight GlyphPalette14 guifg=#488d93 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindOperator Operator

line 9: highlight LspSagaFinderSelection guifg=#e7d2be guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindEnumMember Identifier

line 9: highlight! link DapUIFrameName Normal

line 9: highlight NvimTreeGitNew guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyDEBUGBorder guifg=#98ad9b guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspFloatWinBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferInactive guifg=#837a72 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsEnum Constant

line 9: highlight NeoTreeDirectoryIcon guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowCyan guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight ErrorMsg guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeNormal guifg=#e4dcd4 guibg=#287980 gui=bold guisp=NONE

line 9: highlight IndentBlanklineChar guifg=#d3c7bb guibg=NONE gui=NONE guisp=NONE

line 9: highlight GitSignsDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight Search guifg=#3d2b5a guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight DapUIWatchesValue guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineModifiedCurrent guifg=#aab0ad guibg=#643f61 gui=bold guisp=NONE

line 9: highlight MiniTestFail guifg=#a5222f guibg=NONE gui=bold guisp=NONE

line 9: highlight Type guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaHeader guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeIndentMarker guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferCurrentSign guifg=#2848a9 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight NotifyWARNBorder guifg=#d1a378 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Visual guifg=NONE guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight! link WhichKeySeparator Comment

line 9: highlight! link CmpItemKindVariable Identifier

line 9: highlight! link SpecialChar Special

line 9: highlight! link CmpItemKindMethod Function

line 9: highlight DiagnosticVirtualTextInfo guifg=#2848a9 guibg=#b8bfd9 gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignWarn DiagnosticWarn

line 9: highlight! link MiniFilesNormal NormalFloat

line 9: highlight TSRainbowRed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link WhichKeyGroup Function

line 9: highlight ColorColumn guifg=NONE guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight BufferVisibleSign guifg=#2848a9 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight TabLineSel guifg=#f6f2ee guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordText LspReferenceText

line 9: highlight! link NavicIconsConstant Constant

line 9: highlight! link MiniPickPreviewLine CursorLine

line 9: highlight Conceal guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Exception Keyword

line 9: highlight! link Repeat Conditional

line 9: highlight MiniIconsOrange guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Float Number

line 9: highlight! link MiniStatuslineInactive StatusLineNC

line 9: highlight MiniDepsTitleUpdate guifg=#e4dcd4 guibg=#396847 gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolView Delimiter

line 9: highlight! link MiniStarterHeader Title

line 9: highlight NvimTreeRootFolder guifg=#955f61 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link PreCondit PreProc

line 9: highlight NeotestRunning guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniDiffSignAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Special guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestFailed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickIconFile MiniPickNormal

line 9: highlight! link NavicIconsEvent Constant

line 9: highlight BufferCurrent guifg=#3d2b5a guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link MiniPickPrompt DiagnosticFloatingInfo

line 9: highlight MiniHipatternsTodo guifg=#e4dcd4 guibg=#396847 gui=bold guisp=NONE

line 9: highlight! link QuickFixLine CursorLine

line 9: highlight! link MiniDepsMsgBreaking DiagnosticWarn

line 9: highlight MiniIconsPurple guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignInfo DiagnosticInfo

line 9: highlight! link Structure Type

line 9: highlight! link VertSplit WinSeparator

line 9: highlight! link AerialLine Search

line 9: highlight DapUIBreakpointsInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestPassed guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight WinBarNC guifg=#824d5b guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight NeotestSkipped guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineOk guifg=NONE guibg=NONE gui=undercurl guisp=#396847

line 9: highlight DiagnosticInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindConstructor Function

line 9: highlight! link CmpItemKindModule Identifier

line 9: highlight! link WildMenu Pmenu

line 9: highlight! link qfLineNr lineNr

line 9: highlight GlyphPalette4 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyDEBUGIcon NotifyDEBUGTitle

line 9: highlight LspSagaRenameBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueNextKey DiagnosticFloatingHint

line 9: highlight! link CmpItemMenu Comment

line 9: highlight! link qfFileName Directory

line 9: highlight GitSignsChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniNotifyBorder FloatBorder

line 9: highlight Cursor guifg=#f6f2ee guibg=#3d2b5a gui=NONE guisp=NONE

line 9: highlight WarningMsg guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Question MoreMsg

line 9: highlight IndentBlanklineIndent3 guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DashboardFooter guifg=#7f5152 guibg=NONE gui=italic guisp=NONE

line 9: highlight! link NotifyBackground NormalFloat

line 9: highlight StatusLine guifg=#643f61 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsNull Type

line 9: highlight CmpDocumentationBorder guifg=#e7d2be guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight FoldColumn guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DiagnosticSignError DiagnosticError

line 9: highlight! link MiniPickPreviewRegion IncSearch

line 9: highlight! link NavicIconsProperty Identifier

line 9: highlight! link CmpItemKindInterface Constant

line 9: highlight! link DashboardHeader Title

line 9: highlight! link SpecialKey NonText

line 9: highlight SignifySignDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferTabpage guifg=#d3c7bb guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight MiniDepsTitleError guifg=#e4dcd4 guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight AlphaHeaderLabel guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Include PreProc

line 9: highlight MiniStarterItemBullet guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesCursorLine CursorLine

line 9: highlight DiagnosticVirtualTextHint guifg=#396847 guibg=#bdc9bc gui=NONE guisp=NONE

line 9: highlight NvimTreeGitMerge guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniMapSymbolLine Title

line 9: highlight BufferCurrentTarget guifg=#a5222f guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight! link Debug Special

line 9: highlight CursorLine guifg=NONE guibg=#d3c7bb gui=NONE guisp=NONE

line 9: highlight NeogitNotificationWarning guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent2 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette0 guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesTitle FloatTitle

line 9: highlight NvimTreeOpenedFolderName guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyWARNTitle guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LspSagaCodeActionContent String

line 9: highlight Directory guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindField Identifier

line 9: highlight Normal guifg=#3d2b5a guibg=#f6f2ee gui=NONE guisp=NONE

line 9: highlight! link MiniClueNextKeyWithPostkeys DiagnosticFloatingError

line 9: highlight rainbowcol2 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickHeader DiagnosticFloatingHint

line 9: highlight NeotestFocused guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight! link NeoTreeDimText Conceal

line 9: highlight DapUIVariable guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IncSearch guifg=#f6f2ee guibg=#396847 gui=NONE guisp=NONE

line 9: highlight! link MiniFilesBorderModified DiagnosticFloatingWarn

line 9: highlight rainbowcol4 guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffAdded guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindTypeParameter Identifier

line 9: highlight MiniStatuslineDevinfo guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NotifyDEBUGTitle guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterQuery guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitRemote guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueBorder FloatBorder

line 9: highlight! link CmpItemKindUnit Constant

line 9: highlight NeoTreeSymbolicLinkTarget guifg=#b25dc0 guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrMatch guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrDeprecated guifg=#824d5b guibg=NONE gui=strikethrough guisp=NONE

line 9: highlight TSRainbowGreen guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickMatchMarked Visual

line 9: highlight diffLine guifg=#7f5152 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaShortcut guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Typedef Type

line 9: highlight! link DashboardShortCut Identifier

line 9: highlight DapUIScope guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaSignatureHelpBorder guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeImageFile guifg=#534c45 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitNotificationInfo guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsTitleSame DiffText

line 9: highlight TSRainbowViolet guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight HopNextKey guifg=#287980 guibg=NONE gui=bold guisp=NONE

line 9: highlight CmpItemKindSnippet guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette10 guifg=#577f63 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffDeleteHighlight guifg=NONE guibg=#e6c8c8 gui=NONE guisp=NONE

line 9: highlight BufferVisibleIndex guifg=#2848a9 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindFunction Function

line 9: highlight! link StorageClass Type

line 9: highlight TabLine guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NeotestMarked guifg=#3d2b5a guibg=NONE gui=bold guisp=NONE

line 9: highlight! link FidgetTitle Title

line 9: highlight Bold guifg=NONE guibg=NONE gui=bold guisp=NONE

line 9: highlight NeoTreeDotfile guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeFileNameOpened guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitConflict guifg=#955f61 guibg=NONE gui=italic guisp=NONE

line 9: highlight ModesCopy guifg=NONE guibg=#ac5402 gui=NONE guisp=NONE

line 9: highlight Underlined guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight NeogitBranch guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyTRACEIcon NotifyTRACETitle

line 9: highlight! link MiniCursorwordCurrent LspReferenceText

line 9: highlight MiniTablineCurrent guifg=#643f61 guibg=#aab0ad gui=bold guisp=NONE

line 9: highlight SpellRare guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight TabLineFill guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight CmpItemAbbrMatchFuzzy guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIconsBlue guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffNewFile guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIModifiedValue guifg=#352c24 guibg=NONE gui=bold guisp=NONE

line 9: highlight DiffAdd guifg=NONE guibg=#d0d6cd gui=NONE guisp=NONE

line 9: highlight GlyphPalette11 guifg=#b86e28 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineModifiedVisible guifg=#dbd1dd guibg=#643f61 gui=NONE guisp=NONE

line 9: highlight HopUnmatched guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniFilesFile guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NonText guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LspSagaBorderTitle Title

line 9: highlight Operator guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickBorderBusy DiagnosticFloatingWarn

line 9: highlight NeoTreeGitUntracked guifg=#8452d5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NeotestIndent Conceal

line 9: highlight AerialGuide guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterFooter guifg=#7f5152 guibg=NONE gui=italic guisp=NONE

line 9: highlight LspFloatWinNormal guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineError guifg=NONE guibg=NONE gui=undercurl guisp=#a5222f

line 9: highlight rainbowcol1 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellLocal guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight! link LazyButtonActive TabLineSel

line 9: highlight! link CmpItemKindValue Keyword

line 9: highlight FloatBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIDecoration guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestFile guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SignifySignAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DapUIType Type

line 9: highlight DapUIValue guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticVirtualTextError guifg=#a5222f guibg=#deb4b5 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsBoolean Boolean

line 9: highlight MiniDiffSignChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsPlaceholder Comment

line 9: highlight MiniJump2dSpot guifg=#287980 guibg=NONE gui=bold guisp=NONE

line 9: highlight MiniStatuslineModeReplace guifg=#e4dcd4 guibg=#a5222f gui=bold guisp=NONE

line 9: highlight! link FidgetTask LineNr

line 9: highlight rainbowcol3 guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link LazyDimmed LineNr

line 9: highlight! link NavicIconsTypeParameter Identifier

line 9: highlight NotifyERRORBorder guifg=#ce8a8f guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpDocumentation guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link DapUIThread String

line 9: highlight MiniIconsCyan guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniStarterItem Normal

line 9: highlight BufferVisibleMod guifg=#ac5402 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight PounceGap guifg=#3d2b5a guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent5 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniClueDescGroup DiagnosticFloatingWarn

line 9: highlight NeoTreeFileName guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineIndent4 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Folded guifg=#824d5b guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link SymbolOutlineConnector Conceal

line 9: highlight! link SpecialComment Special

line 9: highlight ModesDelete guifg=NONE guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight! link FocusedSymbol Search

line 9: highlight! link MiniClueDescSingle NormalFloat

line 9: highlight DapUIBreakpointsPath guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaHoverBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniNotifyNormal NormalFloat

line 9: highlight MiniIconsRed guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsKey Identifier

line 9: highlight! link MiniTablineFill TabLineFill

line 9: highlight! link MiniPickIconDirectory Directory

line 9: highlight IndentBlanklineIndent6 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffContextHighlight guifg=NONE guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight Italic guifg=NONE guibg=NONE gui=italic guisp=NONE

line 9: highlight Comment guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight LeapMatch guifg=#f6f2ee guibg=#8b369a gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverContext DiffChange

line 9: highlight! link DiagnosticSignHint DiagnosticHint

line 9: highlight CocInlayHint guifg=#837a72 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordRead LspReferenceText

line 9: highlight! link MiniDiffOverDelete DiffDelete

line 9: highlight MiniTablineHidden guifg=#824d5b guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight NotifyTRACEBorder guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight LineNr guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyERRORTitle guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight GitGutterChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SignColumn guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeotestNamespace guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickMatchCurrent CursorLine

line 9: highlight Pmenu guifg=#3d2b5a guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight NvimTreeOpenedFile guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitAdded guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NavicSeparator guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemKindDefault guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffOldFile guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette3 guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverChange DiffText

line 9: highlight TSRainbowBlue guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterCurrent guifg=NONE guibg=NONE gui=nocombine guisp=NONE

line 9: highlight! link NavicIconsMethod Function

line 9: highlight! link MiniFilesDirectory Directory

line 9: highlight! link CurSearch IncSearch

line 9: highlight HopNextKey2 guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsInfo DiagnosticInfo

line 9: highlight! link MiniJump2dDim Comment

line 9: highlight! link MiniOperatorsExchangeFrom IncSearch

line 9: highlight DiagnosticError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsField Identifier

line 9: highlight DiagnosticOk guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeOther guifg=#e4dcd4 guibg=#2848a9 gui=bold guisp=NONE

line 9: highlight LightspeedGreyWash guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight rainbowcol6 guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineInfo guifg=NONE guibg=NONE gui=undercurl guisp=#2848a9

line 9: highlight! link MiniPickBorderText FloatTitle

line 9: highlight! link CursorIM Cursor

line 9: highlight! link WhichKey Identifier

line 9: highlight BufferInactiveIndex guifg=#837a72 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsModule Identifier

line 9: highlight! link LspSagaCodeActionTitle Title

line 9: highlight DiagnosticWarn guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeFolderName guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiffChange guifg=NONE guibg=#cdd0e0 gui=NONE guisp=NONE

line 9: highlight! link NeoTreeNormalNC NeoTreeNormal

line 9: highlight! link MiniMapNormal NormalFloat

line 9: highlight AlphaFooter guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniDepsChangeRemoved diffRemoved

line 9: highlight Whitespace guifg=#d3c7bb guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIStoppedThread guifg=#22676d guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniDiffSignDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyINFOIcon NotifyINFOTitle

line 9: highlight! link CmpItemKindEvent Constant

line 9: highlight GlyphPalette8 guifg=#534c45 guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferVisible guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link Character String

line 9: highlight! link WhichKeySeperator Comment

line 9: highlight! link WhichKeyFloat NormalFloat

line 9: highlight BufferTabpages guifg=NONE guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight MiniTestPass guifg=#396847 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link WhichKeyValue Comment

line 9: highlight! link DapUIBreakpointsLine DapUILineNumber

line 9: highlight! link NavicIconsInterface Constant

line 9: highlight ModesInsert guifg=NONE guibg=#287980 gui=NONE guisp=NONE

line 9: highlight diffFile guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniTablineVisible guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight! link MiniDepsHint DiagnosticHint

line 9: highlight! link MiniClueTitle FloatTitle

line 9: highlight MiniStatuslineModeVisual guifg=#e4dcd4 guibg=#6e33ce gui=bold guisp=NONE

line 9: highlight MiniIconsYellow guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Title guifg=#223d90 guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitDiffDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight ModeMsg guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitDiffAddHighlight guifg=NONE guibg=#d0d6cd gui=NONE guisp=NONE

line 9: highlight! link NvimTreeVertSplit VertSplit

line 9: highlight NvimTreeSpecialFile guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIBreakpointsCurrentLine guifg=#396847 guibg=NONE gui=bold guisp=NONE

line 9: highlight GlyphPalette5 guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiffDelete guifg=NONE guibg=#e6c8c8 gui=NONE guisp=NONE

line 9: highlight! link MiniSurround IncSearch

line 9: highlight NavicText guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindClass Type

line 9: highlight BufferInactiveMod guifg=#e0c3a7 guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NeotestDir guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TelescopeSelectionCaret guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitNotificationError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickNormal NormalFloat

line 9: highlight! link MiniDepsTitle Title

line 9: highlight! link NavicIconsPackage Identifier

line 9: highlight! link DiagnosticSignOk DiagnosticOk

line 9: highlight NvimTreeEmptyFolderName guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniHipatternsNote guifg=#e4dcd4 guibg=#2848a9 gui=bold guisp=NONE

line 9: highlight rainbowcol7 guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight diffRemoved guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniStarterSection guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferInactiveTarget guifg=#a5222f guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight BufferInactiveSign guifg=#d3c7bb guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NotifyTRACETitle guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniFilesBorder FloatBorder

line 9: highlight GlyphPalette7 guifg=#f4ece6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link SignColumnSB SignColumn

line 9: highlight! link NagicIconsOperator Operator

line 9: highlight IndentBlanklineContextStart guifg=NONE guibg=NONE gui=underline guisp=#352c24

line 9: highlight BufferCurrentIndex guifg=#2848a9 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight HopNextKey1 guifg=#2848a9 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link NavicIconsConstructor Function

line 9: highlight! link Delimiter Special

line 9: highlight! link CmpItemKindStruct Type

line 9: highlight! link MiniStarterInactive Comment

line 9: highlight! link PmenuSbar Pmenu

line 9: highlight DiagnosticUnderlineHint guifg=NONE guibg=NONE gui=undercurl guisp=#396847

line 9: highlight! link NavicIconsFile Directory

line 9: highlight StatusLineNC guifg=#824d5b guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight NvimTreeGitDirty guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TelescopeBorder guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link TelescopeSelection CursorLine

line 9: highlight MiniFilesTitleFocused guifg=#3d2b5a guibg=NONE gui=bold guisp=NONE

line 9: highlight NeogitHunkHeaderHighlight guifg=#2848a9 guibg=#e7d2be gui=NONE guisp=NONE

line 9: highlight MiniTrailspace guifg=NONE guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight diffChanged guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyINFOTitle guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump guifg=#e4dcd4 guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight LeapBackdrop guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowYellow guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeNormal guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link NavicIconsString String

line 9: highlight MiniIconsAzure guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniHipatternsHack guifg=#e4dcd4 guibg=#ac5402 gui=bold guisp=NONE

line 9: highlight DiagnosticHint guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniCursorword LspReferenceText

line 9: highlight DapUIWatchesError guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight DiagnosticUnderlineWarn guifg=NONE guibg=NONE gui=undercurl guisp=#ac5402

line 9: highlight LeapLabelPrimary guifg=#f6f2ee guibg=#8b369a gui=NONE guisp=NONE

line 9: highlight GlyphPalette9 guifg=#b3434e guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette13 guifg=#8452d5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link illuminatedWordWrite LspReferenceText

line 9: highlight! link MiniDepsChangeAdded diffAdded

line 9: highlight NormalNC guifg=#3d2b5a guibg=#f6f2ee gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeCommand guifg=#e4dcd4 guibg=#ac5402 gui=bold guisp=NONE

line 9: highlight MiniCompletionActiveParameter guifg=NONE guibg=NONE gui=underline guisp=NONE

line 9: highlight NvimTreeNormal guifg=#3d2b5a guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link lCursor Cursor

line 9: highlight Keyword guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight EndOfBuffer guifg=#f6f2ee guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Boolean Number

line 9: highlight PounceAccept guifg=#f6f2ee guibg=#7f5152 gui=NONE guisp=NONE

line 9: highlight CursorLineNr guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight LspSagaDefPreviewBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellBad guifg=NONE guibg=NONE gui=undercurl guisp=#a5222f

line 9: highlight GitSignsAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeGitModified guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NotifyINFOBorder guifg=#8f9dcc guibg=NONE gui=NONE guisp=NONE

line 9: highlight TSRainbowOrange guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniJump2dSpotUnique guifg=#ac5402 guibg=NONE gui=bold guisp=NONE

line 9: highlight NvimTreeSymlink guifg=#b25dc0 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link MiniPickBorder FloatBorder

line 9: highlight DiagnosticVirtualTextOk guifg=#396847 guibg=#bdc9bc gui=NONE guisp=NONE

line 9: highlight! link NeotestTest Normal

line 9: highlight MiniStarterItemPrefix guifg=#a440b5 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitDiffAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight LspSagaCodeActionBorder guifg=#824d5b guibg=NONE gui=NONE guisp=NONE

line 9: highlight Substitute guifg=#f6f2ee guibg=#a5222f gui=NONE guisp=NONE

line 9: highlight! link MiniIndentscopeSymbol Delimiter

line 9: highlight! link VisualNOS visual

line 9: highlight GitGutterDelete guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight DapUIWatchesEmpty guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeoTreeDirectoryName guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsFunction Function

line 9: highlight! link Define PreProc

line 9: highlight! link NotifyERRORIcon NotifyERRORTitle

line 9: highlight PmenuThumb guifg=NONE guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight LspTroubleCount guifg=#6e33ce guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight Conditional guifg=#5e2baf guibg=NONE gui=NONE guisp=NONE

line 9: highlight IndentBlanklineContextChar guifg=#352c24 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsClass Type

line 9: highlight! link NvimTreeGitRenamed NvimTreeGitDeleted

line 9: highlight Number guifg=#955f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NeogitHunkHeader guifg=#2848a9 guibg=#d3c7bb gui=NONE guisp=NONE

line 9: highlight MiniStatuslineModeInsert guifg=#e4dcd4 guibg=#396847 gui=bold guisp=NONE

line 9: highlight MiniTablineModifiedHidden guifg=#dbd1dd guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight String guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindReference Keyword

line 9: highlight NeoTreeGitIgnored guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight AlphaButtons guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight PreProc guifg=#8b369a guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferVisibleTarget guifg=#a5222f guibg=#e4dcd4 gui=NONE guisp=NONE

line 9: highlight! link MiniAnimateNormalFloat NormalFloat

line 9: highlight! link NavicIconsStruct Type

line 9: highlight WinSeparator guifg=#e4dcd4 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette1 guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight LeapLabelSecondary guifg=#f6f2ee guibg=#22676d gui=NONE guisp=NONE

line 9: highlight MoreMsg guifg=#2848a9 guibg=NONE gui=bold guisp=NONE

line 9: highlight Error guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIconsGreen guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Tag Special

line 9: highlight MiniIconsGrey guifg=#302b5d guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CursorColumn CursorLine

line 9: highlight MiniAnimateCursor guifg=NONE guibg=NONE gui=reverse,nocombine guisp=NONE

line 9: highlight PmenuSel guifg=NONE guibg=#a4c1c2 gui=NONE guisp=NONE

line 9: highlight! link MiniDiffOverAdd DiffAdd

line 9: highlight MiniTablineTabpagesection guifg=#3d2b5a guibg=#f6f2ee gui=bold guisp=NONE

line 9: highlight FernBranchText guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NotifyWARNIcon NotifyWARNTitle

line 9: highlight! link DapUISource Keyword

line 9: highlight! link CmpItemKindProperty Identifier

line 9: highlight MiniTestEmphasis guifg=NONE guibg=NONE gui=bold guisp=NONE

line 9: highlight! link MiniClueSeparator DiagnosticFloatingInfo

line 9: highlight MiniStatuslineFileinfo guifg=#643f61 guibg=#dbd1dd gui=NONE guisp=NONE

line 9: highlight ModesVisual guifg=NONE guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight NeotestAdapterName guifg=#a440b5 guibg=NONE gui=bold guisp=NONE

line 9: highlight! link DashboardCenter String

line 9: highlight! link NeotestExpandMarker Conceal

line 9: highlight! link NvimTreeGitStaged NvimTreeGitStaged

line 9: highlight! link MiniStatuslineFilename StatusLine

line 9: highlight NeoTreeIndentMarker guifg=#aab0ad guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link CmpItemKindKeyword Identifier

line 9: highlight rainbowcol5 guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight NvimTreeFolderIcon guifg=#2848a9 guibg=NONE gui=NONE guisp=NONE

line 9: highlight MiniIndentscopePrefix guifg=NONE guibg=NONE gui=nocombine guisp=NONE

line 9: highlight Sneak guifg=#e4dcd4 guibg=#6e33ce gui=NONE guisp=NONE

line 9: highlight LspTroubleText guifg=#643f61 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette2 guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link DapUIFloatBorder FloatBorder

line 9: highlight Constant guifg=#7f5152 guibg=NONE gui=NONE guisp=NONE

line 9: highlight SpellCap guifg=NONE guibg=NONE gui=undercurl guisp=#ac5402

line 9: highlight! link MiniNotifyTitle FloatTitle

line 9: highlight DiagnosticVirtualTextWarn guifg=#ac5402 guibg=#e0c3a7 gui=NONE guisp=NONE

line 9: highlight PounceAcceptBest guifg=#f6f2ee guibg=#22676d gui=NONE guisp=NONE

line 9: highlight! link DapUILineNumber Number

line 9: highlight GitGutterAdd guifg=#396847 guibg=NONE gui=NONE guisp=NONE

line 9: highlight BufferCurrentMod guifg=#ac5402 guibg=#824d5b gui=NONE guisp=NONE

line 9: highlight DapUIBreakpointsDisabledLine guifg=#837a72 guibg=NONE gui=NONE guisp=NONE

line 9: highlight GlyphPalette12 guifg=#4863b6 guibg=NONE gui=NONE guisp=NONE

line 9: highlight Statement guifg=#6e33ce guibg=NONE gui=NONE guisp=NONE

line 9: highlight Identifier guifg=#287980 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link NavicIconsObject Identifier

line 9: highlight SignifySignChange guifg=#ac5402 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link Macro PreProc

line 9: highlight NvimTreeGitDeleted guifg=#a5222f guibg=NONE gui=NONE guisp=NONE

line 9: highlight CmpItemAbbr guifg=#3d2b5a guibg=NONE gui=NONE guisp=NONE

line 9: highlight Function guifg=#223d90 guibg=NONE gui=NONE guisp=NONE

line 9: highlight! link TelescopeMatching Search

finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/colors/dayfox.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
Executing ColorScheme Autocommands for "*"
autocommand call ToggleBatEnvVar()

Executing: call ToggleBatEnvVar()

calling ToggleBatEnvVar()

line 1:     if (&background ==# 'light')

line 2:         let $BAT_THEME=''

line 3:     else

line 4:         let $BAT_THEME='fly16'

line 5:     endif

ToggleBatEnvVar returning #0

continuing in ColorScheme Autocommands for "*"

Executing ColorScheme Autocommands for "*"
autocommand if !has('vim_starting') || expand('<amatch>') !=# 'macvim' | call lightline#update() | call lightline#highlight() | endif

Executing: if !has('vim_starting') || expand('<amatch>') !=# 'macvim' | call lightline#update() | call lightline#highlight() | endif

Executing:  call lightline#update() | call lightline#highlight() | endif

Searching for "autoload/lightline.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/lightline.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload)
fchdir() to previous dir
line 0: sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline.vim"
line 1: " =============================================================================

line 2: " Filename: autoload/lightline.vim

line 3: " Author: itchyny

line 4: " License: MIT License

line 5: " Last Change: 2021/11/21 22:54:46.

line 6: " =============================================================================

line 7: 

line 8: let s:save_cpo = &cpo

line 9: set cpo&vim

line 10: 

line 11: let s:_ = 1 " 1: uninitialized, 2: disabled

line 12: 

line 13: function! lightline#update() abort

line 28: 

line 29: if exists('*nvim_win_get_config')

line 30:   function! s:skip() abort

line 33: elseif exists('*win_gettype')

line 34:   function! s:skip() abort " Vim 8.2.0257 (00f3b4e007), 8.2.0991 (0fe937fd86), 8.2.0996 (40a019f157)

line 37: else

line 38:   function! s:skip() abort

line 41: endif

line 42: 

line 43: function! lightline#update_disable() abort

line 48: 

line 49: function! lightline#enable() abort

line 67: 

line 68: function! lightline#disable() abort

line 85: 

line 86: function! lightline#toggle() abort

line 93: 

line 94: let s:_lightline = {   'active': {     'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']],     'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype']]   },   'inactive': {     'left': [['filename']],     'right': [['lineinfo'], ['percent']]   },   'tabline': {     'left': [['tabs']],     'right': [['close']]   },   'tab': {     'active': ['tabnum', 'filename', 'modified'],     'inactive': ['tabnum', 'filename', 'modified']   },   'component': {     'mode': '%{lightline#mode()}',     'absolutepath': '%F', 'relativepath': '%f', 'filename': '%t', 'modified': '%M', 'bufnum': '%n',     'paste': '%{&paste?"PASTE":""}', 'readonly': '%R', 'charvalue': '%b', 'charvaluehex': '%B',     'spell': '%{&spell?&spelllang:""}', 'fileencoding': '%{&fenc!=#""?&fenc:&enc}', 'fileformat': '%{&ff}',     'filetype': '%{&ft!=#""?&ft:"no ft"}', 'percent': '%3p%%', 'percentwin': '%P',     'lineinfo': '%3l:%-2c', 'line': '%l', 'column': '%c', 'close': '%999X X ', 'winnr': '%{winnr()}'   }

line 153: function! lightline#init() abort

line 194: 

line 195: function! lightline#colorscheme() abort

line 212: 

line 213: function! lightline#palette() abort

line 216: 

line 217: function! lightline#mode() abort

line 220: 

line 221: let s:mode = ''

line 222: function! lightline#link(...) abort

line 247: 

line 248: function! s:term(p) abort

line 251: 

line 252: if exists('*uniq')

line 253:   let s:uniq = function('uniq')

line 254: else

line 255:   function! s:uniq(xs) abort

line 265: endif

line 266: 

line 267: function! lightline#highlight(...) abort

line 299: 

line 300: function! s:subseparator(components, subseparator, expanded) abort

line 307: 

line 308: function! lightline#concatenate(xs, right) abort

line 312: 

line 313: function! lightline#statusline(inactive) abort

line 319: 

line 320: function! s:normalize(result) abort

line 329: 

line 330: function! s:evaluate_expand(component) abort

line 341: 

line 342: function! s:convert(name, index) abort

line 352: 

line 353: function! s:expand(components) abort

line 385: 

line 386: function! s:func(name) abort

line 389: 

line 390: function! s:line(tabline, inactive) abort

line 430: 

line 431: let s:tabnr = -1

line 432: let s:tabcnt = -1

line 433: let s:columns = -1

line 434: let s:tabline = ''

line 435: function! lightline#tabline() abort

line 447: 

line 448: function! lightline#tabs() abort

line 469: 

line 470: function! lightline#onetab(n, active) abort

line 481: 

line 482: function! lightline#error(msg) abort

line 487: 

line 488: let &cpo = s:save_cpo

line 489: unlet s:save_cpo

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline.vim
continuing in ColorScheme Autocommands for "*"
calling lightline#update()

line 1:   if s:skip() | return | endif

calling <SNR>136_skip()

line 1:     return win_gettype() ==# 'popup' || win_gettype() ==# 'autocmd'

<SNR>136_skip returning #0

continuing in lightline#update

line 1:  return | endif

line 1:  endif

line 2:   if s:_

line 3:     if s:_ == 2 | return | endif

line 3:  return | endif

line 3:  endif

line 4:     call lightline#init()

calling lightline#init()

line 1:   let s:lightline = deepcopy(get(g:, 'lightline', {}))

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 2:   for [key, value] in items(s:_lightline)

line 3:     if type(value) == 4

line 4:       if !has_key(s:lightline, key)

line 5:         let s:lightline[key] = {}

line 6:       endif

line 7:       call extend(s:lightline[key], value, 'keep')

line 8:     elseif !has_key(s:lightline, key)

line 9:       let s:lightline[key] = value

line 10:     endif

line 11:     unlet value

line 12:   endfor

line 13:   call extend(s:lightline.tabline_separator, s:lightline.separator, 'keep')

line 14:   call extend(s:lightline.tabline_subseparator, s:lightline.subseparator, 'keep')

line 15:   let s:lightline.tabline_configured = has_key(get(get(g:, 'lightline', {}), 'component_expand', {}), 'tabs')

line 16:   for components in deepcopy(s:lightline.tabline.left + s:lightline.tabline.right)

line 17:     if len(filter(components, 'v:val !=# "tabs" && v:val !=# "close"')) > 0

line 18:       let s:lightline.tabline_configured = 1

line 19:       break

line 20:     endif

line 21:   endfor

line 16:   for components in deepcopy(s:lightline.tabline.left + s:lightline.tabline.right)

line 17:     if len(filter(components, 'v:val !=# "tabs" && v:val !=# "close"')) > 0

line 18:       let s:lightline.tabline_configured = 1

line 19:       break

line 20:     endif

line 21:   endfor

line 16:   for components in deepcopy(s:lightline.tabline.left + s:lightline.tabline.right)

line 17:     if len(filter(components, 'v:val !=# "tabs" && v:val !=# "close"')) > 0

line 18:       let s:lightline.tabline_configured = 1

line 19:       break

line 20:     endif

line 21:   endfor

line 22:   if !exists('s:_statusline')

line 23:     let s:_statusline = &statusline

line 24:   endif

line 25:   if !exists('s:_tabline')

line 26:     let s:_tabline = &tabline

line 27:   endif

line 28:   if s:lightline.enable.tabline

line 29:     set tabline=%!lightline#tabline()

line 30:   else

line 31:     let &tabline = get(s:, '_tabline', '')

line 32:   endif

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 33:   for f in values(s:lightline.component_function)

line 34:     silent! call call(f, [])

line 35:   endfor

line 36:   for f in values(s:lightline.tab_component_function)

line 37:     silent! call call(f, [1])

line 38:   endfor

line 36:   for f in values(s:lightline.tab_component_function)

line 37:     silent! call call(f, [1])

line 38:   endfor

line 36:   for f in values(s:lightline.tab_component_function)

line 37:     silent! call call(f, [1])

line 38:   endfor

line 36:   for f in values(s:lightline.tab_component_function)

line 37:     silent! call call(f, [1])

line 38:   endfor

line 36:   for f in values(s:lightline.tab_component_function)

line 37:     silent! call call(f, [1])

line 38:   endfor

line 39:   let s:mode = ''

lightline#init returning #0

continuing in lightline#update

line 5:     call lightline#colorscheme()

calling lightline#colorscheme()

line 1:   try

line 2:     let s:lightline.palette = g:lightline#colorscheme#{s:lightline.colorscheme}#palette

Searching for "autoload/lightline/colorscheme/dayfox.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piot
Searching for "/Users/piotr/.config/vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/lightline/colorscheme/dayfox.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim"
chdir(/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim"
line 1: if has('nvim')

line 2:   let s:p = v:lua.require('nightfox.util.lightline').generate('dayfox')

line 3: else

line 4:   lua nightfox_vim = require('nightfox.util.lightline').dump('dayfox')

line 5:   let s:palette_str = luaeval('nightfox_vim')

line 6:   let s:p = eval(s:palette_str)

line 7: endif

line 8: let g:lightline#colorscheme#dayfox#palette = lightline#colorscheme#fill(s:p)

Searching for "autoload/lightline/colorscheme.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.conf
Searching for "/Users/piotr/.config/vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/lightline/colorscheme.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline)
fchdir() to previous dir
line 8: sourcing "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme.vim"
line 1: " =============================================================================

line 2: " Filename: autoload/lightline/colorscheme.vim

line 3: " Author: itchyny

line 4: " License: MIT License

line 5: " Last Change: 2019/09/07 11:20:37.

line 6: " =============================================================================

line 7: 

line 8: let s:save_cpo = &cpo

line 9: set cpo&vim

line 10: 

line 11: let s:cuicolor = { 'black'          : 16, 'white'          : 231, 'darkestgreen'   : 22, 'darkgreen'      : 28, 'mediumgreen'    : 70, 'brightgreen'    : 148, 'darkestcyan'    : 23, 'mediumcyan'     : 117, 'darkestblue'    : 24, 'darkblue'       : 31, 'darkestred'     : 52, 'darkred'        : 88, 'mediumred'      : 124, 'brightred'      : 160, 'brightestred'   : 196, 'darkestpurple'  : 55, 'mediumpurple'   : 98, 'brightpurple'   : 189, 'brightorange'   : 208, 'brightestorange': 214, 'gray0'          : 233, 'gray1'          : 235, 'gray2'          : 236, 'gray3'          : 239, 'gray4'          : 240, 'gray5'          : 241, 'gray6'          : 244, 'gray7'          : 245, 'gray8'          : 247, 'gray9'          : 250, 'gray10'         : 252, 'yellow'         : 136, 'orange'         : 166, 'red'            : 160, 'magenta'        : 125, 'violet'         : 61, 'blue'           : 33, 'cyan'           : 37, 'green'          : 64, }

line 60: 

line 61: let s:guicolor = { 'black'          : '#000000', 'white'          : '#ffffff', 'darkestgreen'   : '#005f00', 'darkgreen'      : '#008700', 'mediumgreen'    : '#5faf00', 'brightgreen'    : '#afdf00', 'darkestcyan'    : '#005f5f', 'mediumcyan'     : '#87dfff', 'darkestblue'    : '#005f87', 'darkblue'       : '#0087af', 'darkestred'     : '#5f0000', 'darkred'        : '#870000', 'mediumred'      : '#af0000', 'brightred'      : '#df0000', 'brightestred'   : '#ff0000', 'darkestpurple'  : '#5f00af', 'mediumpurple'   : '#875fdf', 'brightpurple'   : '#dfdfff', 'brightorange'   : '#ff8700', 'brightestorange': '#ffaf00', 'gray0'          : '#121212', 'gray1'          : '#262626', 'gray2'          : '#303030', 'gray3'          : '#4e4e4e', 'gray4'          : '#585858', 'gray5'          : '#606060', 'gray6'          : '#808080', 'gray7'          : '#8a8a8a', 'gray8'          : '#9e9e9e', 'gray9'          : '#bcbcbc', 'gray10'         : '#d0d0d0', 'yellow'         : '#b58900', 'orange'         : '#cb4b16', 'red' 

line 110: 

line 111: function! s:convert(rgb) abort

line 128: 

line 129: function! s:black(x) abort

line 141: 

line 142: function! s:nr(x) abort

line 145: 

line 146: function! s:rgb(r, g, b) abort

line 149: 

line 150: function! s:upconvert(nr) abort

line 182: 

line 183: function! lightline#colorscheme#fill(p) abort

line 208: 

line 209: function! lightline#colorscheme#flatten(p) abort

line 226: 

line 227: if has('gui_running') || (has('termguicolors') && &termguicolors)

line 228:   function! lightline#colorscheme#background() abort

line 231: else

line 232:   " &background is set inappropriately when the colorscheme sets ctermbg of the Normal group

line 233:   function! lightline#colorscheme#background() abort

line 254: endif

line 255: 

line 256: let &cpo = s:save_cpo

line 257: unlet s:save_cpo

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/lightline/colorscheme.vim
continuing in /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim
calling lightline#colorscheme#fill({'inactive': {'right': [['#643f61', '#..., '#ac5402'], ['#643f61', '#d3b395']]}})

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#c7b1b0')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(199)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(177)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(176)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #181

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#824d5b')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(130)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #2

continuing in <SNR>140_convert

calling <SNR>140_nr(77)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(91)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #95

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#c7b1b0')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(199)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(177)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(176)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #181

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#d1a4a3')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(209)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(164)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(163)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #181

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#a5222f')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(165)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(34)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #0

continuing in <SNR>140_convert

calling <SNR>140_nr(47)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #125

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#d1a4a3')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(209)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(164)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(163)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #181

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#acb0c7')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(172)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(176)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(199)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #146

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#2848a9')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(40)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #0

continuing in <SNR>140_convert

calling <SNR>140_nr(72)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(169)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #25

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#acb0c7')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(172)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(176)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(199)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #146

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#a5222f')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(165)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(34)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #0

continuing in <SNR>140_convert

calling <SNR>140_nr(47)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #125

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#824d5b')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(130)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #2

continuing in <SNR>140_convert

calling <SNR>140_nr(77)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(91)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #95

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#dbd1dd')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(219)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(209)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(221)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#3d2b5a')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(61)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(43)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #0

continuing in <SNR>140_convert

calling <SNR>140_nr(90)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #53

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#aab0ad')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(170)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(176)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(173)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #145

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#c1a9d2')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(193)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(169)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(210)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #146

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#6e33ce')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(110)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(51)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(206)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #62

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#c1a9d2')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(193)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(169)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(210)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #146

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#b1b9aa')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(177)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(185)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(170)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #145

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#396847')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(57)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(104)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(71)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#b1b9aa')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(177)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(185)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(170)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

<SNR>140_convert returning #145

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#d3b395')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(211)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(179)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(149)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #2

continuing in <SNR>140_convert

<SNR>140_convert returning #180

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#e4dcd4')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(228)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(220)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(212)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

<SNR>140_convert returning #188

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#ac5402')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(172)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(84)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(2)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #0

continuing in <SNR>140_convert

<SNR>140_convert returning #130

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

calling <SNR>140_convert('#643f61')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(100)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(63)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

calling <SNR>140_nr(97)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #1

continuing in <SNR>140_convert

<SNR>140_convert returning #59

continuing in lightline#colorscheme#fill

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

calling <SNR>140_convert('#d3b395')

line 1:   let rgb = map(matchlist(a:rgb, '#\(..\)\(..\)\(..\)')[1:3], '0 + ("0x".v:val)')

line 2:   if len(rgb) == 0

line 3:     return 0

line 4:   endif

line 5:   if rgb[0] == 0xc0 && rgb[1] == 0xc0 && rgb[2] == 0xc0

line 6:     return 7

line 7:   elseif rgb[0] == 0x80 && rgb[1] == 0x80 && rgb[2] == 0x80

line 8:     return 8

line 9:   elseif (rgb[0] == 0x80 || rgb[0] == 0x00) && (rgb[1] == 0x80 || rgb[1] == 0x00) && (rgb[2] == 0x80 || rgb[2] == 0x00)

line 10:     return (rgb[0] / 0x80) + (rgb[1] / 0x80) * 2 + (rgb[1] / 0x80) * 4

line 11:   elseif abs(rgb[0]-rgb[1]) < 3 && abs(rgb[1]-rgb[2]) < 3 && abs(rgb[2]-rgb[0]) < 3

line 12:     return s:black((rgb[0] + rgb[1] + rgb[2]) / 3)

line 13:   else

line 14:     return 16 + ((s:nr(rgb[0]) * 6) + s:nr(rgb[1])) * 6 + s:nr(rgb[2])

calling <SNR>140_nr(211)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #4

continuing in <SNR>140_convert

calling <SNR>140_nr(179)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #3

continuing in <SNR>140_convert

calling <SNR>140_nr(149)

line 1:   return a:x < 0x2f ? 0 : a:x < 0x73 ? 1 : a:x < 0x9b ? 2 : a:x < 0xc7 ? 3 : a:x < 0xef ? 4 : 5

<SNR>140_nr returning #2

continuing in <SNR>140_convert

<SNR>140_convert returning #180

continuing in lightline#colorscheme#fill

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 1:   for k in values(a:p)

line 2:     for l in values(k)

line 3:       for m in l

line 4:         if len(m) < 4

line 5:           if type(m[0]) == 1 && type(m[1]) == 1

line 6:             if m[0] =~# '^\d\+$' && m[1] =~# '^\d\+$'

line 7:               call insert(m, s:upconvert(m[1]), 0)

line 8:               call insert(m, s:upconvert(m[1]), 0)

line 9:             else

line 10:               call insert(m, get(s:cuicolor, m[0], s:convert(m[0])), 2)

line 11:               call insert(m, get(s:cuicolor, m[1], s:convert(m[1])), 3)

line 12:               let m[0] = get(s:guicolor, m[0], m[0])

line 13:               let m[1] = get(s:guicolor, m[1], m[1])

line 14:             endif

line 15:           elseif type(m[0]) == 0 && type(m[1]) == 0

line 16:               call insert(m, s:upconvert(m[1]), 0)

line 17:               call insert(m, s:upconvert(m[1]), 0)

line 18:           endif

line 19:         endif

line 20:       endfor

line 21:     endfor

line 22:   endfor

line 23:   return a:p

lightline#colorscheme#fill returning {'inactive': {'right': [['#643f61', '#...30], ['#643f61', '#d3b395', 59, 180]]}}

continuing in /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim

finished sourcing /Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/lightline/colorscheme/dayfox.vim
continuing in lightline#colorscheme
line 3:   catch

line 4:     call lightline#error('Could not load colorscheme ' . s:lightline.colorscheme . '.')

line 5:     let s:lightline.colorscheme = 'default'

line 6:     let s:lightline.palette = g:lightline#colorscheme#{s:lightline.colorscheme}#palette

line 7:   finally

line 8:     if has('win32') && !has('gui_running') && &t_Co < 256

line 9:       call lightline#colortable#gui2cui_palette(s:lightline.palette)

line 10:     endif

line 11:     let s:highlight = {}

line 12:     call lightline#highlight('normal')

calling lightline#highlight('normal')

line 1:   let [c, f] = [s:lightline.palette, s:lightline.mode_fallback]

line 2:   let [s:lightline.llen, s:lightline.rlen] = [len(c.normal.left), len(c.normal.right)]

line 3:   let [s:lightline.tab_llen, s:lightline.tab_rlen] = [len(has_key(get(c, 'tabline', {}), 'left') ? c.tabline.left : c.normal.left), len(has_key(get(c, 'tabline', {}), 'right') ? c.tabline.right : c.normal.right)]

line 4:   let types = map(s:uniq(sort(filter(values(s:lightline.component_type), 'v:val !=# "raw"'))), '[v:val, 1]')

line 5:   let modes = a:0 ? [a:1] : extend(['normal', 'insert', 'replace', 'visual', 'inactive', 'command', 'select', 'tabline'], exists(':terminal') == 2 ? ['terminal'] : [])

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#2848a9', 188, 25])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_0 guifg=#e4dcd4 guibg=#2848a9 ctermfg=188 ctermbg=25 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_0_1 guifg=#2848a9 guibg=#acb0c7 ctermfg=25 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_0_tabsel guifg=#2848a9 guibg=#aab0ad ctermfg=25 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#acb0c7', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_1 guifg=#643f61 guibg=#acb0c7 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_1_2 guifg=#acb0c7 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_1_tabsel guifg=#acb0c7 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_0 guifg=#aab0ad guibg=#2848a9 ctermfg=145 ctermbg=25

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_1 guifg=#aab0ad guibg=#acb0c7 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#acb0c7', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_0 guifg=#643f61 guibg=#acb0c7 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_0_1 guifg=#acb0c7 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_0_tabsel guifg=#acb0c7 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_0 guifg=#aab0ad guibg=#acb0c7 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_normal guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

line 29:   endfor

line 30:   if !a:0 | let s:mode = '' | endif

line 30:  let s:mode = '' | endif

line 30:  endif

lightline#highlight returning #0

continuing in lightline#colorscheme

line 13:     call lightline#link()

calling lightline#link()

line 1:   let mode = get(s:lightline._mode_, a:0 ? a:1 : mode(), 'normal')

line 2:   if s:mode ==# mode

line 3:     return ''

line 4:   endif

line 5:   let s:mode = mode

line 6:   if !has_key(s:highlight, mode)

line 7:     call lightline#highlight(mode)

line 8:   endif

line 9:   let types = map(s:uniq(sort(filter(values(s:lightline.component_type), 'v:val !=# "raw"'))), '[v:val, 1]')

line 10:   for [p, l] in [['Left', len(s:lightline.active.left)], ['Right', len(s:lightline.active.right)]]

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineLeft_active_0 LightlineLeft_normal_0

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_0_1 LightlineLeft_normal_0_1

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_0_tabsel LightlineLeft_normal_0_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineLeft_active_1 LightlineLeft_normal_1

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_1_2 LightlineLeft_normal_1_2

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_1_tabsel LightlineLeft_normal_1_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineLeft_active_2 LightlineLeft_normal_2

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_2_3 LightlineLeft_normal_2_3

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_2_tabsel LightlineLeft_normal_2_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineLeft_active_tabsel LightlineLeft_normal_tabsel

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_tabsel_0 LightlineLeft_normal_tabsel_0

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_tabsel_1 LightlineLeft_normal_tabsel_1

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_tabsel_2 LightlineLeft_normal_tabsel_2

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_tabsel_3 LightlineLeft_normal_tabsel_3

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineLeft_active_tabsel_tabsel LightlineLeft_normal_tabsel_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 21:   endfor

line 10:   for [p, l] in [['Left', len(s:lightline.active.left)], ['Right', len(s:lightline.active.right)]]

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineRight_active_0 LightlineRight_normal_0

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_0_1 LightlineRight_normal_0_1

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_0_tabsel LightlineRight_normal_0_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineRight_active_1 LightlineRight_normal_1

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_1_2 LightlineRight_normal_1_2

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_1_tabsel LightlineRight_normal_1_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineRight_active_2 LightlineRight_normal_2

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_2_3 LightlineRight_normal_2_3

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_2_tabsel LightlineRight_normal_2_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 13: hi link LightlineRight_active_tabsel LightlineRight_normal_tabsel

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_tabsel_0 LightlineRight_normal_tabsel_0

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_tabsel_1 LightlineRight_normal_tabsel_1

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_tabsel_2 LightlineRight_normal_tabsel_2

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_tabsel_3 LightlineRight_normal_tabsel_3

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 17: hi link LightlineRight_active_tabsel_tabsel LightlineRight_normal_tabsel_tabsel

line 18:         endif

line 19:       endfor

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 21:   endfor

line 10:   for [p, l] in [['Left', len(s:lightline.active.left)], ['Right', len(s:lightline.active.right)]]

line 11:     for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 12:       if i != l

line 13:         exec printf('hi link Lightline%s_active_%s Lightline%s_%s_%s', p, i, p, mode, i)

line 14:       endif

line 15:       for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i + 1 == j || t || s && i != l

line 17:           exec printf('hi link Lightline%s_active_%s_%s Lightline%s_%s_%s_%s', p, i, j, p, mode, i, j)

line 18:         endif

line 19:       endfor

line 20:     endfor

line 21:   endfor

line 22:   exec printf('hi link LightlineMiddle_active LightlineMiddle_%s', mode)

line 22: hi link LightlineMiddle_active LightlineMiddle_normal

line 23:   return ''

lightline#link returning ''

continuing in lightline#colorscheme

line 14:     let s:_ = 0

line 15:   endtry

lightline#colorscheme returning #0

continuing in lightline#update

line 6:   endif

line 7:   if s:lightline.enable.statusline

line 8:     let w = winnr()

line 9:     let s = winnr('$') == 1 && w > 0 ? [lightline#statusline(0)] : [lightline#statusline(0), lightline#statusline(1)]

calling lightline#statusline(0)

line 1:   if a:inactive && !has_key(s:highlight, 'inactive')

line 2:     call lightline#highlight('inactive')

line 3:   endif

line 4:   return s:line(0, a:inactive)

calling <SNR>136_line(0, 0)

line 1:   let _ = a:tabline ? '' : '%{lightline#link()}'

line 2:   if s:lightline.palette == {}

line 3:     call lightline#colorscheme()

line 4:   endif

line 5:   let [l, r] = a:tabline ? [s:lightline.tab_llen, s:lightline.tab_rlen] : [s:lightline.llen, s:lightline.rlen]

line 6:   let [p, s] = a:tabline ? [s:lightline.tabline_separator, s:lightline.tabline_subseparator] : [s:lightline.separator, s:lightline.subseparator]

line 7:   let [c, f, t, w] = [s:lightline.component, s:lightline.component_function, s:lightline.component_type, s:lightline.component_raw]

line 8:   let mode = a:tabline ? 'tabline' : a:inactive ? 'inactive' : 'active'

line 9:   let ls = has_key(s:lightline, mode) ? s:lightline[mode].left : s:lightline.active.left

line 10:   let [lc, le, li] = s:expand(ls)

calling <SNR>136_expand([['mode', 'paste'], ['gitbranch'], ['r... 'filename', 'modified', 'lsp_status']])

line 1:   let components = []

line 2:   let expanded = []

line 3:   let indices = []

line 4:   let prevtype = ''

line 5:   let previndex = -1

line 6:   let xs = []

line 7:   call map(deepcopy(a:components), 'map(v:val, "extend(xs, s:convert(v:val, ''" . v:key . "''))")')

calling <SNR>136_convert('mode', '0')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['mode'], 0, '0', '0']]

continuing in <SNR>136_expand

calling <SNR>136_convert('paste', '0')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['paste'], 0, '0', '0']]

continuing in <SNR>136_expand

calling <SNR>136_convert('gitbranch', '1')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['gitbranch'], 0, '1', '1']]

continuing in <SNR>136_expand

calling <SNR>136_convert('readonly', '2')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['readonly'], 0, '2', '2']]

continuing in <SNR>136_expand

calling <SNR>136_convert('filename', '2')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['filename'], 0, '2', '2']]

continuing in <SNR>136_expand

calling <SNR>136_convert('modified', '2')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['modified'], 0, '2', '2']]

continuing in <SNR>136_expand

calling <SNR>136_convert('lsp_status', '2')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['lsp_status'], 0, '2', '2']]

continuing in <SNR>136_expand

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 24:   for i in range(previndex + 1, max([previndex, len(a:components) - 1]))

line 25:     call add(indices, string(i))

line 26:     call add(components, [])

line 27:     call add(expanded, [])

line 28:   endfor

line 29:   call add(indices, string(len(a:components)))

line 30:   return [components, expanded, indices]

<SNR>136_expand returning [[['mode', 'paste'], ['gitbranch'], ['...], [0, 0, 0, 0]], ['0', '1', '2', '3']]

continuing in <SNR>136_line

line 11:   let rs = has_key(s:lightline, mode) ? s:lightline[mode].right : s:lightline.active.right

line 12:   let [rc, re, ri] = s:expand(rs)

calling <SNR>136_expand([['lineinfo'], ['percent', 'filetype'], ['gutentags']])

line 1:   let components = []

line 2:   let expanded = []

line 3:   let indices = []

line 4:   let prevtype = ''

line 5:   let previndex = -1

line 6:   let xs = []

line 7:   call map(deepcopy(a:components), 'map(v:val, "extend(xs, s:convert(v:val, ''" . v:key . "''))")')

calling <SNR>136_convert('lineinfo', '0')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['lineinfo'], 0, '0', '0']]

continuing in <SNR>136_expand

calling <SNR>136_convert('percent', '1')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['percent'], 0, '1', '1']]

continuing in <SNR>136_expand

calling <SNR>136_convert('filetype', '1')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

<SNR>136_convert returning [[['filetype'], 0, '1', '1']]

continuing in <SNR>136_expand

calling <SNR>136_convert('gutentags', '2')

line 1:   if !has_key(s:lightline.component_expand, a:name)

line 2:     return [[[a:name], 0, a:index, a:index]]

line 3:   else

line 4:     let type = get(s:lightline.component_type, a:name, a:index)

line 5:     let is_raw = get(s:lightline.component_raw, a:name) || type ==# 'raw'

line 6:     return filter(map(s:evaluate_expand(s:lightline.component_expand[a:name]), '[v:val, 1 + ' . is_raw . ', v:key == 1 && ' . (type !=# 'raw') . ' ? "' . type . '" : "' . a:index . '", "' . a:index . '"]'), 'v:val[0] != []')

calling <SNR>136_evaluate_expand('gutentags#statusline')

line 1:   try

line 2:     let result = eval(a:component . '()')

Searching for "autoload/gutentags.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/gutentags.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload)
fchdir() to previous dir
line 2: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim"
line 1: " gutentags.vim - Automatic ctags management for Vim

line 2: 

line 3: " Utilities {{{

line 4: 

line 5: function! gutentags#chdir(path)

line 13: 

line 14: " Throw an exception message.

line 15: function! gutentags#throw(message)

line 18: 

line 19: " Show an error message.

line 20: function! gutentags#error(message)

line 24: 

line 25: " Show a warning message.

line 26: function! gutentags#warning(message)

line 31: 

line 32: " Prints a message if debug tracing is enabled.

line 33: function! gutentags#trace(message, ...)

line 39: 

line 40: " Strips the ending slash in a path.

line 41: function! gutentags#stripslash(path)

line 44: 

line 45: " Normalizes the slashes in a path.

line 46: function! gutentags#normalizepath(path)

line 55: 

line 56: " Shell-slashes the path (opposite of `normalizepath`).

line 57: function! gutentags#shellslash(path)

line 64: 

line 65: " Gets a file path in the correct `plat` folder.

line 66: function! gutentags#get_plat_file(filename) abort

line 69: 

line 70: " Gets a file path in the resource folder.

line 71: function! gutentags#get_res_file(filename) abort

line 74: 

line 75: " Generate a path for a given filename in the cache directory.

line 76: function! gutentags#get_cachefile(root_dir, filename) abort

line 92: 

line 93: " Makes sure a given command starts with an executable that's in the PATH.

line 94: function! gutentags#validate_cmd(cmd) abort

line 100: 

line 101: " Makes an appropriate command line for use with `job_start` by converting

line 102: " a list of possibly quoted arguments into a single string on Windows, or

line 103: " into a list of unquoted arguments on Unix/Mac.

line 104: if has('win32') || has('win64')

line 105:     function! gutentags#make_args(cmd) abort

line 112: else

line 113:     function! gutentags#make_args(cmd) abort

line 130: endif

line 131: 

line 132: " Returns whether a path is rooted.

line 133: if has('win32') || has('win64')

line 134:     function! gutentags#is_path_rooted(path) abort

line 138: else

line 139:     function! gutentags#is_path_rooted(path) abort

line 142: endif

line 143: 

line 144: " }}}

line 145: 

line 146: " Gutentags Setup {{{

line 147: 

line 148: let s:known_files = []

line 149: let s:known_projects = {}

line 150: 

line 151: function! s:cache_project_root(path) abort

line 170: 

line 171: function! gutentags#get_project_file_list_cmd(path) abort

line 187: 

line 188: " Finds the first directory with a project marker by walking up from the given

line 189: " file path.

line 190: function! gutentags#get_project_root(path) abort

line 196: 

line 197: " Default implementation for finding project markers... useful when a custom

line 198: " finder (`g:gutentags_project_root_finder`) wants to fallback to the default

line 199: " behaviour.

line 200: function! gutentags#default_get_project_root(path) abort

line 241: 

line 242: " Get info on the project we're inside of.

line 243: function! gutentags#get_project_info(path) abort

line 246: 

line 247: " Setup gutentags for the current buffer.

line 248: function! gutentags#setup_gutentags() abort

line 355: 

line 356: " Set a variable on exit so that we don't complain when a job gets killed.

line 357: function! gutentags#on_vim_leave_pre() abort

line 360: 

line 361: function! gutentags#on_vim_leave() abort

line 378: 

line 379: " }}}

line 380: 

line 381: "  Job Management {{{

line 382: 

line 383: " List of queued-up jobs, and in-progress jobs, per module.

line 384: let s:update_queue = {}

line 385: let s:update_in_progress = {}

line 386: for module in g:gutentags_modules

line 387:     let s:update_queue[module] = []

line 388:     let s:update_in_progress[module] = []

line 389: endfor

line 386: for module in g:gutentags_modules

line 387:     let s:update_queue[module] = []

line 388:     let s:update_in_progress[module] = []

line 389: endfor

line 390: 

line 391: " Adds a started job to the list of ongoing updates.

line 392: " Must pass the tags file being created/updated, and the job data as

line 393: " returned by the gutentags#start_job function

line 394: function! gutentags#add_job(module, tags_file, data) abort

line 397: 

line 398: " Finds an ongoing job by tags file

line 399: function! gutentags#find_job_index_by_tags_file(module, tags_file) abort

line 409: 

line 410: " Finds an ongoing job by job data

line 411: function! gutentags#find_job_index_by_data(module, data) abort

line 421: 

line 422: " Gets the tags file of a given job

line 423: function! gutentags#get_job_tags_file(module, job_idx) abort

line 426: 

line 427: " Gets the job data of the i-th job

line 428: function! gutentags#get_job_data(module, job_idx) abort

line 431: 

line 432: " Removes the i-th job from the ongoing jobs

line 433: function! gutentags#remove_job(module, job_idx) abort

line 467: 

line 468: " Removes the job from the ongoing jobs given its job data

line 469: function! gutentags#remove_job_by_data(module, data) abort

line 473: 

line 474: " }}}

line 475: 

line 476: "  Tags File Management {{{

line 477: 

line 478: " (Re)Generate the tags file for the current buffer's file.

line 479: function! s:manual_update_tags(bang) abort

line 499: 

line 500: " (Re)Generate the tags file for a buffer that just go saved.

line 501: function! s:write_triggered_update_tags(bufno) abort

line 509: 

line 510: " Update the tags file for the current buffer's file.

line 511: " write_mode:

line 512: "   0: update the tags file if it exists, generate it otherwise.

line 513: "   1: always generate (overwrite) the tags file.

line 514: "

line 515: " queue_mode:

line 516: "   0: if an update is already in progress, report it and abort.

line 517: "   1: if an update is already in progress, abort silently.

line 518: "   2: if an update is already in progress, queue another one.

line 519: function! s:update_tags(bufno, module, write_mode, queue_mode) abort

line 576: 

line 577: " }}}

line 578: 

line 579: " Utility Functions {{{

line 580: 

line 581: function! gutentags#rescan(...)

line 594: 

line 595: function! gutentags#toggletrace(...)

line 607: 

line 608: function! gutentags#fake(...)

line 620: 

line 621: function! gutentags#default_stdout_cb(chan, msg) abort

line 624: 

line 625: function! gutentags#default_stderr_cb(chan, msg) abort

line 628: 

line 629: if has('nvim')

line 630:     " Neovim job API.

line 631:     function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort

line 634: 

line 635:     function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort

line 638: 

line 639:     function! gutentags#build_default_job_options(module) abort

line 654: 

line 655:     function! gutentags#start_job(cmd, opts) abort

line 658: else

line 659:     " Vim8 job API.

line 660:     function! gutentags#build_default_job_options(module) abort

line 669: 

line 670:     function! gutentags#start_job(cmd, opts) abort

line 673: endif

line 674: 

line 675: " Returns which modules are currently generating something for the

line 676: " current buffer.

line 677: function! gutentags#inprogress()

line 694: 

line 695: " }}}

line 696: 

line 697: " Statusline Functions {{{

line 698: 

line 699: " Prints whether a tag file is being generated right now for the current

line 700: " buffer in the status line.

line 701: "

line 702: " Arguments can be passed:

line 703: " - args 1 and 2 are the prefix and suffix, respectively, of whatever output,

line 704: "   if any, is going to be produced.

line 705: "   (defaults to empty strings)

line 706: " - arg 3 is the text to be shown if tags are currently being generated.

line 707: "   (defaults to the name(s) of the modules currently generating).

line 708: 

line 709: function! gutentags#statusline(...) abort

line 732: 

line 733: " Same as `gutentags#statusline`, but the only parameter is a `Funcref` or

line 734: " function name that will get passed the list of modules currently generating

line 735: " something. This formatter function should return the string to display in

line 736: " the status line.

line 737: 

line 738: function! gutentags#statusline_cb(fmt_cb, ...) abort

line 747: 

line 748: " }}}

line 749: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/gutentags.vim
continuing in <SNR>136_evaluate_expand
calling gutentags#statusline()

line 1:     let l:modules_in_progress = gutentags#inprogress()

calling gutentags#inprogress()

line 1:     " Does this buffer have gutentags enabled?

line 2:     if !exists('b:gutentags_files')

line 3:         return []

gutentags#inprogress returning []

continuing in gutentags#statusline

line 2:     if empty(l:modules_in_progress)

line 3:        return ''

gutentags#statusline returning ''

continuing in <SNR>136_evaluate_expand

line 3:     if type(result) == 1 && result ==# ''

line 4:       return []

:return [] made pending

line 5:     endif

line 6:   catch

line 7:     return []

line 8:   endtry

:return [] resumed

<SNR>136_evaluate_expand returning []

continuing in <SNR>136_convert

<SNR>136_convert returning []

continuing in <SNR>136_expand

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 8:   for [component, expand, type, index] in xs

line 9:     if prevtype !=# type

line 10:       for i in range(previndex + 1, max([previndex, index - 1]))

line 11:         call add(indices, string(i))

line 12:         call add(components, [])

line 13:         call add(expanded, [])

line 14:       endfor

line 15:       call add(indices, type)

line 16:       call add(components, [])

line 17:       call add(expanded, [])

line 18:     endif

line 19:     call extend(components[-1], component)

line 20:     call extend(expanded[-1], repeat([expand], len(component)))

line 21:     let prevtype = type

line 22:     let previndex = index

line 23:   endfor

line 24:   for i in range(previndex + 1, max([previndex, len(a:components) - 1]))

line 25:     call add(indices, string(i))

line 26:     call add(components, [])

line 27:     call add(expanded, [])

line 28:   endfor

line 24:   for i in range(previndex + 1, max([previndex, len(a:components) - 1]))

line 25:     call add(indices, string(i))

line 26:     call add(components, [])

line 27:     call add(expanded, [])

line 28:   endfor

line 29:   call add(indices, string(len(a:components)))

line 30:   return [components, expanded, indices]

<SNR>136_expand returning [[['lineinfo'], ['percent', 'filetype'...[0], [0, 0], []], ['0', '1', '2', '3']]

continuing in <SNR>136_line

line 13:   for i in range(len(lc))

line 14:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '#'

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

calling <SNR>136_func('LightlineMode')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineMode()}'

continuing in <SNR>136_line

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

calling <SNR>136_subseparator(['mode', 'paste'], '|', [0, 0])

line 1:   let [a, c, f, v, u] = [a:components, s:lightline.component, s:lightline.component_function, s:lightline.component_visible_condition, s:lightline.component_function_visible_condition]

line 2:   let xs = map(range(len(a:components)), 'a:expanded[v:val] ? "1" : has_key(f, a[v:val]) ? (has_key(u, a[v:val]) ? "(".u[a[v:val]].")" : (exists("*".f[a[v:val]]) ? "" : "exists(\"*".f[a[v:val]]."\")&&").f[a[v:val]]."()!=#\"\"") : has_key(v, a[v:val]) ? "(".v[a[v:val]].")" : has_key(c, a[v:val]) ? "1" : "0"')

line 5:   return '%{' . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : xs[0] . '&&(') . join(xs[1:], '||') . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : ')') . '?"' . a:subseparator . '":""}'

<SNR>136_subseparator returning '%{LightlineMode()!=#""&&((&paste))?"|":""}'

continuing in <SNR>136_line

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 22:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '_' . li[i + 1] . '#'

line 23:     let _ .= i < l + len(lc) - len(ls) && li[i] < l || li[i] != li[i + 1] ? p.left : len(lc[i]) ? s.left : ''

line 24:   endfor

line 13:   for i in range(len(lc))

line 14:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '#'

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

calling <SNR>136_func('LightlineGitBranch')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineGitBranch()}'

continuing in <SNR>136_line

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 22:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '_' . li[i + 1] . '#'

line 23:     let _ .= i < l + len(lc) - len(ls) && li[i] < l || li[i] != li[i + 1] ? p.left : len(lc[i]) ? s.left : ''

line 24:   endfor

line 13:   for i in range(len(lc))

line 14:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '#'

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

calling <SNR>136_func('LightlineReadonly')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineReadonly()}'

continuing in <SNR>136_line

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

calling <SNR>136_subseparator(['readonly', 'filename', 'modified', 'lsp_status'], '|', [0, 0, 0, 0])

line 1:   let [a, c, f, v, u] = [a:components, s:lightline.component, s:lightline.component_function, s:lightline.component_visible_condition, s:lightline.component_function_visible_condition]

line 2:   let xs = map(range(len(a:components)), 'a:expanded[v:val] ? "1" : has_key(f, a[v:val]) ? (has_key(u, a[v:val]) ? "(".u[a[v:val]].")" : (exists("*".f[a[v:val]]) ? "" : "exists(\"*".f[a[v:val]]."\")&&").f[a[v:val]]."()!=#\"\"") : has_key(v, a[v:val]) ? "(".v[a[v:val]].")" : has_key(c, a[v:val]) ? "1" : "0"')

line 5:   return '%{' . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : xs[0] . '&&(') . join(xs[1:], '||') . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : ')') . '?"' . a:subseparator . '":""}'

<SNR>136_subseparator returning '%{LightlineReadonly()!=#""&&(Lightlin...e)||LightlineLspStatus()!=#"")?"|":""}'

continuing in <SNR>136_line

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

calling <SNR>136_func('LightlineFilename')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineFilename()}'

continuing in <SNR>136_line

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

calling <SNR>136_subseparator(['filename', 'modified', 'lsp_status'], '|', [0, 0, 0])

line 1:   let [a, c, f, v, u] = [a:components, s:lightline.component, s:lightline.component_function, s:lightline.component_visible_condition, s:lightline.component_function_visible_condition]

line 2:   let xs = map(range(len(a:components)), 'a:expanded[v:val] ? "1" : has_key(f, a[v:val]) ? (has_key(u, a[v:val]) ? "(".u[a[v:val]].")" : (exists("*".f[a[v:val]]) ? "" : "exists(\"*".f[a[v:val]]."\")&&").f[a[v:val]]."()!=#\"\"") : has_key(v, a[v:val]) ? "(".v[a[v:val]].")" : has_key(c, a[v:val]) ? "1" : "0"')

line 5:   return '%{' . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : xs[0] . '&&(') . join(xs[1:], '||') . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : ')') . '?"' . a:subseparator . '":""}'

<SNR>136_subseparator returning '%{LightlineFilename()!=#""&&((&modifi...e)||LightlineLspStatus()!=#"")?"|":""}'

continuing in <SNR>136_line

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

calling <SNR>136_subseparator(['modified', 'lsp_status'], '|', [0, 0])

line 1:   let [a, c, f, v, u] = [a:components, s:lightline.component, s:lightline.component_function, s:lightline.component_visible_condition, s:lightline.component_function_visible_condition]

line 2:   let xs = map(range(len(a:components)), 'a:expanded[v:val] ? "1" : has_key(f, a[v:val]) ? (has_key(u, a[v:val]) ? "(".u[a[v:val]].")" : (exists("*".f[a[v:val]]) ? "" : "exists(\"*".f[a[v:val]]."\")&&").f[a[v:val]]."()!=#\"\"") : has_key(v, a[v:val]) ? "(".v[a[v:val]].")" : has_key(c, a[v:val]) ? "1" : "0"')

line 5:   return '%{' . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : xs[0] . '&&(') . join(xs[1:], '||') . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : ')') . '?"' . a:subseparator . '":""}'

<SNR>136_subseparator returning '%{(&modified||!&modifiable)&&(LightlineLspStatus()!=#"")?"|":""}'

continuing in <SNR>136_line

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

calling <SNR>136_func('LightlineLspStatus')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineLspStatus()}'

continuing in <SNR>136_line

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 22:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '_' . li[i + 1] . '#'

line 23:     let _ .= i < l + len(lc) - len(ls) && li[i] < l || li[i] != li[i + 1] ? p.left : len(lc[i]) ? s.left : ''

line 24:   endfor

line 13:   for i in range(len(lc))

line 14:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '#'

line 15:     for j in range(len(lc[i]))

line 16:       let x = le[i][j] ? lc[i][j] : has_key(f, lc[i][j]) ? s:func(f[lc[i][j]]) : get(c, lc[i][j], '')

line 17:       let _ .= has_key(t, lc[i][j]) && t[lc[i][j]] ==# 'raw' || get(w, lc[i][j]) || le[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 18:       if j < len(lc[i]) - 1 && s.left !=# ''

line 19:         let _ .= s:subseparator(lc[i][(j):], s.left, le[i][(j):])

line 20:       endif

line 21:     endfor

line 22:     let _ .= '%#LightlineLeft_' . mode . '_' . li[i] . '_' . li[i + 1] . '#'

line 23:     let _ .= i < l + len(lc) - len(ls) && li[i] < l || li[i] != li[i + 1] ? p.left : len(lc[i]) ? s.left : ''

line 24:   endfor

line 25:   let _ .= '%#LightlineMiddle_' . mode . '#%='

line 26:   for i in range(len(rc) - 1, 0, -1)

line 27:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '_' . ri[i + 1] . '#'

line 28:     let _ .= i < r + len(rc) - len(rs) && ri[i] < r || ri[i] != ri[i + 1] ? p.right : len(rc[i]) ? s.right : ''

line 29:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '#'

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 37:   endfor

line 26:   for i in range(len(rc) - 1, 0, -1)

line 27:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '_' . ri[i + 1] . '#'

line 28:     let _ .= i < r + len(rc) - len(rs) && ri[i] < r || ri[i] != ri[i + 1] ? p.right : len(rc[i]) ? s.right : ''

line 29:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '#'

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

calling <SNR>136_subseparator(['percent', 'filetype'], '|', [0, 0])

line 1:   let [a, c, f, v, u] = [a:components, s:lightline.component, s:lightline.component_function, s:lightline.component_visible_condition, s:lightline.component_function_visible_condition]

line 2:   let xs = map(range(len(a:components)), 'a:expanded[v:val] ? "1" : has_key(f, a[v:val]) ? (has_key(u, a[v:val]) ? "(".u[a[v:val]].")" : (exists("*".f[a[v:val]]) ? "" : "exists(\"*".f[a[v:val]]."\")&&").f[a[v:val]]."()!=#\"\"") : has_key(v, a[v:val]) ? "(".v[a[v:val]].")" : has_key(c, a[v:val]) ? "1" : "0"')

line 5:   return '%{' . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : xs[0] . '&&(') . join(xs[1:], '||') . (xs[0] ==# '1' || xs[0] ==# '(1)' ? '' : ')') . '?"' . a:subseparator . '":""}'

<SNR>136_subseparator returning '%{LightlineFiletype()!=#""?"|":""}'

continuing in <SNR>136_line

line 35:       endif

line 36:     endfor

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

calling <SNR>136_func('LightlineFiletype')

line 1:   return exists('*' . a:name) ? '%{' . a:name . '()}' : '%{exists("*' . a:name . '")?' . a:name . '():""}'

<SNR>136_func returning '%{LightlineFiletype()}'

continuing in <SNR>136_line

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 37:   endfor

line 26:   for i in range(len(rc) - 1, 0, -1)

line 27:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '_' . ri[i + 1] . '#'

line 28:     let _ .= i < r + len(rc) - len(rs) && ri[i] < r || ri[i] != ri[i + 1] ? p.right : len(rc[i]) ? s.right : ''

line 29:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '#'

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 37:   endfor

line 26:   for i in range(len(rc) - 1, 0, -1)

line 27:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '_' . ri[i + 1] . '#'

line 28:     let _ .= i < r + len(rc) - len(rs) && ri[i] < r || ri[i] != ri[i + 1] ? p.right : len(rc[i]) ? s.right : ''

line 29:     let _ .= '%#LightlineRight_' . mode . '_' . ri[i] . '#'

line 30:     for j in range(len(rc[i]))

line 31:       let x = re[i][j] ? rc[i][j] : has_key(f, rc[i][j]) ? s:func(f[rc[i][j]]) : get(c, rc[i][j], '')

line 32:       let _ .= has_key(t, rc[i][j]) && t[rc[i][j]] ==# 'raw' || get(w, rc[i][j]) || re[i][j] ==# 2 || x ==# '' ? x : '%( ' . x . ' %)'

line 33:       if j < len(rc[i]) - 1 && s.right !=# ''

line 34:         let _ .= s:subseparator(rc[i][(j):], s.right, re[i][(j):])

line 35:       endif

line 36:     endfor

line 37:   endfor

line 38:   return _

<SNR>136_line returning '%{lightline#link()}%#LightlineLeft_ac...ghtlineRight_active_0#%( %3l:%-2v%< %)'

continuing in lightline#statusline

lightline#statusline returning '%{lightline#link()}%#LightlineLeft_ac...ghtlineRight_active_0#%( %3l:%-2v%< %)'

continuing in lightline#update

line 10:     for n in range(1, winnr('$'))

line 11:       call setwinvar(n, '&statusline', s[n!=w])

line 12:     endfor

line 10:     for n in range(1, winnr('$'))

line 11:       call setwinvar(n, '&statusline', s[n!=w])

line 12:     endfor

line 13:   endif

lightline#update returning #0

continuing in ColorScheme Autocommands for "*"

Executing:  call lightline#highlight() | endif

calling lightline#highlight()

line 1:   let [c, f] = [s:lightline.palette, s:lightline.mode_fallback]

line 2:   let [s:lightline.llen, s:lightline.rlen] = [len(c.normal.left), len(c.normal.right)]

line 3:   let [s:lightline.tab_llen, s:lightline.tab_rlen] = [len(has_key(get(c, 'tabline', {}), 'left') ? c.tabline.left : c.normal.left), len(has_key(get(c, 'tabline', {}), 'right') ? c.tabline.right : c.normal.right)]

line 4:   let types = map(s:uniq(sort(filter(values(s:lightline.component_type), 'v:val !=# "raw"'))), '[v:val, 1]')

line 5:   let modes = a:0 ? [a:1] : extend(['normal', 'insert', 'replace', 'visual', 'inactive', 'command', 'select', 'tabline'], exists(':terminal') == 2 ? ['terminal'] : [])

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#2848a9', 188, 25])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_0 guifg=#e4dcd4 guibg=#2848a9 ctermfg=188 ctermbg=25 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_0_1 guifg=#2848a9 guibg=#acb0c7 ctermfg=25 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_0_tabsel guifg=#2848a9 guibg=#aab0ad ctermfg=25 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#acb0c7', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_1 guifg=#643f61 guibg=#acb0c7 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_1_2 guifg=#acb0c7 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_1_tabsel guifg=#acb0c7 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_normal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_0 guifg=#aab0ad guibg=#2848a9 ctermfg=145 ctermbg=25

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_1 guifg=#aab0ad guibg=#acb0c7 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_normal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#acb0c7', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_0 guifg=#643f61 guibg=#acb0c7 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_0_1 guifg=#acb0c7 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_0_tabsel guifg=#acb0c7 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_normal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_0 guifg=#aab0ad guibg=#acb0c7 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_normal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_normal guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#396847', 188, 59])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_insert_0 guifg=#e4dcd4 guibg=#396847 ctermfg=188 ctermbg=59 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_0_1 guifg=#396847 guibg=#b1b9aa ctermfg=59 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_0_tabsel guifg=#396847 guibg=#aab0ad ctermfg=59 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#b1b9aa', 59, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_insert_1 guifg=#643f61 guibg=#b1b9aa ctermfg=59 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_1_2 guifg=#b1b9aa guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_1_tabsel guifg=#b1b9aa guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_insert_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_insert_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_tabsel_0 guifg=#aab0ad guibg=#396847 ctermfg=145 ctermbg=59

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_tabsel_1 guifg=#aab0ad guibg=#b1b9aa ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_insert_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#b1b9aa', 59, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_insert_0 guifg=#643f61 guibg=#b1b9aa ctermfg=59 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_0_1 guifg=#b1b9aa guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_0_tabsel guifg=#b1b9aa guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_insert_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_insert_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_insert_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_tabsel_0 guifg=#aab0ad guibg=#b1b9aa ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_insert_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_insert guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#a5222f', 188, 125])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_replace_0 guifg=#e4dcd4 guibg=#a5222f ctermfg=188 ctermbg=125 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_0_1 guifg=#a5222f guibg=#d1a4a3 ctermfg=125 ctermbg=181

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_0_tabsel guifg=#a5222f guibg=#aab0ad ctermfg=125 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#d1a4a3', 59, 181])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_replace_1 guifg=#643f61 guibg=#d1a4a3 ctermfg=59 ctermbg=181 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_1_2 guifg=#d1a4a3 guibg=#e4dcd4 ctermfg=181 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_1_tabsel guifg=#d1a4a3 guibg=#aab0ad ctermfg=181 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_replace_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_replace_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_tabsel_0 guifg=#aab0ad guibg=#a5222f ctermfg=145 ctermbg=125

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_tabsel_1 guifg=#aab0ad guibg=#d1a4a3 ctermfg=145 ctermbg=181

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_replace_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#d1a4a3', 59, 181])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_replace_0 guifg=#643f61 guibg=#d1a4a3 ctermfg=59 ctermbg=181 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_0_1 guifg=#d1a4a3 guibg=#e4dcd4 ctermfg=181 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_0_tabsel guifg=#d1a4a3 guibg=#aab0ad ctermfg=181 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_replace_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_replace_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_replace_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_tabsel_0 guifg=#aab0ad guibg=#d1a4a3 ctermfg=145 ctermbg=181

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_replace_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_replace guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#6e33ce', 188, 62])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_visual_0 guifg=#e4dcd4 guibg=#6e33ce ctermfg=188 ctermbg=62 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_0_1 guifg=#6e33ce guibg=#c1a9d2 ctermfg=62 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_0_tabsel guifg=#6e33ce guibg=#aab0ad ctermfg=62 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#c1a9d2', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_visual_1 guifg=#643f61 guibg=#c1a9d2 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_1_2 guifg=#c1a9d2 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_1_tabsel guifg=#c1a9d2 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_visual_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_visual_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_tabsel_0 guifg=#aab0ad guibg=#6e33ce ctermfg=145 ctermbg=62

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_tabsel_1 guifg=#aab0ad guibg=#c1a9d2 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_visual_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#c1a9d2', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_visual_0 guifg=#643f61 guibg=#c1a9d2 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_0_1 guifg=#c1a9d2 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_0_tabsel guifg=#c1a9d2 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_visual_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_visual_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_visual_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_tabsel_0 guifg=#aab0ad guibg=#c1a9d2 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_visual_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_visual guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#824d5b', 188, 95])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_inactive_0 guifg=#e4dcd4 guibg=#824d5b ctermfg=188 ctermbg=95 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_inactive_0_1 guifg=#824d5b guibg=#e4dcd4 ctermfg=95 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_inactive_0_tabsel guifg=#824d5b guibg=#aab0ad ctermfg=95 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_inactive_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_inactive_tabsel_0 guifg=#aab0ad guibg=#824d5b ctermfg=145 ctermbg=95

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_inactive_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_inactive_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#c7b1b0', 59, 181])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_inactive_0 guifg=#643f61 guibg=#c7b1b0 ctermfg=59 ctermbg=181 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_0_1 guifg=#c7b1b0 guibg=#e4dcd4 ctermfg=181 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_0_tabsel guifg=#c7b1b0 guibg=#aab0ad ctermfg=181 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_inactive_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_inactive_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_tabsel_0 guifg=#aab0ad guibg=#c7b1b0 ctermfg=145 ctermbg=181

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_inactive_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_inactive guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#ac5402', 188, 130])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_command_0 guifg=#e4dcd4 guibg=#ac5402 ctermfg=188 ctermbg=130 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_0_1 guifg=#ac5402 guibg=#d3b395 ctermfg=130 ctermbg=180

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_0_tabsel guifg=#ac5402 guibg=#aab0ad ctermfg=130 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#d3b395', 59, 180])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_command_1 guifg=#643f61 guibg=#d3b395 ctermfg=59 ctermbg=180 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_1_2 guifg=#d3b395 guibg=#e4dcd4 ctermfg=180 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_1_tabsel guifg=#d3b395 guibg=#aab0ad ctermfg=180 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_command_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_command_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_tabsel_0 guifg=#aab0ad guibg=#ac5402 ctermfg=145 ctermbg=130

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_tabsel_1 guifg=#aab0ad guibg=#d3b395 ctermfg=145 ctermbg=180

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_command_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#d3b395', 59, 180])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_command_0 guifg=#643f61 guibg=#d3b395 ctermfg=59 ctermbg=180 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_0_1 guifg=#d3b395 guibg=#e4dcd4 ctermfg=180 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_0_tabsel guifg=#d3b395 guibg=#aab0ad ctermfg=180 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_command_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_command_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_command_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_tabsel_0 guifg=#aab0ad guibg=#d3b395 ctermfg=145 ctermbg=180

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_command_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_command guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#6e33ce', 188, 62])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_select_0 guifg=#e4dcd4 guibg=#6e33ce ctermfg=188 ctermbg=62 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_0_1 guifg=#6e33ce guibg=#c1a9d2 ctermfg=62 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_0_tabsel guifg=#6e33ce guibg=#aab0ad ctermfg=62 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#c1a9d2', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_select_1 guifg=#643f61 guibg=#c1a9d2 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_1_2 guifg=#c1a9d2 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_1_tabsel guifg=#c1a9d2 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_select_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_select_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_tabsel_0 guifg=#aab0ad guibg=#6e33ce ctermfg=145 ctermbg=62

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_tabsel_1 guifg=#aab0ad guibg=#c1a9d2 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_select_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#c1a9d2', 59, 146])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_select_0 guifg=#643f61 guibg=#c1a9d2 ctermfg=59 ctermbg=146 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_0_1 guifg=#c1a9d2 guibg=#e4dcd4 ctermfg=146 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_0_tabsel guifg=#c1a9d2 guibg=#aab0ad ctermfg=146 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_select_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_select_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_select_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_tabsel_0 guifg=#aab0ad guibg=#c1a9d2 ctermfg=145 ctermbg=146

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_select_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_select guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#824d5b', '#dbd1dd', 95, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_tabline_0 guifg=#824d5b guibg=#dbd1dd ctermfg=95 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_tabline_0_1 guifg=#dbd1dd guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_tabline_0_tabsel guifg=#dbd1dd guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_tabline_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_tabline_tabsel_0 guifg=#aab0ad guibg=#dbd1dd ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_tabline_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_tabline_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#a5222f', '#e4dcd4', 125, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_tabline_0 guifg=#a5222f guibg=#e4dcd4 ctermfg=125 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_tabline_0_1 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_tabline_0_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_tabline_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_tabline_tabsel_0 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_tabline_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_tabline_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#e4dcd4', '#e4dcd4', 188, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_tabline guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#e4dcd4', '#396847', 188, 59])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_terminal_0 guifg=#e4dcd4 guibg=#396847 ctermfg=188 ctermbg=59 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_0_1 guifg=#396847 guibg=#b1b9aa ctermfg=59 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_0_tabsel guifg=#396847 guibg=#aab0ad ctermfg=59 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#b1b9aa', 59, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_terminal_1 guifg=#643f61 guibg=#b1b9aa ctermfg=59 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_1_2 guifg=#b1b9aa guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_1_tabsel guifg=#b1b9aa guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_terminal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineLeft_terminal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_tabsel_0 guifg=#aab0ad guibg=#396847 ctermfg=145 ctermbg=59

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_tabsel_1 guifg=#aab0ad guibg=#b1b9aa ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineLeft_terminal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#b1b9aa', 59, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_terminal_0 guifg=#643f61 guibg=#b1b9aa ctermfg=59 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_0_1 guifg=#b1b9aa guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_0_tabsel guifg=#b1b9aa guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_terminal_1 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_1_2 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_1_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_terminal_2 guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_2_3 guifg=#e4dcd4 guibg=#e4dcd4 ctermfg=188 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_2_tabsel guifg=#e4dcd4 guibg=#aab0ad ctermfg=188 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

calling <SNR>136_term(['#3d2b5a', '#aab0ad', 53, 145])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 18: hi LightlineRight_terminal_tabsel guifg=#3d2b5a guibg=#aab0ad ctermfg=53 ctermbg=145 

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_tabsel_0 guifg=#aab0ad guibg=#b1b9aa ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_tabsel_1 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_tabsel_2 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_tabsel_3 guifg=#aab0ad guibg=#e4dcd4 ctermfg=145 ctermbg=188

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 23: hi LightlineRight_terminal_tabsel_tabsel guifg=#aab0ad guibg=#aab0ad ctermfg=145 ctermbg=145

line 24:           endif

line 25:         endfor

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

calling <SNR>136_term(['#643f61', '#e4dcd4', 59, 188])

line 1:   return get(a:p, 4) !=# '' ? 'term='.a:p[4].' cterm='.a:p[4].' gui='.a:p[4] : ''

<SNR>136_term returning ''

continuing in lightline#highlight

line 28: hi LightlineMiddle_terminal guifg=#643f61 guibg=#e4dcd4 ctermfg=59 ctermbg=188 

line 29:   endfor

line 6:   for mode in modes

line 7:     let s:highlight[mode] = 1

line 8:     let d = has_key(c, mode) ? mode : has_key(f, mode) && has_key(c, f[mode]) ? f[mode] : 'normal'

line 9:     let left = d ==# 'tabline' ? s:lightline.tabline.left : d ==# 'inactive' ? s:lightline.inactive.left : s:lightline.active.left

line 10:     let right = d ==# 'tabline' ? s:lightline.tabline.right : d ==# 'inactive' ? s:lightline.inactive.right : s:lightline.active.right

line 11:     let ls = has_key(get(c, d, {}), 'left') ? c[d].left : has_key(f, d) && has_key(get(c, f[d], {}), 'left') ? c[f[d]].left : c.normal.left

line 12:     let ms = has_key(get(c, d, {}), 'middle') ? c[d].middle[0] : has_key(f, d) && has_key(get(c, f[d], {}), 'middle') ? c[f[d]].middle[0] : c.normal.middle[0]

line 13:     let rs = has_key(get(c, d, {}), 'right') ? c[d].right : has_key(f, d) && has_key(get(c, f[d], {}), 'right') ? c[f[d]].right : c.normal.right

line 14:     for [p, l, zs] in [['Left', len(left), ls], ['Right', len(right), rs]]

line 15:       for [i, t] in map(range(0, l), '[v:val, 0]') + types

line 16:         if i < l || i < 1

line 17:           let r = t ? (has_key(get(c, d, []), i) ? c[d][i][0] : has_key(get(c, 'tabline', {}), i) ? c.tabline[i][0] : get(c.normal, i, zs)[0]) : get(zs, i, ms)

line 18:           exec printf('hi Lightline%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', p, mode, i, r[0], r[1], r[2], r[3], s:term(r))

line 19:         endif

line 20:         for [j, s] in map(range(0, l), '[v:val, 0]') + types

line 21:           if i + 1 == j || t || s && i != l

line 22:             let q = s ? (has_key(get(c, d, []), j) ? c[d][j][0] : has_key(get(c, 'tabline', {}), j) ? c.tabline[j][0] : get(c.normal, j, zs)[0]) : (j != l ? get(zs, j, ms) :ms)

line 23:             exec printf('hi Lightline%s_%s_%s_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s', p, mode, i, j, r[1], q[1], r[3], q[3])

line 24:           endif

line 25:         endfor

line 26:       endfor

line 27:     endfor

line 28:     exec printf('hi LightlineMiddle_%s guifg=%s guibg=%s ctermfg=%s ctermbg=%s %s', mode, ms[0], ms[1], ms[2], ms[3], s:term(ms))

line 29:   endfor

line 30:   if !a:0 | let s:mode = '' | endif

line 30:  let s:mode = '' | endif

line 30:  endif

lightline#highlight returning #0

continuing in ColorScheme Autocommands for "*"

Executing:  endif

Executing ColorScheme Autocommands for "*"
autocommand call gitgutter#highlight#define_highlights()

Executing: call gitgutter#highlight#define_highlights()

calling gitgutter#highlight#define_highlights()

line 1:   let [guibg, ctermbg] = s:get_background_colors('SignColumn')

calling <SNR>123_get_background_colors('SignColumn')

line 1:   let ctermbg = s:get_hl(a:group, 'bg', 'cterm')

calling <SNR>123_get_hl('SignColumn', 'bg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '7'

continuing in <SNR>123_get_background_colors

line 2:   let guibg = s:get_hl(a:group, 'bg', 'gui')

calling <SNR>123_get_hl('SignColumn', 'bg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_background_colors

line 3:   return [guibg, ctermbg]

<SNR>123_get_background_colors returning ['NONE', '7']

continuing in gitgutter#highlight#define_highlights

line 2: 

line 3:   " Highlights used by the signs.

line 4: 

line 5:   " When they are invisible.

line 6:   execute "highlight GitGutterAddInvisible    guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 6: highlight GitGutterAddInvisible    guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 7:   execute "highlight GitGutterChangeInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 7: highlight GitGutterChangeInvisible guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 8:   execute "highlight GitGutterDeleteInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg

line 8: highlight GitGutterDeleteInvisible guifg=bg guibg=NONE ctermfg=7 ctermbg=7

line 9:   highlight default link GitGutterChangeDeleteInvisible GitGutterChangeInvisible

line 10: 

line 11:   " When they are visible.

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterAdd')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterAdd', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterAdd', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#396847'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#396847', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterChange')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterChange', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterChange', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#ac5402'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#ac5402', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

calling <SNR>123_get_foreground_colors('GitGutterDelete')

line 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')

calling <SNR>123_get_hl('GitGutterDelete', 'fg', 'cterm')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

<SNR>123_get_hl returning 'NONE'

continuing in <SNR>123_get_foreground_colors

line 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')

calling <SNR>123_get_hl('GitGutterDelete', 'fg', 'gui')

line 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)

line 2:   if empty(r) || r == -1

line 3:     return 'NONE'

line 4:   endif

line 5:   return r

<SNR>123_get_hl returning '#a5222f'

continuing in <SNR>123_get_foreground_colors

line 3:   return [guifg, ctermfg]

<SNR>123_get_foreground_colors returning ['#a5222f', 'NONE']

continuing in gitgutter#highlight#define_highlights

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 12:   for type in ["Add", "Change", "Delete"]

line 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE']

line 14:       if g:gitgutter_set_sign_backgrounds

line 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg

line 16:       endif

line 17:       continue

line 18:     elseif s:useful_diff_colours()

line 19:       let [guifg, ctermfg] = s:get_foreground_colors('Diff'.type)

line 20:     else

line 21:       let [guifg, ctermfg] = s:get_foreground_fallback_colors(type)

line 22:     endif

line 23:     execute "highlight GitGutter".type." guifg=".guifg." guibg=".guibg." ctermfg=".ctermfg." ctermbg=".ctermbg

line 24:   endfor

line 25: 

line 26:   if hlexists("GitGutterChangeDelete") && g:gitgutter_set_sign_backgrounds

line 27:     execute "highlight GitGutterChangeDelete guibg=".guibg." ctermbg=".ctermbg

line 28:   endif

line 29: 

line 30:   highlight default link GitGutterChangeDelete GitGutterChange

line 31: 

line 32:   " Highlights used for the whole line.

line 33: 

line 34:   highlight default link GitGutterAddLine          DiffAdd

line 35:   highlight default link GitGutterChangeLine       DiffChange

line 36:   highlight default link GitGutterDeleteLine       DiffDelete

line 37:   highlight default link GitGutterChangeDeleteLine GitGutterChangeLine

line 38: 

line 39:   highlight default link GitGutterAddLineNr          CursorLineNr

line 40:   highlight default link GitGutterChangeLineNr       CursorLineNr

line 41:   highlight default link GitGutterDeleteLineNr       CursorLineNr

line 42:   highlight default link GitGutterChangeDeleteLineNr GitGutterChangeLineNr

line 43: 

line 44:   " Highlights used intra line.

line 45:   highlight default GitGutterAddIntraLine    gui=reverse cterm=reverse

line 46:   highlight default GitGutterDeleteIntraLine gui=reverse cterm=reverse

line 47:   " Set diff syntax colours (used in the preview window) - diffAdded,diffChanged,diffRemoved -

line 48:   " to match the signs, if not set aleady.

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

line 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']]

line 50:     if !hlexists('diff'.dtype)

line 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)

line 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"

line 53:     endif

line 54:   endfor

gitgutter#highlight#define_highlights returning #0

continuing in ColorScheme Autocommands for "*"

Executing ColorScheme Autocommands for "*"
autocommand call s:on_refresh_event()

Executing: call s:on_refresh_event()

calling <SNR>127_on_refresh_event()

line 1:     let b:hexokinase_is_on = get(b:, 'hexokinase_is_on', 0)

line 2:     let b:hexokinase_is_disabled = get(b:, 'hexokinase_is_disabled', 0)

line 3:     if b:hexokinase_is_on

line 4:         call hexokinase#v2#scraper#on()

line 5:         return

line 6:     endif

line 7: 

line 8:     if b:hexokinase_is_disabled

line 9:         return

line 10:     endif

line 11: 

line 12:     if g:Hexokinase_termDisabled && &buftype ==# 'terminal'

line 13:         return

line 14:     endif

line 15: 

line 16:     if !empty(g:Hexokinase_ftDisabled)

line 17:         if index(g:Hexokinase_ftDisabled, &filetype) > -1

line 18:             return

line 19:         endif

line 20:     elseif has_key(g:, 'Hexokinase_ftEnabled')

line 21:         if index(g:Hexokinase_ftEnabled, &filetype) == -1

line 22:             return

line 23:         endif

line 24:     endif

line 25: 

line 26:     call hexokinase#v2#scraper#on()

Searching for "autoload/hexokinase/v2/scraper.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.conf
Searching for "/Users/piotr/.config/vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/hexokinase/v2/scraper.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2/scraper.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2)
fchdir() to previous dir
line 26: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2/scraper.vim"
line 1: " Used for Vim because it has a shit api

line 2: let s:chan_infos = {}

line 3: 

line 4: fun! hexokinase#v2#scraper#toggle() abort

line 12: 

line 13: fun! hexokinase#v2#scraper#on() abort

line 69: 

line 70: fun! hexokinase#v2#scraper#off() abort

line 76: 

line 77: fun! s:clear_hl(bufnr) abort

line 82: 

line 83: fun! s:cancel_cur_job() abort

line 96: 

line 97: fun! s:on_stdout_vim(chan, line) abort

line 103: 

line 104: fun! s:on_exit_vim(chan) abort

line 113: 

line 114: fun! s:on_stdout(id, data, event) abort dict

line 122: 

line 123: fun! s:on_stderr(id, data, event) abort dict

line 128: 

line 129: fun! s:on_exit(id, status, event) abort dict

line 140: 

line 141: fun! s:parse_colour(line) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/v2/scraper.vim
continuing in <SNR>127_on_refresh_event
calling hexokinase#v2#scraper#on()

line 1:     call s:cancel_cur_job()

calling <SNR>142_cancel_cur_job()

line 1:     try

line 2:         if has('nvim')

line 3:             let b:hexokinase_job_id = get(b:, 'hexokinase_job_id', -1)

line 4:             call chanclose(b:hexokinase_job_id)

line 5:         else

line 6:             if has_key(b:, 'hexokinase_job')

line 7:                 call ch_close(b:hexokinase_job)

line 8:             endif

line 9:         endif

line 10:     catch /E90[06]/

line 11:     endtry

<SNR>142_cancel_cur_job returning #0

continuing in hexokinase#v2#scraper#on

line 2: 

line 3:     let b:hexokinase_is_on = 1

line 4:     let b:hexokinase_is_disabled = 0

line 5:     let tmpname = hexokinase#utils#tmpname()

Searching for "autoload/hexokinase/utils.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vi
Searching for "/Users/piotr/.config/vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/hexokinase/utils.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/utils.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase)
fchdir() to previous dir
line 5: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/utils.vim"
line 1: let s:hexadecimals = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']

line 5: 

line 6: fun! hexokinase#utils#get_colour_pattern(patterns_list) abort

line 9: 

line 10: " Combine the filetype specific pattern/processor map with the global one

line 11: fun! hexokinase#utils#get_pat_proc_map() abort

line 19: 

line 20: " rgbList should be a list of numbers

line 21: fun! hexokinase#utils#rgb_to_hex(rgbList) abort

line 34: 

line 35: " returns a list of numbers

line 36: fun! hexokinase#utils#hex_to_rgb(hex) abort

line 46: 

line 47: fun! hexokinase#utils#get_background_rgb() abort

line 50: 

line 51: fun! hexokinase#utils#get_background_hex() abort

line 60: 

line 61: fun! hexokinase#utils#valid_rgb(rgbList) abort

line 69: 

line 70: fun! hexokinase#utils#apply_alpha_to_rgb(primary_rgb, alpha) abort

line 79: 

line 80: fun! hexokinase#utils#tmpname() abort

line 98: 

line 99: fun! hexokinase#utils#getPatModifications() abort

line 137: 

line 138: fun! hexokinase#utils#create_fg_hl(hex) abort

line 143: 

line 144: fun! hexokinase#utils#create_bg_hl(hex) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/hexokinase/utils.vim
continuing in hexokinase#v2#scraper#on
calling hexokinase#utils#tmpname()

line 1:     let l:clear_tempdir = 0

line 2: 

line 3:     if exists('$TMPDIR') && empty($TMPDIR)

line 4:         let l:clear_tempdir = 1

line 5:         let $TMPDIR = '/tmp'

line 6:     endif

line 7: 

line 8:     try

line 9:         let l:name = tempname()

line 10:     finally

line 11:         if l:clear_tempdir

line 12:             let $TMPDIR = ''

line 13:         endif

line 14:     endtry

line 15: 

line 16:     return l:name

hexokinase#utils#tmpname returning '/var/folders/qb/tc6wn3v12hq54z88ky3d66bw0000gn/T/v6kux21/1'

continuing in hexokinase#v2#scraper#on

line 6:     let fail = writefile(getbufline(bufnr('%'), 1, '$'), tmpname)

line 7:     if fail

line 8:         let b:hexokinase_is_on = 0

line 9:     else

line 10:         if has('nvim')

line 11:             let opts = { 'tmpname': tmpname, 'on_stdout': function('s:on_stdout'), 'on_stderr': function('s:on_stderr'), 'on_exit': function('s:on_exit'), 'bufnr': bufnr('%'), 'colours': [] }

line 19:         else

line 20:             let opts = { 'out_cb': function('s:on_stdout_vim'), 'close_cb': function('s:on_exit_vim'), }

line 24:         endif

line 25:         let cmd = [g:Hexokinase_executable_path, '-simplified', '-files', tmpname]

line 26:         " Neovim has multiple sign columns, in which case we don't want a

line 27:         " reversed output.

line 28:         if get(g:, 'Hexokinase_prioritizeHead', 1) && get(b:, 'Hexokinase_prioritizeHead', 1) && (index(g:Hexokinase_highlighters, 'sign_column') == -1 || &signcolumn !~# '\v(auto|yes):[2-9]')

line 31:             call add(cmd, '-r')

line 32:         endif

line 33:         call extend(cmd, hexokinase#utils#getPatModifications())

calling hexokinase#utils#getPatModifications()

line 1:     if has_key(g:Hexokinase_ftOptOutPatterns, &filetype)

line 2:         let dp = g:Hexokinase_ftOptOutPatterns[&filetype]

line 3:         if type(dp) == 1

line 4:             return ['-dp', substitute(dp, '\s', '', 'g')]

line 5:         elseif type(dp) == 3

line 6:             return ['-dp', join(dp, ',')]

line 7:         else

line 8:             echohl Error | echom printf('ERROR: g:Hexokinase_ftOptOutPatterns[%s] must be a string or a list', &filetype) | echohl None

line 8:  echom printf('ERROR: g:Hexokinase_ftOptOutPatterns[%s] must be a string or a list', &filetype) | echohl None

line 8:  echohl None

line 9:         endif

line 10:     elseif has_key(g:Hexokinase_ftOptInPatterns, &filetype)

line 11:         let ep = g:Hexokinase_ftOptInPatterns[&filetype]

line 12:         if type(ep) == 1

line 13:             return ['-ep', substitute(ep, '\s', '', 'g')]

line 14:         elseif type(ep) == 3

line 15:             return ['-ep', join(ep, ',')]

line 16:         else

line 17:             echohl Error | echom printf('ERROR: g:Hexokinase_ftOptInPatterns[%s] must be a string or a list', &filetype) | echohl None

line 17:  echom printf('ERROR: g:Hexokinase_ftOptInPatterns[%s] must be a string or a list', &filetype) | echohl None

line 17:  echohl None

line 18:         endif

line 19:     elseif !empty(g:Hexokinase_optOutPatterns)

line 20:         if type(g:Hexokinase_optOutPatterns) == 1

line 21:             return ['-dp', substitute(g:Hexokinase_optOutPatterns, '\s', '', 'g')]

line 22:         elseif type(g:Hexokinase_optOutPatterns) == 3

line 23:             return ['-dp', join(g:Hexokinase_optOutPatterns, ',')]

line 24:         else

line 25:             echohl Error | echom 'ERROR: g:Hexokinase_optOutPatterns must be a string or a list' | echohl None

line 25:  echom 'ERROR: g:Hexokinase_optOutPatterns must be a string or a list' | echohl None

line 25:  echohl None

line 26:         endif

line 27:     elseif !empty(g:Hexokinase_optInPatterns)

line 28:         if type(g:Hexokinase_optInPatterns) == 1

line 29:             return ['-ep', substitute(g:Hexokinase_optInPatterns, '\s', '', 'g')]

hexokinase#utils#getPatModifications returning ['-ep', 'full_hex,rgb,rgba,hsl,hsla,colour_names']

continuing in hexokinase#v2#scraper#on

line 34:         call add(cmd, '-bg')

line 35:         call add(cmd, hexokinase#utils#get_background_hex())

calling hexokinase#utils#get_background_hex()

line 1:     if !empty(get(g:, 'Hexokinase_alpha_bg', ''))

line 2:         return g:Hexokinase_alpha_bg

line 3:     elseif len(g:Hexokinase_highlighters) == 1 && g:Hexokinase_highlighters[0] ==# 'sign_column'

line 4:         return synIDattr(hlID('SignColumn'), 'bg')

hexokinase#utils#get_background_hex returning ''

continuing in hexokinase#v2#scraper#on

line 36:         if !empty(g:Hexokinase_palettes)

line 37:             call add(cmd, '-palettes')

line 38:             call add(cmd, join(g:Hexokinase_palettes, ','))

line 39:         endif

line 40:         if get(g:, 'Hexokinase_checkBoundary', 1)

line 41:             call add(cmd, '-boundary')

line 42:         endif

line 43: 

line 44:         if has('nvim')

line 45:             let b:hexokinase_job_id = jobstart(cmd, opts)

line 46:         else

line 47:             let b:hexokinase_job = job_start(cmd, opts)

line 48:             let s:chan_infos[ch_info(job_getchannel(b:hexokinase_job)).id] = {     'tmpname': tmpname,     'colours': [],     'bufnr': bufnr('%') }

line 53:         endif

line 54:     endif

hexokinase#v2#scraper#on returning #0

continuing in <SNR>127_on_refresh_event

<SNR>127_on_refresh_event returning #0

continuing in ColorScheme Autocommands for "*"

line 21: else

line 22:   runtime! syntax/syncolor.vim

line 23: endif

line 24: 

line 25: " Line continuation is used here, remove 'C' from 'cpoptions'

line 26: let s:cpo_save = &cpo

line 27: set cpo&vim

line 28: 

line 29: " First remove all old syntax autocommands.

line 30: au! Syntax

line 31: 

line 32: au Syntax *^I^Icall s:SynSet()

line 33: 

line 34: fun! s:SynSet()

line 64: 

line 65: 

line 66: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)

line 67: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif

line 72: 

line 73: 

line 74: " Source the user-specified syntax highlighting file

line 75: if exists("mysyntaxfile")

line 76:   let s:fname = expand(mysyntaxfile)

line 77:   if filereadable(s:fname)

line 78:     execute "source " . fnameescape(s:fname)

line 79:   endif

line 80: endif

line 81: 

line 82: " Restore 'cpoptions'

line 83: let &cpo = s:cpo_save

line 84: unlet s:cpo_save

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim
continuing in /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
line 21: 

line 22: " Load the FileType autocommands if not done yet.

line 23: if exists("did_load_filetypes")

line 24:   let s:did_ft = 1

line 25: else

line 26:   filetype on

line 27:   let s:did_ft = 0

line 28: endif

line 29: 

line 30: " Set up the connection between FileType and Syntax autocommands.

line 31: " This makes the syntax automatically set when the file type is detected.

line 32: " Avoid an error when 'verbose' is set and <amatch> expansion fails.

line 33: augroup syntaxset

line 34:   au! FileType *^I0verbose exe "set syntax=" . expand("<amatch>")

line 35: augroup END

line 36: 

line 37: 

line 38: " Execute the syntax autocommands for the each buffer.

line 39: " If the filetype wasn't detected yet, do that now.

line 40: " Always do the syntaxset autocommands, for buffers where the 'filetype'

line 41: " already was set manually (e.g., help buffers).

line 42: doautoall syntaxset FileType

Executing FileType Autocommands for "*"
autocommand 0verbose exe "set syntax=" . expand("<amatch>")

Executing: 0verbose exe "set syntax=" . expand("<amatch>")

line 43: if !s:did_ft

line 44:   doautoall filetypedetect BufRead

line 45: endif

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
line 138: endif

line 139: 

line 140: if empty(mapcheck('<C-U>', 'i'))

line 141:   inoremap <C-U> <C-G>u<C-U>

line 142: endif

line 143: if empty(mapcheck('<C-W>', 'i'))

line 144:   inoremap <C-W> <C-G>u<C-W>

line 145: endif

line 146: 

line 147: " From `:help :DiffOrig`.

line 148: if exists(":DiffOrig") != 2

line 149:   command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

line 151: endif

line 152: 

line 153: " Correctly highlight $() and other modern affordances in filetype=sh.

line 154: if !exists('g:is_posix') && !exists('g:is_bash') && !exists('g:is_kornshell') && !exists('g:is_dash')

line 155:   let g:is_posix = 1

line 156: endif

line 157: 

line 158: " Load matchit.vim, but only if the user hasn't installed a newer version.

line 159: if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''

line 160:   runtime! macros/matchit.vim

line 161: endif

line 162: 

line 163: " Enable the :Man command shipped inside Vim's man filetype plugin.

line 164: if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man' && !has('nvim')

line 165:   runtime ftplugin/man.vim

Searching for "ftplugin/man.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/ftplugin/man.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/ftplugin/man.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/ftplugin/man.vim"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/man.vim"
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin)
fchdir() to previous dir
line 165: sourcing "/Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/man.vim"
line 1: " Vim filetype plugin file

line 2: " Language:^Iman

line 3: " Maintainer:^IJason Franklin <vim@justemail.net>

line 4: " Maintainer:^ISungHyun Nam <goweol@gmail.com>

line 5: " Autoload Split: Bram Moolenaar

line 6: " Last Change:^I2024 Jun 06 (disabled the q mapping, #8210)

line 7: " ^I^I2024 Jul 06 (use nnoremap, #15130)

line 8: " ^I^I2024 Aug 23 (improve the <Plug>ManBS mapping, #15547, #15556)

line 9: 

line 10: " To make the ":Man" command available before editing a manual page, source

line 11: " this script from your startup vimrc file.

line 12: 

line 13: " If 'filetype' isn't "man", we must have been called to define ":Man" and not

line 14: " to do the filetype plugin stuff.

line 15: if &filetype == "man"

line 16: 

line 17:   " Only do this when not done yet for this buffer

line 18:   if exists("b:did_ftplugin")

line 19:     finish

line 20:   endif

line 21:   let b:did_ftplugin = 1

line 22: endif

line 23: 

line 24: let s:cpo_save = &cpo

line 25: set cpo-=C

line 26: 

line 27: if &filetype == "man"

line 28:   " Allow hyphen, plus, colon, dot, and commercial at in manual page name.

line 29:   " Parentheses are not here but in dist#man#PreGetPage()

line 30:   setlocal iskeyword=48-57,_,a-z,A-Z,-,+,:,.,@-@

line 31:   let b:undo_ftplugin = "setlocal iskeyword<"

line 32: 

line 33:   " Add mappings, unless the user didn't want this.

line 34:   if !exists("no_plugin_maps") && !exists("no_man_maps")

line 35:     if !hasmapto('<Plug>ManBS')

line 36:       nmap <buffer> <LocalLeader>h <Plug>ManBS

line 37:       let b:undo_ftplugin = b:undo_ftplugin . '|silent! nunmap <buffer> <LocalLeader>h'

line 39:     endif

line 40: 

line 41:     nnoremap <buffer> <silent> <Plug>ManBS :setl ma<Bar>%s/.\b//g <Bar>setl noma<CR>`'

line 43: 

line 44:     nnoremap <buffer> <silent> <c-]> :call dist#man#PreGetPage(v:count)<CR>

line 45:     nnoremap <buffer> <silent> <c-t> :call dist#man#PopPage()<CR>

line 46: 

line 47:     " Add undo commands for the maps

line 48:     let b:undo_ftplugin = b:undo_ftplugin . '|silent! nunmap <buffer> <Plug>ManBS' . '|silent! nunmap <buffer> <c-]>' . '|silent! nunmap <buffer> <c-t>'

line 52:   endif

line 53: 

line 54:   if exists('g:ft_man_folding_enable') && (g:ft_man_folding_enable == 1)

line 55:     setlocal foldmethod=indent foldnestmax=1 foldenable

line 56:     let b:undo_ftplugin = b:undo_ftplugin . '|silent! setl fdm< fdn< fen<'

line 58:   endif

line 59: 

line 60: endif

line 61: 

line 62: if exists(":Man") != 2

line 63:   com -nargs=+ -complete=shellcmd Man call dist#man#GetPage(<q-mods>, <f-args>)

line 64:   nnoremap <Leader>K :call dist#man#PreGetPage(0)<CR>

line 65:   nnoremap <Plug>ManPreGetPage :call dist#man#PreGetPage(0)<CR>

line 66: endif

line 67: 

line 68: let &cpo = s:cpo_save

line 69: unlet s:cpo_save

line 70: 

line 71: " vim: set sw=2 ts=8 noet:

finished sourcing /Applications/MacVim.app/Contents/Resources/vim/runtime/ftplugin/man.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
line 166: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-sensible/plugin/sensible.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin/sleuth.vim"
line 1: " sleuth.vim - Heuristically set buffer options

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      2.0

line 4: " GetLatestVimScripts: 4375 1 :AutoInstall: sleuth.vim

line 5: 

line 6: if exists("#polyglot-sleuth")

line 7:   autocmd! polyglot-sleuth

line 8:   augroup! polyglot-sleuth

line 9:   unlet! g:loaded_sleuth

line 10:   let s:polyglot = 1

line 11: endif

line 12: 

line 13: if exists("g:loaded_sleuth") || v:version < 700 || &cp

line 14:   finish

line 15: endif

line 16: let g:loaded_sleuth = 1

line 17: lockvar g:loaded_sleuth

line 18: 

line 19: function! s:Warn(msg, ...) abort

line 27: 

line 28: if exists('+shellslash')

line 29:   function! s:Slash(path) abort

line 32: else

line 33:   function! s:Slash(path) abort

line 36: endif

line 37: 

line 38: function! s:Guess(source, detected, lines) abort

line 149: 

line 150: function! s:Capture(cmd) abort

line 156: 

line 157: let s:modeline_numbers = { 'shiftwidth': 'shiftwidth', 'sw': 'shiftwidth', 'tabstop': 'tabstop', 'ts': 'tabstop', 'textwidth': 'textwidth', 'tw': 'textwidth', }

line 162: let s:modeline_booleans = { 'expandtab': 'expandtab', 'et': 'expandtab', 'fixendofline': 'fixendofline', 'fixeol': 'fixendofline', }

line 166: function! s:ParseOptions(declarations, into, ...) abort

line 181: 

line 182: function! s:ModelineOptions() abort

line 203: 

line 204: let s:fnmatch_replacements = { '.': '\.', '\%': '%', '\(': '(', '\)': ')', '\{': '{', '\}': '}', '\_': '_', '?': '[^/]', '*': '[^/]*', '/**/*': '/.*', '/**/': '/\%(.*/\)\=', '**': '.*'}

line 207: function! s:FnmatchReplace(pat) abort

line 231: 

line 232: function! s:FnmatchTranslate(pat) abort

line 235: 

line 236: function! s:ReadEditorConfig(absolute_path) abort

line 268: 

line 269: let s:editorconfig_cache = {}

line 270: function! s:DetectEditorConfig(absolute_path, ...) abort

line 314: 

line 315: let s:editorconfig_bomb = { 'utf-8':     0, 'utf-8-bom': 1, 'utf-16be':  1, 'utf-16le':  1, 'latin1':    0, }

line 322: 

line 323: let s:editorconfig_fileformat = { 'cr':   'mac', 'crlf': 'dos', 'lf':   'unix', }

line 328: 

line 329: function! s:EditorConfigToOptions(pairs) abort

line 383: 

line 384: function! s:Ready(detected) abort

line 387: 

line 388: let s:booleans = {'expandtab': 1, 'fixendofline': 1, 'endofline': 1, 'bomb': 1}

line 389: let s:safe_options = ['expandtab', 'shiftwidth', 'tabstop', 'textwidth', 'fixendofline']

line 390: let s:all_options = s:safe_options + ['endofline', 'fileformat', 'fileencoding', 'bomb']

line 391: let s:short_options = { 'expandtab': 'et', 'shiftwidth': 'sw', 'tabstop': 'ts', 'textwidth': 'tw', 'fixendofline': 'fixeol', 'endofline': 'eol', 'fileformat': 'ff', 'fileencoding': 'fenc'}

line 395: 

line 396: function! s:Apply(detected, permitted_options, silent) abort

line 459: 

line 460: function! s:UserOptions(ft, name) abort

line 487: 

line 488: function! s:DetectDeclared() abort

line 512: 

line 513: function! s:DetectHeuristics(into) abort

line 592: 

line 593: function! s:Init(redetect, unsafe, do_filetype, silent) abort

line 631: 

line 632: function! s:AutoInit() abort

line 635: 

line 636: function! s:Sleuth(line1, line2, range, bang, mods, args) abort

line 640: 

line 641: if !exists('g:did_indent_on') && !get(g:, 'sleuth_no_filetype_indent_on')

line 642:   filetype indent on

line 643: elseif !exists('g:did_load_filetypes')

line 644:   filetype on

line 645: endif

line 646: 

line 647: function! SleuthIndicator() abort

line 664: 

line 665: augroup sleuth

line 666:   autocmd!

line 667:   autocmd BufNewFile,BufReadPost * nested if get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

line 670:   autocmd BufFilePost * nested if (@% !~# '^!' || exists('b:sleuth')) && get(g:, 'sleuth_automatic', 1) | exe s:AutoInit() | endif

line 673:   autocmd FileType * nested if exists('b:sleuth') | exe s:Init(0, 0, 0, 1) | endif

line 675:   autocmd User Flags call Hoist('buffer', 5, 'SleuthIndicator')

line 676: augroup END

line 677: 

line 678: command! -bar -bang Sleuth exe s:Sleuth(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/plugin/sleuth.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-surround/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/plugin/surround.vim"
line 1: " surround.vim - Surroundings

line 2: " Author:       Tim Pope <http://tpo.pe/>

line 3: " Version:      2.2

line 4: " GetLatestVimScripts: 1697 1 :AutoInstall: surround.vim

line 5: 

line 6: if exists("g:loaded_surround") || &cp || v:version < 700

line 7:   finish

line 8: endif

line 9: let g:loaded_surround = 1

line 10: 

line 11: " Input functions {{{1

line 12: 

line 13: function! s:getchar()

line 20: 

line 21: function! s:inputtarget()

line 35: 

line 36: function! s:inputreplacement()

line 47: 

line 48: function! s:beep()

line 52: 

line 53: function! s:redraw()

line 57: 

line 58: " }}}1

line 59: 

line 60: " Wrapping functions {{{1

line 61: 

line 62: function! s:extractbefore(str)

line 69: 

line 70: function! s:extractafter(str)

line 77: 

line 78: function! s:fixindent(str,spc)

line 87: 

line 88: function! s:process(string)

line 126: 

line 127: function! s:wrap(string,char,type,removed,special)

line 302: 

line 303: function! s:wrapreg(reg,char,removed,special)

line 309: " }}}1

line 310: 

line 311: function! s:insert(...) " {{{1

line 362: 

line 363: function! s:reindent() abort " {{{1

line 368: 

line 369: function! s:dosurround(...) " {{{1

line 493: 

line 494: function! s:changesurround(...) " {{{1

line 505: 

line 506: function! s:opfunc(type, ...) abort " {{{1

line 572: 

line 573: function! s:opfunc2(...) abort

line 580: 

line 581: function! s:closematch(str) " {{{1

line 596: 

line 597: nnoremap <silent> <Plug>SurroundRepeat .

line 598: nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>

line 599: nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>

line 600: nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>

line 601: nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'

line 602: nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'

line 603: nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')

line 604: nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')

line 605: vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>

line 606: vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>

line 607: inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>

line 608: inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>

line 609: 

line 610: if !exists("g:surround_no_mappings") || ! g:surround_no_mappings

line 611:   nmap ds  <Plug>Dsurround

line 612:   nmap cs  <Plug>Csurround

line 613:   nmap cS  <Plug>CSurround

line 614:   nmap ys  <Plug>Ysurround

line 615:   nmap yS  <Plug>YSurround

line 616:   nmap yss <Plug>Yssurround

line 617:   nmap ySs <Plug>YSsurround

line 618:   nmap ySS <Plug>YSsurround

line 619:   xmap S   <Plug>VSurround

line 620:   xmap gS  <Plug>VgSurround

line 621:   if !exists("g:surround_no_insert_mappings") || ! g:surround_no_insert_mappings

line 622:     if !hasmapto("<Plug>Isurround","i") && "" == mapcheck("<C-S>","i")

line 623:       imap    <C-S> <Plug>Isurround

line 624:     endif

line 625:     imap      <C-G>s <Plug>Isurround

line 626:     imap      <C-G>S <Plug>ISurround

line 627:   endif

line 628: endif

line 629: 

line 630: " vim:set ft=vim sw=2 sts=2 et:

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-surround/plugin/surround.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim"
line 1: if exists('g:loaded_test')

line 2:   finish

line 3: endif

line 4: let g:loaded_test = 1

line 5: 

line 6: let g:test#plugin_path = expand('<sfile>:p:h:h')

line 7: 

line 8: let g:test#default_runners = { 'CSharp':     ['Xunit', 'DotnetTest'], 'Clojure':    ['FireplaceTest', 'LeinTest'], 'Crystal':    ['CrystalSpec'], 'Cpp':        ['Catch2'], 'Dart':       ['DartTest', 'FlutterTest'], 'Elixir':     ['ExUnit', 'ESpec'], 'Elm':        ['ElmTest'], 'Erlang':     ['CommonTest', 'EUnit', 'PropEr'], 'Go':         ['GoTest', 'Ginkgo', 'RichGo', 'Delve'], 'Groovy':     ['MavenTest', 'GradleTest'], 'Haskell':    ['StackTest', 'CabalTest'], 'Java':       ['MavenTest', 'GradleTest'], 'JavaScript': ['Ava', 'CucumberJS', 'DenoTest', 'Intern', 'TAP', 'Teenytest', 'Karma', 'Lab', 'Mocha',  'NgTest', 'Nx', 'Jasmine', 'Jest', 'ReactScripts', 'WebdriverIO', 'Cypress', 'VueTestUtils', 'Playwright', 'Vitest', 'Ember'], 'Kotlin':     ['GradleTest'], 'Lua':        ['Busted'], 'Mint':       ['MintTest'], 'Nim':        ['UnitTest'], 'PHP':        ['Codeception', 'Dusk', 'Pest', 'PHPUnit', 'Behat', 'PHPSpec', 'Kahlan', 'Peridot'], 'Perl':       ['Prove'], 'Python':     ['Behave', 'DjangoTest', '

line 39: 

line 40: let g:test#custom_strategies = get(g:, 'test#custom_strategies', {})

line 41: let g:test#custom_transformations = get(g:, 'test#custom_transformations', {})

line 42: let g:test#runner_commands = get(g:, 'test#runner_commands', [])

line 43: 

line 44: command! -nargs=* -bar TestNearest call test#run('nearest', split(<q-args>))

line 45: command! -nargs=* -bar -complete=file                TestFile    call test#run('file', split(<q-args>))

line 47: command! -nargs=* -bar TestClass   call test#run('class', split(<q-args>))

line 48: command! -nargs=* -bar TestSuite   call test#run('suite', split(<q-args>))

line 49: command! -nargs=* -bar TestLast    call test#run_last(split(<q-args>))

line 50: command!          -bar TestVisit   call test#visit()

line 51: 

line 52: for [s:language, s:runners] in items(test#get_runners())

Searching for "autoload/test.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/test.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/test.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload)
fchdir() to previous dir
line 52: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/test.vim"
line 1: function! test#run(type, arguments) abort

line 33: 

line 34: function! test#run_last(arguments) abort

line 55: 

line 56: function! test#exists() abort

line 59: 

line 60: function! test#visit() abort

line 67: 

line 68: function! test#execute(runner, args, ...) abort

line 93: 

line 94: function! test#shell(cmd, strategy) abort

line 116: 

line 117: function! test#determine_runner(file) abort

line 132: 

line 133: function! test#get_runners() abort

line 144: 

line 145: function! test#test_file(file) abort

line 148: 

line 149: function! s:alternate_file() abort

line 167: 

line 168: function! s:before_run() abort

line 193: 

line 194: function! s:after_run() abort

line 199: 

line 200: function! s:get_position(path) abort

line 210: 

line 211: function! s:extract_strategy_from_command(arguments) abort

line 218: 

line 219: function! s:extract_env_from_command(arguments) abort

line 224: 

line 225: function! s:echo_failure(message) abort

line 230: 

line 231: function! s:extend(source, dict) abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/test.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim
calling test#get_runners()

line 1:   if exists('g:test#runners')

line 2:     let custom_runners = g:test#runners

line 3:   elseif exists('g:test#custom_runners')

line 4:     let custom_runners = g:test#custom_runners

line 5:   else

line 6:     let custom_runners = {}

line 7:   endif

line 8: 

line 9:   return s:extend(custom_runners, g:test#default_runners)

calling <SNR>148_extend({}, {'Racket': ['RackUnit'], 'Cpp': ['Catc...', 'PyUnit', 'Nose', 'Nose2', 'Mamba']})

line 1:   let result = {}

line 2:   for [key, value] in items(a:source)

line 3:     let result[key] = value

line 4:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 5:   for [key, value] in items(a:dict)

line 6:     let result[key] = get(result, key, []) + value

line 7:   endfor

line 8:   return result

<SNR>148_extend returning {'Racket': ['RackUnit'], 'JavaScript':...', 'PyUnit', 'Nose', 'Nose2', 'Mamba']}

continuing in test#get_runners

test#get_runners returning {'Racket': ['RackUnit'], 'JavaScript':...', 'PyUnit', 'Nose', 'Nose2', 'Mamba']}

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 52: for [s:language, s:runners] in items(test#get_runners())

line 53:   for s:runner in s:runners

line 54:     if index(g:test#runner_commands, s:runner) != -1

line 55:       if exists(':'.s:runner) | continue | endif

line 55:  continue | endif

line 55:  endif

line 56:       let s:runner_id = tolower(s:language).'#'.tolower(s:runner)

line 57:       execute 'command! -bar -nargs=* -complete=file' s:runner 'call test#execute("'.s:runner_id.'", split(<q-args>))'

line 60:     endif

line 61:   endfor

line 62: endfor

line 63: 

line 64: if &autochdir

line 65:   let g:test#project_root = getcwd()

line 66: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-test/plugin/test.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/plugin/vim-todo-lists.vim"
line 1: " MIT License

line 2: "

line 3: " Copyright (c) 2020 Alexander Serebryakov (alex.serebr@gmail.com)

line 4: "

line 5: " Permission is hereby granted, free of charge, to any person obtaining a copy

line 6: " of this software and associated documentation files (the "Software"), to

line 7: " deal in the Software without restriction, including without limitation the

line 8: " rights to use, copy, modify, merge, publish, distribute, sublicense, and/or

line 9: " sell copies of the Software, and to permit persons to whom the Software is

line 10: " furnished to do so, subject to the following conditions:

line 11: "

line 12: " The above copyright notice and this permission notice shall be included in

line 13: " all copies or substantial portions of the Software.

line 14: "

line 15: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

line 16: " IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

line 17: " FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

line 18: " AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

line 19: " LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING

line 20: " FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

line 21: " IN THE SOFTWARE.

line 22: 

line 23: 

line 24: " Initializes plugin settings and mappings

line 25: function! VimTodoListsInit()

line 61: 

line 62: " Initializes done/undone tokens

line 63: function! VimTodoListsInitializeTokens()

line 77: 

line 78: " Initiaizes syntax

line 79: function! VimTodoListsInitializeSyntax()

line 88: 

line 89: " Sets the item done

line 90: function! VimTodoListsSetItemDone(lineno)

line 94: 

line 95: 

line 96: " Sets the item not done

line 97: function! VimTodoListsSetItemNotDone(lineno)

line 101: 

line 102: 

line 103: " Checks that line is a todo list item

line 104: function! VimTodoListsLineIsItem(line)

line 111: 

line 112: 

line 113: " Checks that item is not done

line 114: function! VimTodoListsItemIsNotDone(line)

line 121: 

line 122: 

line 123: " Checks that item is done

line 124: function! VimTodoListsItemIsDone(line)

line 131: 

line 132: 

line 133: " Returns the line number of the brother item in specified range

line 134: function! VimTodoListsBrotherItemInRange(line, range)

line 155: 

line 156: 

line 157: " Finds the insert position above the item

line 158: function! VimTodoListsFindTargetPositionUp(lineno)

line 177: 

line 178: 

line 179: " Finds the insert position below the item

line 180: function! VimTodoListsFindTargetPositionDown(line)

line 193: 

line 194: 

line 195: " Moves the item subtree to the specified position

line 196: function! VimTodoListsMoveSubtree(lineno, position)

line 238: 

line 239: 

line 240: " Moves the subtree up

line 241: function! VimTodoListsMoveSubtreeUp(lineno)

line 248: 

line 249: 

line 250: " Moves the subtree down

line 251: function! VimTodoListsMoveSubtreeDown(lineno)

line 258: 

line 259: 

line 260: " Counts the number of leading spaces

line 261: function! VimTodoListsCountLeadingSpaces(line)

line 264: 

line 265: 

line 266: " Returns the line number of the parent

line 267: function! VimTodoListsFindParent(lineno)

line 281: 

line 282: 

line 283: " Returns the line number of the last child

line 284: function! VimTodoListsFindLastChild(lineno)

line 304: 

line 305: 

line 306: " Marks the parent done if all children are done

line 307: function! VimTodoListsUpdateParent(lineno)

line 336: 

line 337: 

line 338: " Applies the function for each child

line 339: function! VimTodoListsForEachChild(lineno, function)

line 348: 

line 349: 

line 350: " Sets mapping for normal navigation and editing mode

line 351: function! VimTodoListsSetNormalMode()

line 362: 

line 363: 

line 364: " Sets mappings for faster item navigation and editing

line 365: function! VimTodoListsSetItemMode()

line 382: 

line 383: " Appends date at the end of the line

line 384: function! VimTodoListsAppendDate()

line 390: 

line 391: " Creates a new item above the current line with the same indent

line 392: function! VimTodoListsCreateNewItemAbove()

line 396: 

line 397: " Creates a new item below the current line with the same indent

line 398: function! VimTodoListsCreateNewItemBelow()

line 402: 

line 403: function! VimTodoListsIdent()

line 412: 

line 413: " Creates a new item in the current line

line 414: function! VimTodoListsCreateNewItem()

line 418: 

line 419: 

line 420: " Moves the cursor to the next item

line 421: function! VimTodoListsGoToNextItem()

line 427: 

line 428: 

line 429: " Moves the cursor to the previous item

line 430: function! VimTodoListsGoToPreviousItem()

line 436: 

line 437: 

line 438: " Toggles todo list item

line 439: function! VimTodoListsToggleItem()

line 460: 

line 461: " Increases the indent level

line 462: function! VimTodoListsIncreaseIndent()

line 465: 

line 466: " Decreases the indent level

line 467: function! VimTodoListsDecreaseIndent()

line 470: 

line 471: "Plugin startup code

line 472: if !exists('g:vimtodolists_plugin')

line 473:   let g:vimtodolists_plugin = 1

line 474: 

line 475:   if exists('vimtodolists_auto_commands')

line 476:     echoerr 'VimTodoLists: vimtodolists_auto_commands group already exists'

line 477:     exit

line 478:   endif

line 479: 

line 480:   "Defining auto commands

line 481:   augroup vimtodolists_auto_commands

line 482:     autocmd!

line 483:     autocmd BufRead,BufNewFile *.todo.md call VimTodoListsInit()

line 484:     autocmd FileType todo call VimTodoListsInit()

line 485:   augroup end

line 486: 

line 487:   "Defining plugin commands

line 488:   command! VimTodoListsCreateNewItemAbove silent call VimTodoListsCreateNewItemAbove()

line 489:   command! VimTodoListsCreateNewItemBelow silent call VimTodoListsCreateNewItemBelow()

line 490:   command! VimTodoListsCreateNewItem silent call VimTodoListsCreateNewItem()

line 491:   command! VimTodoListsGoToNextItem silent call VimTodoListsGoToNextItem()

line 492:   command! VimTodoListsGoToPreviousItem silent call VimTodoListsGoToPreviousItem()

line 493:   command! -range VimTodoListsToggleItem silent <line1>,<line2>call VimTodoListsToggleItem()

line 494:   command! -range VimTodoListsIncreaseIndent silent <line1>,<line2>call VimTodoListsIncreaseIndent()

line 495:   command! -range VimTodoListsDecreaseIndent silent <line1>,<line2>call VimTodoListsDecreaseIndent()

line 496: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/plugin/vim-todo-lists.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin/vinegar.vim"
line 1: " Location:     plugin/vinegar.vim

line 2: " Maintainer:   Tim Pope <http://tpo.pe/>

line 3: " Version:      1.0

line 4: " GetLatestVimScripts: 5671 1 :AutoInstall: vinegar.vim

line 5: 

line 6: if exists("g:loaded_vinegar") || v:version < 700 || &cp

line 7:   finish

line 8: endif

line 9: let g:loaded_vinegar = 1

line 10: 

line 11: function! s:fnameescape(file) abort

line 18: 

line 19: let s:dotfiles = '\(^\|\s\s\)\zs\.\S\+'

line 20: 

line 21: let s:escape = 'substitute(escape(v:val, ".$~"), "*", ".*", "g")'

line 22: let g:netrw_list_hide = join(map(split(&wildignore, ','), '"^".' . s:escape . '. "/\\=$"'), ',') . ',^\.\.\=/\=$' . (get(g:, 'netrw_list_hide', '')[-strlen(s:dotfiles)-1:-1] ==# s:dotfiles ? ','.s:dotfiles : '')

line 25: if !exists("g:netrw_banner")

line 26:   let g:netrw_banner = 0

line 27: endif

line 28: unlet! s:netrw_up

line 29: 

line 30: nnoremap <silent> <Plug>VinegarUp :call <SID>opendir('edit')<CR>

line 31: if empty(maparg('-', 'n')) && !hasmapto('<Plug>VinegarUp')

line 32:   nmap - <Plug>VinegarUp

line 33: endif

line 34: 

line 35: nnoremap <silent> <Plug>VinegarTabUp :call <SID>opendir('tabedit')<CR>

line 36: nnoremap <silent> <Plug>VinegarSplitUp :call <SID>opendir('split')<CR>

line 37: nnoremap <silent> <Plug>VinegarVerticalSplitUp :call <SID>opendir('vsplit')<CR>

line 38: 

line 39: function! s:sort_sequence(suffixes) abort

line 43: let g:netrw_sort_sequence = s:sort_sequence(&suffixes)

calling <SNR>150_sort_sequence('.bak,~,.o,.h,.info,.swp,.obj')

line 1:   return '[\/]$,*' . (empty(a:suffixes) ? '' : ',\%(' . join(map(split(a:suffixes, ','), 'escape(v:val, ".*$~")'), '\|') . '\)[*@]\=$')

<SNR>150_sort_sequence returning '[\/]$,*,\%(\.bak\|\~\|\.o\|\.h\|\.info\|\.swp\|\.obj\)[*@]\=$'

continuing in /Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin/vinegar.vim

line 44: 

line 45: function! s:opendir(cmd) abort

line 61: 

line 62: function! s:seek(file) abort

line 71: 

line 72: augroup vinegar

line 73:   autocmd!

line 74:   autocmd FileType netrw call s:setup_vinegar()

line 75:   if exists('##OptionSet')

line 76:     autocmd OptionSet suffixes if s:sort_sequence(v:option_old) ==# get(g:, 'netrw_sort_sequence') |   let g:netrw_sort_sequence = s:sort_sequence(v:option_new) | endif

line 80:   endif

line 81: augroup END

line 82: 

line 83: function! s:slash() abort

line 86: 

line 87: function! s:absolutes(first, ...) abort

line 94: 

line 95: function! s:relatives(first, ...) abort

line 106: 

line 107: function! s:escaped(first, last) abort

line 111: " 97f3fbc9596f3997ebf8e30bfdd00ebb34597722

line 112: 

line 113: function! s:setup_vinegar() abort

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/plugin/vinegar.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/plugins/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/easyjump.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:     echoe "Needs Vim version 9.0 and above"

line 3:     finish

line 4: endif

line 5: vim9script

line 6: 

line 7: # Jump to any character on screen using 2 characters.

line 8: 

line 9: :highlight default link EasyJump MatchParen

line 10: 

line 11: import autoload '../autoload/vimbits/jump.vim'

line 13: def Jump(count: number = 1)

line 16: 

line 17: def VJump(count: number = 1)

line 21: 

line 22: if get(g:, 'vimbits_easyjump', true)

line 23:     :nnoremap <silent> <Plug>EasyjumpJump; :<c-u>call <SID>Jump(v:count1)<cr>

line 24:     :onoremap <silent> <Plug>EasyjumpJump; :<c-u>call <SID>Jump(v:count1)<cr>

line 25:     :vnoremap <silent> <Plug>EasyjumpJump; :<c-u>call <SID>VJump(v:count1)<cr>

line 26: 

line 27:     augroup VimbitsEasyJump | autocmd!

line 27:  autocmd!

line 28:         autocmd VimEnter * jump.Setup()

line 29:     augroup END

line 30: else

line 31:     :nnoremap <silent> <Plug>EasyjumpJump; :echo 'EasyJump not enabled'<cr>

line 32:     :onoremap <silent> <Plug>EasyjumpJump; :echo 'EasyJump not enabled'<cr>

line 33:     :vnoremap <silent> <Plug>EasyjumpJump; :echo 'EasyJump not enabled'<cr>

line 34: endif

line 35: 

line 36: def EasyJumpJump()

line 43: 

line 44: if get(g:, 'easyjump_command', false) && !exists(':EasyJump')

line 45:     command EasyJump EasyJumpJump()

line 46: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/easyjump.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/fFtT.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:     echoe "Needs Vim version 9.0 and above"

line 3:     finish

line 4: endif

line 5: vim9script

line 6: 

line 7: var id: number

line 8: var winid: number

line 9: 

line 10: hi def link FfTtSubtle NonText

line 11: 

line 12: def HighligtClear(): string

line 20: 

line 21: augroup fFtTHighlight | autocmd!

line 21:  autocmd!

line 22:     autocmd CursorMoved,ModeChanged,TextChanged,WinEnter,WinLeave,CmdWinLeave,SafeState * HighligtClear()

line 23: augroup END

line 24: 

line 25: # Gather locations of characters to be dimmed.

line 26: def HighligtChars(s: string): string

line 69: 

line 70: if get(g:, 'vimbits_fFtT', true)

line 71:     noremap <silent><expr> <Plug>(fFtT-f) HighligtChars('f')

line 72:     noremap <silent><expr> <Plug>(fFtT-F) HighligtChars('F')

line 73:     noremap <silent><expr> <Plug>(fFtT-t) HighligtChars('t')

line 74:     noremap <silent><expr> <Plug>(fFtT-T) HighligtChars('T')

line 75:     noremap <silent><expr> <Plug>(fFtT-esc) HighligtClear()

line 76: 

line 77:     nnoremap f <Plug>(fFtT-f)f

line 78:     xnoremap f <Plug>(fFtT-f)f

line 79:     onoremap f <Plug>(fFtT-f)f

line 80:     nnoremap F <Plug>(fFtT-F)F

line 81:     xnoremap F <Plug>(fFtT-F)F

line 82:     onoremap F <Plug>(fFtT-F)F

line 83:     nnoremap t <Plug>(fFtT-t)t

line 84:     xnoremap t <Plug>(fFtT-t)t

line 85:     onoremap t <Plug>(fFtT-t)t

line 86:     nnoremap T <Plug>(fFtT-T)T

line 87:     xnoremap T <Plug>(fFtT-T)T

line 88:     onoremap T <Plug>(fFtT-T)T

line 89: endif

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/fFtT.vim
chdir(/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/vimbits.vim"
line 1: if !has('vim9script') ||  v:version < 900

line 2:     finish

line 3: endif

line 4: vim9script

line 5: g:loaded_vimbits = true

line 7: import '../autoload/vimbits/highlightonyank.vim' as hy

chdir(/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits)
fchdir() to previous dir
line 7: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits/highlightonyank.vim"
line 1: vim9script

line 2: 

line 3: # hlgroup: Highlight group used for highlighting yanked region.

line 4: # duration: Duration of highlight in milliseconds.

line 5: # in_visual: Whether to highlight the region if selected from visual mode.

line 6: export def HighlightOnYank(hlgroup = 'IncSearch', duration = 300, in_visual = true)

line 31: 

line 32: export def HighlightOnYankLegacy(hlgroup = 'IncSearch', duration = 300, in_visual = true)

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits/highlightonyank.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/vimbits.vim
line 8: import '../autoload/vimbits/vim9cmdline.vim' as v9

chdir(/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits)
fchdir() to previous dir
line 8: sourcing "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits/vim9cmdline.vim"
line 1: vim9script

line 2: 

line 3: export def Vim9cmdlineSet()

line 19: 

line 20: export def Vim9cmdlineUnset()

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vimbits/vim9cmdline.vim
continuing in /Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/vimbits.vim
line 9: 

line 10: if get(g:, 'vimbits_vim9cmdline', false) && !exists(':ToggleVim9Cmdline')

line 11:     command ToggleVim9Cmdline {

line 12:         g:vimbits_vim9cmdline = !get(g:, 'vimbits_vim9cmdline', false)

line 13:     }

line 14: endif

line 15: 

line 16: augroup Vimbits | autocmd!

line 16:  autocmd!

line 17:     if get(g:, 'vimbits_highlightonyank', true)

line 18:         if has('patch-9.1.0443')  # has getregionpos() and bug fixes

line 19:             autocmd TextYankPost * hy.HighlightOnYank()

line 20:         else

line 21:             autocmd TextYankPost * hy.HighlightOnYankLegacy()

line 22:         endif

line 23:     endif

line 24:     if get(g:, 'vimbits_vim9cmdline', false)

line 25:         autocmd CmdlineEnter : v9.Vim9cmdlineSet()

line 26:         autocmd CmdlineLeave : v9.Vim9cmdlineUnset()

line 27:     endif

line 28: augroup END

finished sourcing /Users/piotr/.config/vim/pack/plugins/start/vimbits/plugin/vimbits.vim
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect/kdl.vim"
line 1: autocmd BufNewFile,BufRead *.kdl set filetype=kdl

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/kdl.vim/ftdetect/kdl.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect/modulemap.vim"
line 1: " vim ftdetect file

line 2: " Language: Clang module map

line 3: " Maintainer: Saleem Abdulrasool <compnerd@compnerd.org>

line 4: " Author: Kohki Miki <giginet.net@gmail.com>

line 5: 

line 6: au BufRead,BufNewFile *.modulemap set filetype=modulemap

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/ftdetect/modulemap.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect/nim.vim"
line 1: augroup nim_vim

line 2:   au BufNewFile,BufRead *.nim,*.nims,*.nimble set filetype=nim

line 3: augroup END

line 4: 

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/nim.vim/ftdetect/nim.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
chdir(/Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin/swift.vim"
line 1: let g:tagbar_type_swift = { 'ctagstype': 'swift', 'kinds': [ 'P:protocol', 'c:class', 's:struct', 'e:enum', 'E:extension', 'f:function', 't:typealias' ], 'sort': 0, 'deffile': expand('<sfile>:p:h:h') . '/ctags/swift.cnf' }

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/swift.vim/plugin/swift.vim
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect/swift.vim"
line 1: autocmd BufNewFile,BufRead *.swift set filetype=swift

line 2: autocmd BufNewFile,BufRead *.swiftinterface set filetype=swift

line 3: autocmd BufRead * call s:Swift()

line 4: function! s:Swift()

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/swift.vim/ftdetect/swift.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect/handlebars.vim"
line 1: au BufNewFile,BufRead *.handlebars,*.hbs set filetype=html.handlebars syntax=handlebars

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/ftdetect/handlebars.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/flow.vim"
line 1: autocmd BufNewFile,BufRead *.flow setfiletype flow

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/flow.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/javascript.vim"
line 1: fun! s:SelectJavascript()

line 6: 

line 7: autocmd BufNewFile,BufRead *.{js,mjs,cjs,jsm,es,es6},Jakefile setfiletype javascript

line 8: autocmd BufNewFile,BufRead * call s:SelectJavascript()

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-javascript/ftdetect/javascript.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect/mdx.vim"
line 1: " Vim ftdetect file

line 2: "

line 3: " Language: MDX

line 4: " Maintainer: Brent Jackson <jxnblk@gmail.com>

line 5: "

line 6: 

line 7: autocmd BufNewFile,BufRead *.mdx set filetype=markdown.mdx

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/ftdetect/mdx.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/handlebars.vim"
line 1: if has("autocmd")

line 2:   au BufNewFile,BufRead *.handlebars,*.hdbs,*.hbs,*.hb set filetype=html.handlebars

line 3: endif

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/handlebars.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/mustache.vim"
line 1: if has("autocmd")

line 2:   au BufNewFile,BufRead *.mustache,*.hogan,*.hulk,*.hjs set filetype=html.mustache

line 3: endif

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/ftdetect/mustache.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby.vim"
line 1: " Officially distributed filetypes

line 2: 

line 3: " Support functions {{{

line 4: function! s:setf(filetype) abort

line 9: 

line 10: func! s:StarSetf(ft)

line 15: " }}}

line 16: 

line 17: " HTML with Ruby - eRuby

line 18: au BufNewFile,BufRead *.erb,*.rhtml^I^I^I^Icall s:setf('eruby')

line 19: 

line 20: " Interactive Ruby shell

line 21: au BufNewFile,BufRead .irbrc,irbrc^I^I^I^Icall s:setf('ruby')

line 22: 

line 23: " Ruby

line 24: au BufNewFile,BufRead *.rb,*.rbw,*.gemspec^I^I^Icall s:setf('ruby')

line 25: 

line 26: " Rackup

line 27: au BufNewFile,BufRead *.ru^I^I^I^I^Icall s:setf('ruby')

line 28: 

line 29: " Bundler

line 30: au BufNewFile,BufRead Gemfile^I^I^I^I^Icall s:setf('ruby')

line 31: 

line 32: " Ruby on Rails

line 33: au BufNewFile,BufRead *.builder,*.rxml,*.rjs,*.ruby^I^Icall s:setf('ruby')

line 34: 

line 35: " Rakefile

line 36: au BufNewFile,BufRead [rR]akefile,*.rake^I^I^Icall s:setf('ruby')

line 37: au BufNewFile,BufRead [rR]akefile*^I^I^I^Icall s:StarSetf('ruby')

line 38: 

line 39: " Rantfile

line 40: au BufNewFile,BufRead [rR]antfile,*.rant^I^I^Icall s:setf('ruby')

line 41: 

line 42: " vim: nowrap sw=2 sts=2 ts=8 noet fdm=marker:

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby_extra.vim"
line 1: " All other filetypes

line 2: 

line 3: " Support functions {{{

line 4: function! s:setf(filetype) abort

line 9: " }}}

line 10: 

line 11: " Appraisal

line 12: au BufNewFile,BufRead Appraisals^I^Icall s:setf('ruby')

line 13: 

line 14: " Autotest

line 15: au BufNewFile,BufRead .autotest^I^I^Icall s:setf('ruby')

line 16: 

line 17: " Axlsx

line 18: au BufNewFile,BufRead *.axlsx^I^I^Icall s:setf('ruby')

line 19: 

line 20: " Buildr Buildfile

line 21: au BufNewFile,BufRead [Bb]uildfile^I^Icall s:setf('ruby')

line 22: 

line 23: " Capistrano

line 24: au BufNewFile,BufRead Capfile,*.cap^I^Icall s:setf('ruby')

line 25: 

line 26: " Chef

line 27: au BufNewFile,BufRead Cheffile^I^I^Icall s:setf('ruby')

line 28: au BufNewFile,BufRead Berksfile^I^I^Icall s:setf('ruby')

line 29: 

line 30: " CocoaPods

line 31: au BufNewFile,BufRead Podfile,*.podspec^I^Icall s:setf('ruby')

line 32: 

line 33: " Guard

line 34: au BufNewFile,BufRead Guardfile,.Guardfile^Icall s:setf('ruby')

line 35: 

line 36: " Jb

line 37: au BufNewFile,BufRead *.jb^I^I^Icall s:setf('ruby')

line 38: 

line 39: " Jbuilder

line 40: au BufNewFile,BufRead *.jbuilder^I^Icall s:setf('ruby')

line 41: 

line 42: " Kitchen Sink

line 43: au BufNewFile,BufRead KitchenSink^I^Icall s:setf('ruby')

line 44: 

line 45: " Opal

line 46: au BufNewFile,BufRead *.opal^I^I^Icall s:setf('ruby')

line 47: 

line 48: " Pry config

line 49: au BufNewFile,BufRead .pryrc^I^I^Icall s:setf('ruby')

line 50: 

line 51: " Puppet librarian

line 52: au BufNewFile,BufRead Puppetfile^I^Icall s:setf('ruby')

line 53: 

line 54: " Rabl

line 55: au BufNewFile,BufRead *.rabl^I^I^Icall s:setf('ruby')

line 56: 

line 57: " Routefile

line 58: au BufNewFile,BufRead [rR]outefile^I^Icall s:setf('ruby')

line 59: 

line 60: " SimpleCov

line 61: au BufNewFile,BufRead .simplecov^I^Icall s:setf('ruby')

line 62: 

line 63: " Sorbet RBI files

line 64: au BufNewFile,BufRead *.rbi^I^I        call s:setf('ruby')

line 65: 

line 66: " Thor

line 67: au BufNewFile,BufRead [tT]horfile,*.thor^Icall s:setf('ruby')

line 68: 

line 69: " Vagrant

line 70: au BufNewFile,BufRead [vV]agrantfile^I^Icall s:setf('ruby')

line 71: 

line 72: " vim: nowrap sw=2 sts=2 ts=8 noet fdm=marker:

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-ruby/ftdetect/ruby_extra.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect/slim.vim"
line 1: autocmd BufNewFile,BufRead *.slim setf slim

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/vim-slim/ftdetect/slim.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescript.vim"
line 1: autocmd BufNewFile,BufRead *.ts,*.cts,*.mts setlocal filetype=typescript

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescript.vim
chdir(/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescriptreact.vim"
line 1: autocmd BufNewFile,BufRead *.tsx,*mtsx,*ctsx setlocal filetype=typescriptreact

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/yats.vim/ftdetect/typescriptreact.vim
Executing: augroup END

chdir(/Users/piotr/.config/vim/pack/syntax/start)
fchdir() to previous dir
Executing: augroup filetypedetect

chdir(/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect/zig.vim"
line 1: au BufRead,BufNewFile *.zig setfiletype zig

line 2: au BufRead,BufNewFile *.zon setfiletype zig

finished sourcing /Users/piotr/.config/vim/pack/syntax/start/zig.vim/ftdetect/zig.vim
Executing: augroup END

Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/pack/*/start/*"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/*/start/*"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/pack/*/start/*"
Searching for "/Users/piotr/.config/vim/after/pack/*/start/*"
Searching for "plugin/**/*.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim"
line 1: call vsnip_integ#integration#attach()

Searching for "autoload/vsnip_integ/integration.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.co
Searching for "/Users/piotr/.config/vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vsnip_integ/integration.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ)
fchdir() to previous dir
line 1: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration.vim"
line 1: let s:attached = v:false

line 2: 

line 3: "

line 4: " vsnip_integ#integration#attach

line 5: "

line 6: " TODO: improve initialization.

line 7: "

line 8: function! vsnip_integ#integration#attach() abort

line 26: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration.vim
continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim
calling vsnip_integ#integration#attach()

line 1:   if s:attached

line 2:     return

line 3:   endif

line 4:   let s:attached = v:true

line 5: 

line 6:   for l:name in keys(vsnip_integ#detection#definition())

Searching for "autoload/vsnip_integ/detection.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.conf
Searching for "/Users/piotr/.config/vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vsnip_integ/detection.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/detection.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ)
fchdir() to previous dir
line 6: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/detection.vim"
line 1: let s:definition = {   'vimlsp': { -> exists('g:lsp_loaded') },   'lsc': { -> exists('g:loaded_lsc') },   'lcn': { -> exists('g:LanguageClient_serverCommands') },   'asyncomplete': { -> exists('g:asyncomplete_loaded') },   'mucomplete': { -> exists('g:loaded_mucomplete') },   'easycomplete': { -> exists('g:easycomplete_default_plugin_init') },   'yegappan_lsp': { -> s:runtimepath('autoload/lsp/lspserver.vim') }, }

line 10: 

line 11: 

line 12: let s:cache = {}

line 13: 

line 14: "

line 15: " vsnip_integ#detection#definition

line 16: "

line 17: function! vsnip_integ#detection#definition() abort

line 20: 

line 21: "

line 22: " vsnip_integ#detection#exists

line 23: "

line 24: function! vsnip_integ#detection#exists(id) abort

line 30: 

line 31: "

line 32: " runtimepath

line 33: "

line 34: function! s:runtimepath(path) abort

line 37: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/detection.vim
continuing in vsnip_integ#integration#attach
calling vsnip_integ#detection#definition()

line 1:   return copy(s:definition)

vsnip_integ#detection#definition returning {'easycomplete': function('<lambda>160...>155'), 'lsc': function('<lambda>156')}

continuing in vsnip_integ#integration#attach

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('easycomplete')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>160()

<lambda>160 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('asyncomplete')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>158()

<lambda>158 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('yegappan_lsp')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>161()

calling <SNR>176_runtimepath('autoload/lsp/lspserver.vim')

line 1:   return !empty(globpath(&runtimepath, a:path))

<SNR>176_runtimepath returning #1

continuing in <lambda>161

<lambda>161 returning #1

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #1

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

Searching for "autoload/vsnip_integ/integration/yegappan_lsp.vim" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Us
Searching for "/Users/piotr/.config/vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/autoload/vsnip_integ/integration/yegappan_lsp.vim"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration/yegappan_lsp.vim"
chdir(/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration)
fchdir() to previous dir
line 9: sourcing "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration/yegappan_lsp.vim"
line 1: "

line 2: " vsnip_integ#integration#yegappan_lsp#attach

line 3: "

line 4: function! vsnip_integ#integration#yegappan_lsp#attach() abort

line 7: 

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/autoload/vsnip_integ/integration/yegappan_lsp.vim
continuing in vsnip_integ#integration#attach
calling vsnip_integ#integration#yegappan_lsp#attach()

line 1:   call LspOptionsSet({ 'snippetSupport': v:true })

vsnip_integ#integration#yegappan_lsp#attach returning #0

continuing in vsnip_integ#integration#attach

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('lcn')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>157()

<lambda>157 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('mucomplete')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>159()

<lambda>159 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('vimlsp')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>155()

<lambda>155 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

calling vsnip_integ#detection#exists('lsc')

line 1:   if !has_key(s:cache, a:id)

line 2:     let s:cache[a:id] = s:definition[a:id]()

calling <lambda>156()

<lambda>156 returning #0

continuing in vsnip_integ#detection#exists

line 3:   endif

line 4:   return s:cache[a:id]

vsnip_integ#detection#exists returning #0

continuing in vsnip_integ#integration#attach

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

line 6:   for l:name in keys(vsnip_integ#detection#definition())

line 7:     try

line 8:       if vsnip_integ#detection#exists(l:name)

line 9:         call vsnip_integ#integration#{l:name}#attach()

line 10:       endif

line 11:     catch /.*/

line 12:       if g:vsnip_integ_debug

line 13:         echomsg string([v:exception, v:throwpoint])

line 14:       endif

line 15:     endtry

line 16:   endfor

vsnip_integ#integration#attach returning #0

continuing in /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim

finished sourcing /Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/plugin/vsnip_integ.vim
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/plugin/**/*.vim"
Searching for "/Users/piotr/.config/vim/after/plugin/**/*.vim"
chdir(/Users/piotr/.config/vim/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/after/plugin/test.vim"
line 1: vim9script

line 2: 

line 3: g:test#strategy = "vimterminal"

line 5: def HdtTransform(cmd: string): string

line 16: 

line 17: if !empty(glob(".docker/tilt/Dockerfile"))

line 18:   g:test#custom_transformations = {'hdt': HdtTransform}

line 19:   g:test#transformation = 'hdt'

line 20: endif

finished sourcing /Users/piotr/.config/vim/after/plugin/test.vim
chdir(/Users/piotr/.config/vim/after/plugin)
fchdir() to previous dir
sourcing "/Users/piotr/.config/vim/after/plugin/vim-markdown.vim"
line 1: let g:vim_markdown_frontmatter = 1

line 2: let g:vim_markdown_folding_disabled = 1

finished sourcing /Users/piotr/.config/vim/after/plugin/vim-markdown.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim/runtime)
fchdir() to previous dir
sourcing "$VIMRUNTIME/menu.vim"
line 1: " Vim support file to define the default menus

line 2: " You can also use this as a start for your own set of menus.

line 3: "

line 4: " Maintainer:^IThe Vim Project <https://github.com/vim/vim>

line 5: " Last Change:^I2023 Aug 10

line 6: " Former Maintainer:^IBram Moolenaar <Bram@vim.org>

line 7: 

line 8: " Note that ":an" (short for ":anoremenu") is often used to make a menu work

line 9: " in all modes and avoid side effects from mappings defined by the user.

line 10: 

line 11: " Make sure the '<' and 'C' flags are not included in 'cpoptions', otherwise

line 12: " <CR> would not be recognized.  See ":help 'cpoptions'".

line 13: let s:cpo_save = &cpo

line 14: set cpo&vim

line 15: 

line 16: " Avoid installing the menus twice

line 17: if !exists("did_install_default_menus")

line 18: let did_install_default_menus = 1

line 19: 

line 20: 

line 21: if exists("v:lang") || &langmenu != ""

line 22:   " Try to find a menu translation file for the current language.

line 23:   if &langmenu != ""

line 24:     if &langmenu =~ "none"

line 25:       let s:lang = ""

line 26:     else

line 27:       let s:lang = &langmenu

line 28:     endif

line 29:   else

line 30:     let s:lang = v:lang

line 31:   endif

line 32:   " A language name must be at least two characters, don't accept "C"

line 33:   " Also skip "en_US" to avoid picking up "en_gb" translations.

line 34:   if strlen(s:lang) > 1 && s:lang !~? '^en_us'

line 35:     " When the language does not include the charset add 'encoding'

line 36:     if s:lang =~ '^\a\a$\|^\a\a_\a\a$'

line 37:       let s:lang = s:lang .. '.' .. &enc

line 38:     endif

line 39: 

line 40:     " We always use a lowercase name.

line 41:     " Change "iso-8859" to "iso_8859" and "iso8859" to "iso_8859", some

line 42:     " systems appear to use this.

line 43:     " Change spaces to underscores.

line 44:     let s:lang = substitute(tolower(s:lang), '\.iso-', ".iso_", "")

line 45:     let s:lang = substitute(s:lang, '\.iso8859', ".iso_8859", "")

line 46:     let s:lang = substitute(s:lang, " ", "_", "g")

line 47:     " Remove "@euro", otherwise "LC_ALL=de_DE@euro gvim" will show English menus

line 48:     let s:lang = substitute(s:lang, "@euro", "", "")

line 49:     " Change "iso_8859-1" and "iso_8859-15" to "latin1", we always use the

line 50:     " same menu file for them.

line 51:     let s:lang = substitute(s:lang, 'iso_8859-15\=$', "latin1", "")

line 52:     menutrans clear

line 53:     exe "runtime! lang/menu_" .. s:lang .. ".vim"

line 54: 

line 55:     if !exists("did_menu_trans")

line 56:       " There is no exact match, try matching with a wildcard added

line 57:       " (e.g. find menu_de_de.iso_8859-1.vim if s:lang == de_DE).

line 58:       let s:lang = substitute(s:lang, '\.[^.]*', "", "")

line 59:       exe "runtime! lang/menu_" .. s:lang .. "[^a-z]*vim"

line 60: 

line 61:       if !exists("did_menu_trans") && s:lang =~ '_'

line 62: ^I" If the language includes a region try matching without that region.

line 63: ^I" (e.g. find menu_de.vim if s:lang == de_DE).

line 64: ^Ilet langonly = substitute(s:lang, '_.*', "", "")

line 65: ^Iexe "runtime! lang/menu_" .. langonly .. "[^a-z]*vim"

line 66:       endif

line 67: 

line 68:       if !exists("did_menu_trans") && strlen($LANG) > 1 && s:lang !~ '^en_us'

line 69: ^I" On windows locale names are complicated, try using $LANG, it might

line 70: ^I" have been set by set_init_1().  But don't do this for "en" or "en_us".

line 71: ^I" But don't match "slovak" when $LANG is "sl".

line 72: ^Iexe "runtime! lang/menu_" .. tolower($LANG) .. "[^a-z]*vim"

line 73:       endif

line 74:     endif

line 75:   endif

line 76: endif

line 77: 

line 78: 

line 79: " MacVim Window menu (should be next to Help so give it a high priority)

line 80: if has("gui_macvim")

line 81:   an <silent> 9998.300 Window.Minimize^I^I    <Nop>

line 82:   an <silent> 9998.301 Window.Minimize\ All^I    <Nop>

line 83:   an <silent> 9998.310 Window.Zoom^I^I    <Nop>

line 84:   an <silent> 9998.311 Window.Zoom\ All^I^I    <Nop>

line 85:   an 9998.318 Window.-SEP1-^I^I^I    <Nop>

line 86:   an <silent> 9998.320 Window.Toggle\ Full\ Screen\ Mode :set invfullscreen<CR>

line 87:   tln <silent> 9998.320 Window.Toggle\ Full\ Screen\ Mode <C-W>:set invfullscreen<CR>

line 88:   an 9998.330 Window.-SEP2-^I^I^I    <Nop>

line 89:   " TODO! Grey out if no tabs are visible.

line 90:   an <silent> 9998.340 Window.Show\ Next\ Tab^I    :tabnext<CR>

line 91:   tln <silent> 9998.340 Window.Show\ Next\ Tab^I<C-W>:tabnext<CR>

line 92:   an <silent> 9998.350 Window.Show\ Previous\ Tab :tabprevious<CR>

line 93:   tln <silent> 9998.350 Window.Show\ Previous\ Tab <C-W>:tabprevious<CR>

line 94:   an 9998.360 Window.-SEP3-^I^I^I    <Nop>

line 95:   an <silent> 9998.370 Window.Bring\ All\ To\ Front <Nop>

line 96:   an <silent> 9998.380 Window.Stay\ in\ Front <Nop>

line 97:   an <silent> 9998.390 Window.Stay\ in\ Back <Nop>

line 98:   an <silent> 9998.400 Window.Stay\ Level\ Normal <Nop>

line 99: endif

line 100: 

line 101: " Help menu

line 102: if has("gui_macvim")

line 103:   an 9999.1 &Help.MacVim\ Help^I^I    :h gui_mac<CR>

line 104:   tln 9999.1 &Help.MacVim\ Help^I^I    <C-W>:h gui_mac<CR>

line 105:   an <silent> 9999.2 &Help.MacVim\ Website   <Nop>

line 106:   an 9999.3 &Help.What's\ New        <Nop>

line 107:   tln 9999.3 &Help.What's\ New        <Nop>

line 108:   an 9999.4 &Help.Release\ Notes        <Cmd>silent !open https://github.com/macvim-dev/macvim/releases<CR>

line 109:   tln 9999.4 &Help.Release\ Notes        <Cmd>silent !open https://github.com/macvim-dev/macvim/releases<CR>

line 110:   an 9999.5 &Help.-sep0-^I^I    <Nop>

line 111: endif

line 112: if has("gui_macvim")

line 113:   " Run vimtutor in GUI mode. Need to make sure to override the PATH so we use

line 114:   " this app instead of accidentally opening another installed Vim/MacVim.

line 115:   an 9999.6 &Help.Vim\ Tutor       :silent call system('PATH="$VIM/../../bin":/usr/bin:/bin:/usr/sbin:/sbin $VIM/../../bin/vimtutor -g&')<CR>

line 116:   tln 9999.6 &Help.Vim\ Tutor      <C-W>:silent call system('PATH="$VIM/../../bin":/usr/bin:/bin:/usr/sbin:/sbin $VIM/../../bin/vimtutor -g&')<CR>

line 117:   an 9999.7 &Help.-sep-vim-tutor-  <Nop>

line 118: endif

line 119: an 9999.10 &Help.&Overview<Tab><F1>^I:help<CR>

line 120: an 9999.20 &Help.&User\ Manual^I^I:help usr_toc<CR>

line 121: an 9999.30 &Help.&How-To\ Links^I^I:help how-to<CR>

line 122: an <silent> 9999.40 &Help.&Find\.\.\.^I:call <SID>Helpfind()<CR>

line 123: an 9999.45 &Help.-sep1-^I^I^I<Nop>

line 124: an 9999.50 &Help.&Credits^I^I:help credits<CR>

line 125: an 9999.60 &Help.Co&pying^I^I:help copying<CR>

line 126: an 9999.70 &Help.&Sponsor/Register^I:help sponsor<CR>

line 127: an 9999.70 &Help.O&rphans^I^I:help kcc<CR>

line 128: an 9999.75 &Help.-sep2-^I^I^I<Nop>

line 129: an 9999.80 &Help.&Version^I^I:version<CR>

line 130: an 9999.90 &Help.&About^I^I^I:intro<CR>

line 131: 

line 132: if exists(':tlmenu')

line 133:   tlnoremenu 9999.10 &Help.&Overview<Tab><F1>^I^I<C-W>:help<CR>

line 134:   tlnoremenu 9999.20 &Help.&User\ Manual^I^I<C-W>:help usr_toc<CR>

line 135:   tlnoremenu 9999.30 &Help.&How-To\ Links^I^I<C-W>:help how-to<CR>

line 136:   tlnoremenu <silent> 9999.40 &Help.&Find\.\.\.^I^I<C-W>:call <SID>Helpfind()<CR>

line 137:   tlnoremenu 9999.45 &Help.-sep1-^I^I^I<Nop>

line 138:   tlnoremenu 9999.50 &Help.&Credits^I^I^I<C-W>:help credits<CR>

line 139:   tlnoremenu 9999.60 &Help.Co&pying^I^I^I<C-W>:help copying<CR>

line 140:   tlnoremenu 9999.70 &Help.&Sponsor/Register^I^I<C-W>:help sponsor<CR>

line 141:   tlnoremenu 9999.70 &Help.O&rphans^I^I^I<C-W>:help kcc<CR>

line 142:   tlnoremenu 9999.75 &Help.-sep2-^I^I^I<Nop>

line 143:   tlnoremenu 9999.80 &Help.&Version^I^I^I<C-W>:version<CR>

line 144:   tlnoremenu 9999.90 &Help.&About^I^I^I<C-W>:intro<CR>

line 145: endif

line 146: 

line 147: def s:Helpfind()

line 160: 

line 161: " File menu

line 162: if has("gui_macvim")

line 163:   an <silent> 10.290 &File.New\ Window                          <Nop>

line 164:   an <silent> 10.291 &File.New\ Clean\ Window^I^I        <Nop>

line 165:   an <silent> 10.292 &File.New\ Clean\ Window\ (No\ Defaults)   <Nop>

line 166:   an  10.295 &File.New\ Tab^I^I^I    :tabnew<CR>

line 167:   tln 10.295 &File.New\ Tab^I^I^I    <C-W>:tabnew<CR>

line 168:   an <silent> 10.310 &File.Open…^I^I    <Nop>

line 169:   an <silent> 10.325 &File.Open\ Recent^I^I    <Nop>

line 170:   an 10.328 &File.-SEP0-^I^I^I    <Nop>

line 171:   an <silent> 10.330 &File.Close\ Window<Tab>:qa    :conf qa<CR>

line 172:   tln <silent> 10.330 &File.Close\ Window<Tab>:qa   <C-W>:conf qa<CR>

line 173:   an <silent> 10.332 &File.Close<Tab>:q^I^I    :conf q<CR>

line 174:   tln <silent> 10.332 &File.Close<Tab>:q^I^I    <C-W>:conf q<CR>

line 175:   an <silent> 10.341 &File.Save\ All^I^I    :browse conf wa<CR>

line 176:   an 10.350 &File.Save\ As…<Tab>:sav^I    :browse confirm saveas<CR>

line 177: else

line 178: endif

line 179: if !has("gui_macvim")

line 180:   an 10.310 &File.&Open\.\.\.<Tab>:e^I^I:browse confirm e<CR>

line 181: endif

line 182: an 10.320 &File.Sp&lit-Open\.\.\.<Tab>:sp^I:browse sp<CR>

line 183: an 10.320 &File.Open\ &Tab\.\.\.<Tab>:tabnew^I:browse tabnew<CR>

line 184: if !has("gui_macvim")

line 185:   an 10.325 &File.&New<Tab>:enew^I^I:confirm enew<CR>

line 186:   an <silent> 10.330 &File.&Close<Tab>:close :if winheight(2) < 0 && tabpagewinnr(2) == 0 <Bar>   confirm enew <Bar> else <Bar>   confirm close <Bar> endif<CR>

line 192:   tln <silent> 10.330 &File.&Close<Tab>:close <C-W>:if winheight(2) < 0 && tabpagewinnr(2) == 0 <Bar>   confirm enew <Bar> else <Bar>   confirm close <Bar> endif<CR>

line 198: endif

line 199: an 10.335 &File.-SEP1-^I^I^I^I<Nop>

line 200: an <silent> 10.340 &File.&Save<Tab>:w^I^I:if expand("%") == ""<Bar>browse confirm w<Bar>else<Bar>confirm w<Bar>endif<CR>

line 201: if !has("gui_macvim")

line 202:   an 10.350 &File.Save\ &As\.\.\.<Tab>:sav^I:browse confirm saveas<CR>

line 203: endif

line 204: 

line 205: if has("diff")

line 206:   an 10.400 &File.-SEP2-^I^I^I<Nop>

line 207:   an 10.410 &File.Split\ &Diff\ With\.\.\.^I:browse vert diffsplit<CR>

line 208:   an 10.420 &File.Split\ Patched\ &By\.\.\.^I:browse vert diffpatch<CR>

line 209: endif

line 210: 

line 211: if has("printer")

line 212:   an 10.500 &File.-SEP3-^I^I^I<Nop>

line 213:   an 10.510 &File.&Print^I^I^I:hardcopy<CR>

line 214:   vunmenu   &File.&Print

line 215:   vnoremenu &File.&Print^I^I^I:hardcopy<CR>

line 216: elseif has("unix")

line 217:   an 10.500 &File.-SEP3-^I^I^I<Nop>

line 218:   an 10.510 &File.&Print^I^I^I:w !lpr<CR>

line 219:   vunmenu   &File.&Print

line 220:   vnoremenu &File.&Print^I^I^I:w !lpr<CR>

line 221: endif

line 222: if !has("gui_macvim")

line 223:   an 10.600 &File.-SEP4-^I^I^I^I<Nop>

line 224:   an 10.610 &File.Sa&ve-Exit<Tab>:wqa^I^I:confirm wqa<CR>

line 225:   an 10.620 &File.E&xit<Tab>:qa^I^I^I:confirm qa<CR>

line 226: endif

line 227: 

line 228: def s:SelectAll()

line 231: 

line 232: " Edit menu

line 233: an 20.310 &Edit.&Undo<Tab>u^I^I^Iu

line 234: an 20.320 &Edit.&Redo<Tab>^R^I^I^I<C-R>

line 235: an 20.330 &Edit.Rep&eat<Tab>\.^I^I^I.

line 236: 

line 237: an 20.335 &Edit.-SEP1-^I^I^I^I<Nop>

line 238: vnoremenu 20.340 &Edit.Cu&t<Tab>"+x^I^I"+x

line 239: vnoremenu 20.350 &Edit.&Copy<Tab>"+y^I^I"+y

line 240: cnoremenu 20.350 &Edit.&Copy<Tab>"+y^I^I<C-Y>

line 241: if exists(':tlmenu')

line 242:   tlnoremenu 20.350 &Edit.&Copy<Tab>"+y ^I<C-W>:<C-Y><CR>

line 243: endif

line 244: nnoremenu 20.360 &Edit.&Paste<Tab>"+gP^I^I"+gP

line 245: cnoremenu^I &Edit.&Paste<Tab>"+gP^I^I<C-R>+

line 246: if exists(':tlmenu')

line 247:   tlnoremenu^I &Edit.&Paste<Tab>"+gP^I^I<C-W>"+

line 248: endif

line 249: exe 'vnoremenu <script> &Edit.&Paste<Tab>"+gP^I' .. paste#paste_cmd['v']

line 250: exe 'inoremenu <script> &Edit.&Paste<Tab>"+gP^I' .. paste#paste_cmd['i']

line 251: nnoremenu 20.370 &Edit.Put\ &Before<Tab>[p^I[p

line 252: inoremenu^I &Edit.Put\ &Before<Tab>[p^I<C-O>[p

line 253: nnoremenu 20.380 &Edit.Put\ &After<Tab>]p^I]p

line 254: inoremenu^I &Edit.Put\ &After<Tab>]p^I<C-O>]p

line 255: if has("win32")

line 256:   vnoremenu 20.390 &Edit.&Delete<Tab>x^I^Ix

line 257: endif

line 258: noremenu  <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I:<C-U>call <SID>SelectAll()<CR>

line 259: inoremenu <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I<C-O>:call <SID>SelectAll()<CR>

line 260: cnoremenu <script> <silent> 20.400 &Edit.&Select\ All<Tab>ggVG^I<C-U>call <SID>SelectAll()<CR>

line 261: 

line 262: an 20.405^I &Edit.-SEP2-^I^I^I^I<Nop>

line 263: if has("win32") || has("gui_gtk") || has("gui_kde") || has("gui_motif")

line 264:   an 20.410^I &Edit.&Find\.\.\.^I^I^I:promptfind<CR>

line 265:   vunmenu^I &Edit.&Find\.\.\.

line 266:   vnoremenu <silent>^I &Edit.&Find\.\.\.^I^Iy:promptfind <C-R>=<SID>FixFText()<CR><CR>

line 267:   an 20.420^I &Edit.Find\ and\ Rep&lace\.\.\.^I:promptrepl<CR>

line 268:   vunmenu^I &Edit.Find\ and\ Rep&lace\.\.\.

line 269:   vnoremenu <silent>^I &Edit.Find\ and\ Rep&lace\.\.\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>

line 270: elseif has("gui_macvim")

line 271:   an <silent> 20.410.10 &Edit.Find.Find…^I:promptfind<CR>

line 272:   vunmenu &Edit.Find.Find…

line 273:   vnoremenu <silent> &Edit.Find.Find…^Iy:promptfind <C-R>=<SID>FixFText()<CR><CR>

line 274:   an 20.410.20 &Edit.Find.Find\ Next^I^I^I<Nop>

line 275:   an 20.410.30 &Edit.Find.Find\ Previous^I^I<Nop>

line 276:   vnoremenu 20.410.35 &Edit.Find.Use\ Selection\ for\ Find^I<Nop>

line 277: else

line 278:   an 20.410^I &Edit.&Find<Tab>/^I^I^I/

line 279:   an 20.420^I &Edit.Find\ and\ Rep&lace<Tab>:%s^I:%s/

line 280:   vunmenu^I &Edit.Find\ and\ Rep&lace<Tab>:%s

line 281:   vnoremenu^I &Edit.Find\ and\ Rep&lace<Tab>:s^I:s/

line 282: endif

line 283: 

line 284: an 20.425^I &Edit.-SEP3-^I^I^I^I<Nop>

line 285: an 20.430^I &Edit.Settings\ &Window^I^I:options<CR>

line 286: an 20.435^I &Edit.Startup\ &Settings^I^I:call <SID>EditVimrc()<CR>

line 287: 

line 288: def s:EditVimrc()

line 310: 

line 311: def s:FixFText(): string

line 315: 

line 316: " Edit/Global Settings

line 317: an 20.440.100 &Edit.&Global\ Settings.Toggle\ Pattern\ &Highlight<Tab>:set\ hls!^I:set hls! hls?<CR>

line 318: an 20.440.110 &Edit.&Global\ Settings.Toggle\ &Ignoring\ Case<Tab>:set\ ic!^I:set ic! ic?<CR>

line 319: an 20.440.110 &Edit.&Global\ Settings.Toggle\ &Showing\ Matched\ Pairs<Tab>:set\ sm!^I:set sm! sm?<CR>

line 320: 

line 321: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 1\  :set so=1<CR>

line 322: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 2\  :set so=2<CR>

line 323: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 3\  :set so=3<CR>

line 324: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 4\  :set so=4<CR>

line 325: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 5\  :set so=5<CR>

line 326: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 7\  :set so=7<CR>

line 327: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 10\  :set so=10<CR>

line 328: an 20.440.120 &Edit.&Global\ Settings.&Context\ Lines.\ 100\  :set so=100<CR>

line 329: 

line 330: an 20.440.130.40 &Edit.&Global\ Settings.&Virtual\ Edit.Never :set ve=<CR>

line 331: an 20.440.130.50 &Edit.&Global\ Settings.&Virtual\ Edit.Block\ Selection :set ve=block<CR>

line 332: an 20.440.130.60 &Edit.&Global\ Settings.&Virtual\ Edit.Insert\ Mode :set ve=insert<CR>

line 333: an 20.440.130.70 &Edit.&Global\ Settings.&Virtual\ Edit.Block\ and\ Insert :set ve=block,insert<CR>

line 334: an 20.440.130.80 &Edit.&Global\ Settings.&Virtual\ Edit.Always :set ve=all<CR>

line 335: an 20.440.140 &Edit.&Global\ Settings.Toggle\ Insert\ &Mode<Tab>:set\ im!^I:set im!<CR>

line 336: an 20.440.145 &Edit.&Global\ Settings.Toggle\ Vi\ C&ompatibility<Tab>:set\ cp!^I:set cp!<CR>

line 337: an <silent> 20.440.150 &Edit.&Global\ Settings.Search\ &Path\.\.\.  :call <SID>SearchP()<CR>

line 338: an <silent> 20.440.160 &Edit.&Global\ Settings.Ta&g\ Files\.\.\.  :call <SID>TagFiles()<CR>

line 339: "

line 340: " GUI options

line 341: an 20.440.300 &Edit.&Global\ Settings.-SEP1-^I^I^I^I<Nop>

line 342: an <silent> 20.440.310 &Edit.&Global\ Settings.Toggle\ &Toolbar^I^I:call <SID>ToggleGuiOption("T")<CR>

line 343: an <silent> 20.440.320 &Edit.&Global\ Settings.Toggle\ &Bottom\ Scrollbar :call <SID>ToggleGuiOption("b")<CR>

line 344: an <silent> 20.440.330 &Edit.&Global\ Settings.Toggle\ &Left\ Scrollbar^I:call <SID>ToggleGuiOption("l")<CR>

line 345: an <silent> 20.440.340 &Edit.&Global\ Settings.Toggle\ &Right\ Scrollbar :call <SID>ToggleGuiOption("r")<CR>

line 346: 

line 347: def s:SearchP()

line 356: 

line 357: def s:TagFiles()

line 366: 

line 367: def s:ToggleGuiOption(option: string)

line 375: 

line 376: " Edit/File Settings

line 377: 

line 378: " Boolean options

line 379: an 20.440.100 &Edit.F&ile\ Settings.Toggle\ Line\ &Numbering<Tab>:set\ nu!^I:set nu! nu?<CR>

line 380: an 20.440.105 &Edit.F&ile\ Settings.Toggle\ Relati&ve\ Line\ Numbering<Tab>:set\ rnu!^I:set rnu! rnu?<CR>

line 381: an 20.440.110 &Edit.F&ile\ Settings.Toggle\ &List\ Mode<Tab>:set\ list!^I:set list! list?<CR>

line 382: an 20.440.120 &Edit.F&ile\ Settings.Toggle\ Line\ &Wrapping<Tab>:set\ wrap!^I:set wrap! wrap?<CR>

line 383: an 20.440.130 &Edit.F&ile\ Settings.Toggle\ W&rapping\ at\ Word<Tab>:set\ lbr!^I:set lbr! lbr?<CR>

line 384: an 20.440.160 &Edit.F&ile\ Settings.Toggle\ Tab\ &Expanding<Tab>:set\ et!^I:set et! et?<CR>

line 385: an 20.440.170 &Edit.F&ile\ Settings.Toggle\ &Auto\ Indenting<Tab>:set\ ai!^I:set ai! ai?<CR>

line 386: an 20.440.180 &Edit.F&ile\ Settings.Toggle\ &C-Style\ Indenting<Tab>:set\ cin!^I:set cin! cin?<CR>

line 387: 

line 388: " other options

line 389: an 20.440.600 &Edit.F&ile\ Settings.-SEP2-^I^I<Nop>

line 390: an 20.440.610.20 &Edit.F&ile\ Settings.&Shiftwidth.2^I:set sw=2 sw?<CR>

line 391: an 20.440.610.30 &Edit.F&ile\ Settings.&Shiftwidth.3^I:set sw=3 sw?<CR>

line 392: an 20.440.610.40 &Edit.F&ile\ Settings.&Shiftwidth.4^I:set sw=4 sw?<CR>

line 393: an 20.440.610.50 &Edit.F&ile\ Settings.&Shiftwidth.5^I:set sw=5 sw?<CR>

line 394: an 20.440.610.60 &Edit.F&ile\ Settings.&Shiftwidth.6^I:set sw=6 sw?<CR>

line 395: an 20.440.610.80 &Edit.F&ile\ Settings.&Shiftwidth.8^I:set sw=8 sw?<CR>

line 396: 

line 397: an 20.440.620.20 &Edit.F&ile\ Settings.Soft\ &Tabstop.2^I:set sts=2 sts?<CR>

line 398: an 20.440.620.30 &Edit.F&ile\ Settings.Soft\ &Tabstop.3^I:set sts=3 sts?<CR>

line 399: an 20.440.620.40 &Edit.F&ile\ Settings.Soft\ &Tabstop.4^I:set sts=4 sts?<CR>

line 400: an 20.440.620.50 &Edit.F&ile\ Settings.Soft\ &Tabstop.5^I:set sts=5 sts?<CR>

line 401: an 20.440.620.60 &Edit.F&ile\ Settings.Soft\ &Tabstop.6^I:set sts=6 sts?<CR>

line 402: an 20.440.620.80 &Edit.F&ile\ Settings.Soft\ &Tabstop.8^I:set sts=8 sts?<CR>

line 403: 

line 404: an <silent> 20.440.630 &Edit.F&ile\ Settings.Te&xt\ Width\.\.\.  :call <SID>TextWidth()<CR>

line 405: an <silent> 20.440.640 &Edit.F&ile\ Settings.&File\ Format\.\.\.  :call <SID>FileFormat()<CR>

line 406: 

line 407: def s:TextWidth()

line 419: 

line 420: def s:FileFormat()

line 444: 

line 445: let s:did_setup_color_schemes = 0

line 446: 

line 447: " Setup the Edit.Color Scheme submenu

line 448: def s:SetupColorSchemes()

line 469: 

line 470: if exists("do_no_lazyload_menus")

line 471:   call s:SetupColorSchemes()

line 472: else

line 473:   an <silent> 20.450 &Edit.Show\ C&olor\ Schemes\ in\ Menu :call <SID>SetupColorSchemes()<CR>

line 474: endif

line 475: 

line 476: 

line 477: " Setup the Edit.Keymap submenu

line 478: if has("keymap")

line 479:   let s:did_setup_keymaps = 0

line 480: 

line 481:   def s:SetupKeymaps()

line 500: 

line 501:   if exists("do_no_lazyload_menus")

line 502:     call s:SetupKeymaps()

line 503:   else

line 504:     an <silent> 20.460 &Edit.Show\ &Keymaps\ in\ Menu :call <SID>SetupKeymaps()<CR>

line 505:   endif

line 506: endif

line 507: 

line 508: if has("win32") || has("gui_motif") || has("gui_gtk") || has("gui_kde") || has("gui_photon") || has("gui_mac")

line 509:   an 20.470 &Edit.Select\ Fo&nt\.\.\.^I:set guifont=*<CR>

line 510: elseif has("gui_macvim")

line 511:   an 20.470 &Edit.-SEP4-                       <Nop>

line 512:   an 20.475.10 &Edit.Font.Show\ Fonts          <Nop>

line 513:   an 20.475.20 &Edit.Font.-SEP5-               <Nop>

line 514:   an 20.475.30 &Edit.Font.Bigger               <Nop>

line 515:   an 20.475.40 &Edit.Font.Smaller              <Nop>

line 516: endif

line 517: 

line 518: " Programming menu

line 519: if !exists("g:ctags_command")

line 520:   if has("vms")

line 521:     let g:ctags_command = "mc vim:ctags *.*"

line 522:   else

line 523:     let g:ctags_command = "ctags -R ."

line 524:   endif

line 525: endif

line 526: 

line 527: an 40.300 &Tools.&Jump\ to\ This\ Tag<Tab>g^]^Ig<C-]>

line 528: vunmenu &Tools.&Jump\ to\ This\ Tag<Tab>g^]

line 529: vnoremenu &Tools.&Jump\ to\ This\ Tag<Tab>g^]^Ig<C-]>

line 530: an 40.310 &Tools.Jump\ &Back<Tab>^T^I^I<C-T>

line 531: an 40.320 &Tools.Build\ &Tags\ File^I^I:exe "!" .. g:ctags_command<CR>

line 532: 

line 533: if has("folding") || has("spell")

line 534:   an 40.330 &Tools.-SEP1-^I^I^I^I^I^I<Nop>

line 535: endif

line 536: 

line 537: " Tools.Spelling Menu

line 538: if has("spell")

line 539:   an 40.335.110 &Tools.&Spelling.&Spell\ Check\ On^I^I:set spell<CR>

line 540:   an 40.335.120 &Tools.&Spelling.Spell\ Check\ &Off^I^I:set nospell<CR>

line 541:   an 40.335.130 &Tools.&Spelling.To\ &Next\ Error<Tab>]s^I]s

line 542:   an 40.335.130 &Tools.&Spelling.To\ &Previous\ Error<Tab>[s^I[s

line 543:   an 40.335.140 &Tools.&Spelling.Suggest\ &Corrections<Tab>z=^Iz=

line 544:   an 40.335.150 &Tools.&Spelling.&Repeat\ Correction<Tab>:spellrepall^I:spellrepall<CR>

line 545:   an 40.335.200 &Tools.&Spelling.-SEP1-^I^I^I^I<Nop>

line 546:   an 40.335.210 &Tools.&Spelling.Set\ Language\ to\ "en"^I:set spl=en spell<CR>

line 547:   an 40.335.220 &Tools.&Spelling.Set\ Language\ to\ "en_au"^I:set spl=en_au spell<CR>

line 548:   an 40.335.230 &Tools.&Spelling.Set\ Language\ to\ "en_ca"^I:set spl=en_ca spell<CR>

line 549:   an 40.335.240 &Tools.&Spelling.Set\ Language\ to\ "en_gb"^I:set spl=en_gb spell<CR>

line 550:   an 40.335.250 &Tools.&Spelling.Set\ Language\ to\ "en_nz"^I:set spl=en_nz spell<CR>

line 551:   an 40.335.260 &Tools.&Spelling.Set\ Language\ to\ "en_us"^I:set spl=en_us spell<CR>

line 552:   an <silent> 40.335.270 &Tools.&Spelling.&Find\ More\ Languages^I:call <SID>SpellLang()<CR>

line 553: 

line 554:   let s:undo_spelllang = ['aun &Tools.&Spelling.&Find\ More\ Languages']

line 555:   def s:SpellLang(encChanged = false)

line 598: endif

line 599: 

line 600: " Tools.Fold Menu

line 601: if has("folding")

line 602:   " open close folds

line 603:   an 40.340.110 &Tools.&Folding.&Enable/Disable\ Folds<Tab>zi^I^Izi

line 604:   an 40.340.120 &Tools.&Folding.&View\ Cursor\ Line<Tab>zv^I^Izv

line 605:   an 40.340.120 &Tools.&Folding.Vie&w\ Cursor\ Line\ Only<Tab>zMzx^IzMzx

line 606:   inoremenu 40.340.120 &Tools.&Folding.Vie&w\ Cursor\ Line\ Only<Tab>zMzx  <C-O>zM<C-O>zx

line 607:   an 40.340.130 &Tools.&Folding.C&lose\ More\ Folds<Tab>zm^I^Izm

line 608:   an 40.340.140 &Tools.&Folding.&Close\ All\ Folds<Tab>zM^I^IzM

line 609:   an 40.340.150 &Tools.&Folding.O&pen\ More\ Folds<Tab>zr^I^Izr

line 610:   an 40.340.160 &Tools.&Folding.&Open\ All\ Folds<Tab>zR^I^IzR

line 611:   " fold method

line 612:   an 40.340.200 &Tools.&Folding.-SEP1-^I^I^I<Nop>

line 613:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.M&anual^I:set fdm=manual<CR>

line 614:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.I&ndent^I:set fdm=indent<CR>

line 615:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.E&xpression :set fdm=expr<CR>

line 616:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.S&yntax^I:set fdm=syntax<CR>

line 617:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.&Diff^I:set fdm=diff<CR>

line 618:   an 40.340.210 &Tools.&Folding.Fold\ Met&hod.Ma&rker^I:set fdm=marker<CR>

line 619:   " create and delete folds

line 620:   vnoremenu 40.340.220 &Tools.&Folding.Create\ &Fold<Tab>zf^Izf

line 621:   an 40.340.230 &Tools.&Folding.&Delete\ Fold<Tab>zd^I^Izd

line 622:   an 40.340.240 &Tools.&Folding.Delete\ &All\ Folds<Tab>zD^IzD

line 623:   " moving around in folds

line 624:   an 40.340.300 &Tools.&Folding.-SEP2-^I^I^I^I<Nop>

line 625:   an 40.340.310.10 &Tools.&Folding.Fold\ Col&umn\ Width.\ &0\ ^I:set fdc=0<CR>

line 626:   an 40.340.310.20 &Tools.&Folding.Fold\ Col&umn\ Width.\ &2\ ^I:set fdc=2<CR>

line 627:   an 40.340.310.30 &Tools.&Folding.Fold\ Col&umn\ Width.\ &3\ ^I:set fdc=3<CR>

line 628:   an 40.340.310.40 &Tools.&Folding.Fold\ Col&umn\ Width.\ &4\ ^I:set fdc=4<CR>

line 629:   an 40.340.310.50 &Tools.&Folding.Fold\ Col&umn\ Width.\ &5\ ^I:set fdc=5<CR>

line 630:   an 40.340.310.60 &Tools.&Folding.Fold\ Col&umn\ Width.\ &6\ ^I:set fdc=6<CR>

line 631:   an 40.340.310.70 &Tools.&Folding.Fold\ Col&umn\ Width.\ &7\ ^I:set fdc=7<CR>

line 632:   an 40.340.310.80 &Tools.&Folding.Fold\ Col&umn\ Width.\ &8\ ^I:set fdc=8<CR>

line 633: endif  " has folding

line 634: 

line 635: if has("diff")

line 636:   an 40.350.100 &Tools.&Diff.&Update^I^I:diffupdate<CR>

line 637:   an 40.350.110 &Tools.&Diff.&Get\ Block^I:diffget<CR>

line 638:   vunmenu &Tools.&Diff.&Get\ Block

line 639:   vnoremenu &Tools.&Diff.&Get\ Block^I^I:diffget<CR>

line 640:   an 40.350.120 &Tools.&Diff.&Put\ Block^I:diffput<CR>

line 641:   vunmenu &Tools.&Diff.&Put\ Block

line 642:   vnoremenu &Tools.&Diff.&Put\ Block^I^I:diffput<CR>

line 643: endif

line 644: 

line 645: an 40.358 &Tools.-SEP2-^I^I^I^I^I<Nop>

line 646: an 40.360 &Tools.&Make<Tab>:make^I^I^I:make<CR>

line 647: an 40.370 &Tools.&List\ Errors<Tab>:cl^I^I^I:cl<CR>

line 648: an 40.380 &Tools.L&ist\ Messages<Tab>:cl!^I^I:cl!<CR>

line 649: an 40.390 &Tools.&Next\ Error<Tab>:cn^I^I^I:cn<CR>

line 650: an 40.400 &Tools.&Previous\ Error<Tab>:cp^I^I:cp<CR>

line 651: an 40.410 &Tools.&Older\ List<Tab>:cold^I^I^I:colder<CR>

line 652: an 40.420 &Tools.N&ewer\ List<Tab>:cnew^I^I^I:cnewer<CR>

line 653: an 40.430.50 &Tools.Error\ &Window.&Update<Tab>:cwin^I:cwin<CR>

line 654: an 40.430.60 &Tools.Error\ &Window.&Open<Tab>:copen^I:copen<CR>

line 655: an 40.430.70 &Tools.Error\ &Window.&Close<Tab>:cclose^I:cclose<CR>

line 656: 

line 657: an 40.520 &Tools.-SEP3-^I^I^I^I^I<Nop>

line 658: an <silent> 40.530 &Tools.&Convert\ to\ HEX<Tab>:%!xxd :call <SID>XxdConv()<CR>

line 660: an <silent> 40.540 &Tools.Conve&rt\ Back<Tab>:%!xxd\ -r :call <SID>XxdBack()<CR>

line 662: 

line 663: " Use a function to do the conversion, so that it also works with 'insertmode'

line 664: " set.

line 665: def s:XxdConv()

line 678: 

line 679: def s:XxdBack()

line 693: 

line 694: def s:XxdFind()

line 707: 

line 708: let s:did_setup_compilers = 0

line 709: 

line 710: " Setup the Tools.Compiler submenu

line 711: def s:SetupCompilers()

line 727: 

line 728: if exists("do_no_lazyload_menus")

line 729:   call s:SetupCompilers()

line 730: else

line 731:   an <silent> 30.440 &Tools.Show\ Compiler\ Se&ttings\ in\ Menu :call <SID>SetupCompilers()<CR>

line 732: endif

line 733: 

line 734: " Load ColorScheme, Compiler Setting and Keymap menus when idle.

line 735: if !exists("do_no_lazyload_menus")

line 736:   def s:SetupLazyloadMenus()

line 743:   augroup SetupLazyloadMenus

line 744:     au!

line 745:     au CursorHold,CursorHoldI * call <SID>SetupLazyloadMenus() | au! SetupLazyloadMenus

line 746:   augroup END

line 747: endif

line 748: 

line 749: 

line 750: if !exists("no_buffers_menu")

line 751: 

line 752: " Buffer list menu -- Setup functions & actions

line 753: 

line 754: " wait with building the menu until after loading 'session' files. Makes

line 755: " startup faster.

line 756: let s:bmenu_wait = 1

line 757: 

line 758: " Dictionary of buffer number to name. This helps prevent problems where a

line 759: " buffer as renamed and we didn't keep track of that.

line 760: let s:bmenu_items = {}

line 761: 

line 762: if !exists("bmenu_priority")

line 763:   let bmenu_priority = 60

line 764: endif

line 765: 

line 766: " invoked from a BufCreate or BufFilePost autocommand

line 767: def s:BMAdd()

line 782: 

line 783: " invoked from a BufDelete or BufFilePre autocommand

line 784: def s:BMRemove()

line 795: 

line 796: " Return non-zero if buffer with number "name" / "num" is useful to add in the

line 797: " buffer menu.

line 798: def s:BMCanAdd(name: string, num: number): bool

line 818: 

line 819: " Create the buffer menu (delete an existing one first).

line 820: def s:BMShow()

line 875: 

line 876: def s:BMHash(name: string): number

line 891: 

line 892: def s:BMHash2(name: string): string

line 910: 

line 911: " Insert a buffer name into the buffer menu.

line 912: def s:BMFilename(name: string, num: number)

line 926: 

line 927: " Truncate a long path to fit it in a menu item.

line 928: if !exists("g:bmenu_max_pathlen")

line 929:   let g:bmenu_max_pathlen = 35

line 930: endif

line 931: 

line 932: def s:BMTruncName(fname: string): string

line 951: 

line 952: def s:BMMunge(fname: string, bnum: number): string

line 973: 

line 974: " When just starting Vim, load the buffer menu later.  Don't do this for MacVim

line 975: " because it makes the menu flicker each time a new editor window is opened.

line 976: if has("vim_starting") && !has("gui_macvim")

line 977:   augroup LoadBufferMenu

line 978:     au! VimEnter * if !exists("no_buffers_menu") | call <SID>BMShow() | endif

line 979:     au  VimEnter * au! LoadBufferMenu

line 980:   augroup END

line 981: else

line 982:   call <SID>BMShow()

line 983: endif

line 984: 

line 985: endif " !exists("no_buffers_menu")

line 986: 

line 987: " Window menu

line 988: if !has("gui_macvim")

line 989: an 70.300 &Window.&New<Tab>^Wn^I^I^I<C-W>n

line 990: an 70.310 &Window.S&plit<Tab>^Ws^I^I<C-W>s

line 991: an 70.320 &Window.Sp&lit\ To\ #<Tab>^W^^^I<C-W><C-^>

line 992: an 70.330 &Window.Split\ &Vertically<Tab>^Wv^I<C-W>v

line 993: an <silent> 70.332 &Window.Split\ File\ E&xplorer^I:call MenuExplOpen()<CR>

line 994: if !exists("*MenuExplOpen")

line 995:   def MenuExplOpen()

line 1002: endif

line 1003: an 70.335 &Window.-SEP1-^I^I^I^I<Nop>

line 1004: an 70.340 &Window.&Close<Tab>^Wc^I^I^I:confirm close<CR>

line 1005: an 70.345 &Window.Close\ &Other(s)<Tab>^Wo^I^I:confirm only<CR>

line 1006: an 70.350 &Window.-SEP2-^I^I^I^I<Nop>

line 1007: an 70.355 &Window.Move\ &To.&Top<Tab>^WK^I^I<C-W>K

line 1008: an 70.355 &Window.Move\ &To.&Bottom<Tab>^WJ^I^I<C-W>J

line 1009: an 70.355 &Window.Move\ &To.&Left\ Side<Tab>^WH^I^I<C-W>H

line 1010: an 70.355 &Window.Move\ &To.&Right\ Side<Tab>^WL^I<C-W>L

line 1011: an 70.360 &Window.Rotate\ &Up<Tab>^WR^I^I^I<C-W>R

line 1012: an 70.362 &Window.Rotate\ &Down<Tab>^Wr^I^I^I<C-W>r

line 1013: an 70.365 &Window.-SEP3-^I^I^I^I<Nop>

line 1014: an 70.370 &Window.&Equal\ Size<Tab>^W=^I^I^I<C-W>=

line 1015: an 70.380 &Window.&Max\ Height<Tab>^W_^I^I^I<C-W>_

line 1016: an 70.390 &Window.M&in\ Height<Tab>^W1_^I^I^I<C-W>1_

line 1017: an 70.400 &Window.Max\ &Width<Tab>^W\|^I^I^I<C-W>\|

line 1018: an 70.410 &Window.Min\ Widt&h<Tab>^W1\|^I^I^I<C-W>1\|

line 1019: endif " !has("gui_macvim")

line 1020: 

line 1021: " The popup menu

line 1022: if has("gui_macvim")

line 1023:   vnoremenu 1.05 PopUp.Look\ Up     :<C-U>call macvim#ShowDefinitionSelected()<CR>

line 1024:   vnoremenu 1.06 PopUp.-SEPLookUp-      <Nop>

line 1025: endif

line 1026: 

line 1027: an 1.10 PopUp.&Undo^I^I^Iu

line 1028: an 1.15 PopUp.-SEP1-^I^I^I<Nop>

line 1029: vnoremenu 1.20 PopUp.Cu&t^I^I"+x

line 1030: vnoremenu 1.30 PopUp.&Copy^I^I"+y

line 1031: cnoremenu 1.30 PopUp.&Copy^I^I<C-Y>

line 1032: nnoremenu 1.40 PopUp.&Paste^I^I"+gP

line 1033: cnoremenu 1.40 PopUp.&Paste^I^I<C-R>+

line 1034: exe 'vnoremenu <script> 1.40 PopUp.&Paste^I' .. paste#paste_cmd['v']

line 1035: exe 'inoremenu <script> 1.40 PopUp.&Paste^I' .. paste#paste_cmd['i']

line 1036: vnoremenu 1.50 PopUp.&Delete^I^Ix

line 1037: an 1.55 PopUp.-SEP2-^I^I^I<Nop>

line 1038: vnoremenu 1.60 PopUp.Select\ Blockwise^I<C-V>

line 1039: 

line 1040: nnoremenu 1.70 PopUp.Select\ &Word^Ivaw

line 1041: onoremenu 1.70 PopUp.Select\ &Word^Iaw

line 1042: vnoremenu 1.70 PopUp.Select\ &Word^I<C-C>vaw

line 1043: inoremenu 1.70 PopUp.Select\ &Word^I<C-O>vaw

line 1044: cnoremenu 1.70 PopUp.Select\ &Word^I<C-C>vaw

line 1045: 

line 1046: nnoremenu 1.73 PopUp.Select\ &Sentence^Ivas

line 1047: onoremenu 1.73 PopUp.Select\ &Sentence^Ias

line 1048: vnoremenu 1.73 PopUp.Select\ &Sentence^I<C-C>vas

line 1049: inoremenu 1.73 PopUp.Select\ &Sentence^I<C-O>vas

line 1050: cnoremenu 1.73 PopUp.Select\ &Sentence^I<C-C>vas

line 1051: 

line 1052: nnoremenu 1.77 PopUp.Select\ Pa&ragraph^Ivap

line 1053: onoremenu 1.77 PopUp.Select\ Pa&ragraph^Iap

line 1054: vnoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-C>vap

line 1055: inoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-O>vap

line 1056: cnoremenu 1.77 PopUp.Select\ Pa&ragraph^I<C-C>vap

line 1057: 

line 1058: nnoremenu 1.80 PopUp.Select\ &Line^IV

line 1059: onoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1060: vnoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1061: inoremenu 1.80 PopUp.Select\ &Line^I<C-O>V

line 1062: cnoremenu 1.80 PopUp.Select\ &Line^I<C-C>V

line 1063: 

line 1064: nnoremenu 1.90 PopUp.Select\ &Block^I<C-V>

line 1065: onoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1066: vnoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1067: inoremenu 1.90 PopUp.Select\ &Block^I<C-O><C-V>

line 1068: cnoremenu 1.90 PopUp.Select\ &Block^I<C-C><C-V>

line 1069: 

line 1070: noremenu  <script> <silent> 1.100 PopUp.Select\ &All^I:<C-U>call <SID>SelectAll()<CR>

line 1071: inoremenu <script> <silent> 1.100 PopUp.Select\ &All^I<C-O>:call <SID>SelectAll()<CR>

line 1072: cnoremenu <script> <silent> 1.100 PopUp.Select\ &All^I<C-U>call <SID>SelectAll()<CR>

line 1073: 

line 1074: if has("spell")

line 1075:   " Spell suggestions in the popup menu.  Note that this will slow down the

line 1076:   " appearance of the menu!

line 1077:   def s:SpellPopup()

line 1130: 

line 1131:   def s:SpellReplace(n: number)

line 1138: 

line 1139:   def s:SpellDel()

line 1146: 

line 1147:   augroup SpellPopupMenu

line 1148:     au! MenuPopup * call <SID>SpellPopup()

line 1149:   augroup END

line 1150: endif

line 1151: 

line 1152: " The GUI toolbar (for MS-Windows and GTK)

line 1153: if has("toolbar")

line 1154:   an 1.10 ToolBar.Open^I^I^I:browse confirm e<CR>

line 1155:   an <silent> 1.20 ToolBar.Save^I^I:if expand("%") == ""<Bar>browse confirm w<Bar>else<Bar>confirm w<Bar>endif<CR>

line 1156:   an 1.30 ToolBar.SaveAll^I^I:browse confirm wa<CR>

line 1157: 

line 1158:   if has("printer")

line 1159:     an 1.40   ToolBar.Print^I^I:hardcopy<CR>

line 1160:     vunmenu   ToolBar.Print

line 1161:     vnoremenu ToolBar.Print^I^I:hardcopy<CR>

line 1162:   elseif has("unix")

line 1163:     an 1.40   ToolBar.Print^I^I:w !lpr<CR>

line 1164:     vunmenu   ToolBar.Print

line 1165:     vnoremenu ToolBar.Print^I^I:w !lpr<CR>

line 1166:   endif

line 1167: 

line 1168:   an 1.45 ToolBar.-sep1-^I^I<Nop>

line 1169:   an 1.50 ToolBar.Undo^I^I^Iu

line 1170:   an 1.60 ToolBar.Redo^I^I^I<C-R>

line 1171: 

line 1172:   an 1.65 ToolBar.-sep2-^I^I<Nop>

line 1173:   vnoremenu 1.70 ToolBar.Cut^I^I"+x

line 1174:   vnoremenu 1.80 ToolBar.Copy^I^I"+y

line 1175:   cnoremenu 1.80 ToolBar.Copy^I^I<C-Y>

line 1176:   nnoremenu 1.90 ToolBar.Paste^I^I"+gP

line 1177:   cnoremenu^I ToolBar.Paste^I^I<C-R>+

line 1178:   exe 'vnoremenu <script>^I ToolBar.Paste^I' .. paste#paste_cmd['v']

line 1179:   exe 'inoremenu <script>^I ToolBar.Paste^I' .. paste#paste_cmd['i']

line 1180: 

line 1181:   if !has("gui_athena") && !has("gui_macvim")

line 1182:     an 1.95   ToolBar.-sep3-^I^I<Nop>

line 1183:     an 1.100  ToolBar.Replace^I^I:promptrepl<CR>

line 1184:     vunmenu   ToolBar.Replace

line 1185:     vnoremenu ToolBar.Replace^I^Iy:promptrepl <C-R>=<SID>FixFText()<CR><CR>

line 1186:     an 1.110  ToolBar.FindNext^I^In

line 1187:     an 1.120  ToolBar.FindPrev^I^IN

line 1188:   endif

line 1189: 

line 1190:   if !has("gui_macvim")

line 1191:     an 1.215 ToolBar.-sep5-^I^I<Nop>

line 1192:   endif

line 1193:   an <silent> 1.220 ToolBar.LoadSesn^I:call <SID>LoadVimSesn()<CR>

line 1194:   an <silent> 1.230 ToolBar.SaveSesn^I:call <SID>SaveVimSesn()<CR>

line 1195:   an 1.240 ToolBar.RunScript^I^I:browse so<CR>

line 1196: 

line 1197:   if !has("gui_macvim")

line 1198:     an 1.245 ToolBar.-sep6-^I^I<Nop>

line 1199:   endif

line 1200:   an 1.250 ToolBar.Make^I^I^I:make<CR>

line 1201:   if !has("gui_macvim")

line 1202:     an 1.270 ToolBar.RunCtags^I^I:exe "!" .. g:ctags_command<CR>

line 1203:     an 1.280 ToolBar.TagJump^I^Ig<C-]>

line 1204:   endif

line 1205: 

line 1206:   an 1.295 ToolBar.-sep7-^I^I<Nop>

line 1207:   an 1.300 ToolBar.Help^I^I^I:help<CR>

line 1208:   if !has("gui_macvim")

line 1209:     an <silent> 1.310 ToolBar.FindHelp^I:call <SID>Helpfind()<CR>

line 1210:   endif

line 1211: 

line 1212: " Only set the tooltips here if not done in a language menu file

line 1213: if exists("*Do_toolbar_tmenu")

line 1214:   call Do_toolbar_tmenu()

line 1215: else

line 1216:   let did_toolbar_tmenu = 1

line 1217:   tmenu ToolBar.Open^I^IOpen file

line 1218:   tmenu ToolBar.Save^I^ISave current file

line 1219:   tmenu ToolBar.SaveAll^I^ISave all files

line 1220:   tmenu ToolBar.Print^I^IPrint

line 1221:   tmenu ToolBar.Undo^I^IUndo

line 1222:   tmenu ToolBar.Redo^I^IRedo

line 1223:   tmenu ToolBar.Cut^I^ICut to clipboard

line 1224:   tmenu ToolBar.Copy^I^ICopy to clipboard

line 1225:   tmenu ToolBar.Paste^I^IPaste from Clipboard

line 1226:   if !has("gui_athena")

line 1227:     tmenu ToolBar.Replace^IFind / Replace...

line 1228:     tmenu ToolBar.FindNext^IFind Next

line 1229:     tmenu ToolBar.FindPrev^IFind Previous

line 1230:   endif

line 1231:   tmenu ToolBar.LoadSesn^IChoose a session to load

line 1232:   tmenu ToolBar.SaveSesn^ISave current session

line 1233:   tmenu ToolBar.RunScript^IChoose a Vim Script to run

line 1234:   tmenu ToolBar.Make^I^IMake current project (:make)

line 1235:   tmenu ToolBar.RunCtags^IBuild tags in current directory tree (!ctags -R .)

line 1236:   tmenu ToolBar.TagJump^I^IJump to tag under cursor

line 1237:   tmenu ToolBar.Help^I^IVim Help

line 1238:   tmenu ToolBar.FindHelp^ISearch Vim Help

line 1239: endif

line 1240: 

line 1241: " Select a session to load; default to current session name if present

line 1242: def s:LoadVimSesn()

line 1251: 

line 1252: " Select a session to save; default to current session name if present

line 1253: def s:SaveVimSesn()

line 1259: 

line 1260: endif

line 1261: 

line 1262: 

line 1263: if has("gui_macvim")

line 1264:   "

line 1265:   " Set up menu key equivalents (these should always have the 'D' modifier

line 1266:   " set), action bindings, and alternate items.

line 1267:   "

line 1268:   " Note: menu items which should execute an action are bound to <Nop>; the

line 1269:   " action message is specified here via the :macmenu command.

line 1270:   "

line 1271:   macm File.New\ Window^I^I^I^Ikey=<D-n> action=newWindow:

line 1272:   macm File.New\ Clean\ Window^I^I        key=<D-N> action=newWindowClean:

line 1273:   macm File.New\ Clean\ Window\ (No\ Defaults)  key=<D-M-N> action=newWindowCleanNoDefaults: alt=YES

line 1274:   macm File.New\ Tab^I^I^I^Ikey=<D-t>

line 1275:   macm File.Open…^I^I^I^Ikey=<D-o> action=fileOpen:

line 1276:   macm File.Open\ Tab\.\.\.<Tab>:tabnew^I^Ikey=<D-T>

line 1277:   macm File.Open\ Recent^I^I^Iaction=recentFilesDummy:

line 1278:   macm File.Close\ Window<Tab>:qa^I^Ikey=<D-W>

line 1279:   macm File.Close^I^I^I^Ikey=<D-w> action=performClose:

line 1280:   macm File.Save<Tab>:w^I^I^I^Ikey=<D-s>

line 1281:   macm File.Save\ All^I^I^I^Ikey=<D-M-s> alt=YES

line 1282:   macm File.Save\ As…<Tab>:sav^I^Ikey=<D-S>

line 1283:   macm File.Print^I^I^I^Ikey=<D-p>

line 1284: 

line 1285:   macm Edit.Undo<Tab>u^I^I^I^Ikey=<D-z> action=undo:

line 1286:   macm Edit.Redo<Tab>^R^I^I^I^Ikey=<D-Z> action=redo:

line 1287:   macm Edit.Cut<Tab>"+x^I^I^I^Ikey=<D-x> action=cut:

line 1288:   macm Edit.Copy<Tab>"+y^I^I^Ikey=<D-c> action=copy:

line 1289:   macm Edit.Paste<Tab>"+gP^I^I^Ikey=<D-v> action=paste:

line 1290:   macm Edit.Select\ All<Tab>ggVG^I^Ikey=<D-a> action=selectAll:

line 1291:   macm Edit.Find.Find…^I^I^Ikey=<D-f>

line 1292:   macm Edit.Find.Find\ Next^I^I^Ikey=<D-g> action=findNext:

line 1293:   macm Edit.Find.Find\ Previous^I^I^Ikey=<D-G> action=findPrevious:

line 1294:   macm Edit.Find.Use\ Selection\ for\ Find^Ikey=<D-e> action=useSelectionForFind:

line 1295:   macm Edit.Font.Show\ Fonts^I^I^Iaction=orderFrontFontPanel:

line 1296:   macm Edit.Font.Bigger^I^I^I^Ikey=<D-=> action=fontSizeUp:

line 1297:   macm Edit.Font.Smaller^I^I^Ikey=<D--> action=fontSizeDown:

line 1298: 

line 1299:   macm Tools.Spelling.To\ Next\ Error<Tab>]s^Ikey=<D-;>

line 1300:   macm Tools.Spelling.Suggest\ Corrections<Tab>z=   key=<D-:>

line 1301:   macm Tools.Make<Tab>:make^I^I^Ikey=<D-b>

line 1302:   macm Tools.List\ Errors<Tab>:cl^I^Ikey=<D-l>

line 1303:   macm Tools.Next\ Error<Tab>:cn^I^Ikey=<D-C-Right>

line 1304:   macm Tools.Previous\ Error<Tab>:cp^I^Ikey=<D-C-Left>

line 1305:   macm Tools.Older\ List<Tab>:cold^I^Ikey=<D-C-Up>

line 1306:   macm Tools.Newer\ List<Tab>:cnew^I^Ikey=<D-C-Down>

line 1307: 

line 1308:   macm Window.Minimize^I^Ikey=<D-m>^Iaction=performMiniaturize:

line 1309:   macm Window.Minimize\ All^Ikey=<D-M-m>^Iaction=miniaturizeAll:^Ialt=YES

line 1310:   macm Window.Zoom^I^Ikey=<D-C-z>^Iaction=performZoom:

line 1311:   macm Window.Zoom\ All^I^Ikey=<D-M-C-z>^Iaction=zoomAll:^I^Ialt=YES

line 1312:   macm Window.Toggle\ Full\ Screen\ Mode^Ikey=<D-C-f>

line 1313:   macm Window.Show\ Next\ Tab^I^I^Ikey=<D-}>

line 1314:   macm Window.Show\ Previous\ Tab^I^Ikey=<D-{>

line 1315:   macm Window.Bring\ All\ To\ Front^I^Iaction=arrangeInFront:

line 1316:   macm Window.Stay\ in\ Front ^Iaction=stayInFront:

line 1317:   macm Window.Stay\ in\ Back ^Iaction=stayInBack:

line 1318:   macm Window.Stay\ Level\ Normal action=stayLevelNormal:

line 1319: 

line 1320:   macm Help.MacVim\ Help^I^I^Ikey=<D-?>

line 1321:   macm Help.MacVim\ Website^I^I^Iaction=openWebsite:

line 1322:   macm Help.What's\ New^I^I^I    action=showWhatsNew:

line 1323: endif " if has("gui_macvim")

line 1324: 

line 1325: endif " !exists("did_install_default_menus")

line 1326: 

line 1327: " Define these items always, so that syntax can be switched on when it wasn't.

line 1328: " But skip them when the Syntax menu was disabled by the user.

line 1329: if !exists("did_install_syntax_menu")

line 1330:   an 50.212 &Syntax.&Manual^I^I:syn manual<CR>

line 1331:   an 50.214 &Syntax.A&utomatic^I^I:syn on<CR>

line 1332:   an <silent> 50.216 &Syntax.On/Off\ for\ &This\ File :call <SID>SynOnOff()<CR>

line 1333:   if !exists("*s:SynOnOff")

line 1334:     def s:SynOnOff()

line 1344:   endif

line 1345: endif

line 1346: 

line 1347: 

line 1348: " Install the Syntax menu only when filetype.vim has been loaded or when

line 1349: " manual syntax highlighting is enabled.

line 1350: " Avoid installing the Syntax menu twice.

line 1351: if (exists("did_load_filetypes") || exists("syntax_on")) && !exists("did_install_syntax_menu")

line 1353:   let did_install_syntax_menu = 1

line 1354: 

line 1355: " Skip setting up the individual syntax selection menus unless

line 1356: " do_syntax_sel_menu is defined (it takes quite a bit of time).

line 1357: if exists("do_syntax_sel_menu")

line 1358:   runtime! synmenu.vim

line 1359: else

line 1360:   an <silent> 50.10 &Syntax.&Show\ File\ Types\ in\ Menu^I:let do_syntax_sel_menu = 1<Bar>runtime! synmenu.vim<Bar>aunmenu &Syntax.&Show\ File\ Types\ in\ Menu<CR>

line 1361:   an 50.195 &Syntax.-SEP1-^I^I<Nop>

line 1362: endif

line 1363: 

line 1364: an 50.210 &Syntax.&Off^I^I^I:syn off<CR>

line 1365: an 50.700 &Syntax.-SEP3-^I^I<Nop>

line 1366: an 50.710 &Syntax.Co&lor\ Test^I^I:sp $VIMRUNTIME/syntax/colortest.vim<Bar>so %<CR>

line 1367: an 50.720 &Syntax.&Highlight\ Test^I:runtime syntax/hitest.vim<CR>

line 1368: an 50.730 &Syntax.&Convert\ to\ HTML^I:runtime syntax/2html.vim<CR>

line 1369: 

line 1370: " Uncomment the next line to compile the functions early to find any mistakes

line 1371: " defcompile

line 1372: 

line 1373: endif " !exists("did_install_syntax_menu")

line 1374: 

line 1375: " Restore the previous value of 'cpoptions'.

line 1376: let &cpo = s:cpo_save

line 1377: unlet s:cpo_save

line 1378: 

line 1379: 

line 1380: if has("touchbar")

line 1381:   " Set up default Touch Bar buttons.

line 1382:   " 1. Smart fullscreen icon that toggles between going full screen or not.

line 1383: 

line 1384:   if !exists("g:macvim_default_touchbar_fullscreen") || g:macvim_default_touchbar_fullscreen

line 1385:     an icon=NSTouchBarEnterFullScreenTemplate 1.20 TouchBar.EnterFullScreen :set fullscreen<CR>

line 1386:     tln icon=NSTouchBarEnterFullScreenTemplate 1.20 TouchBar.EnterFullScreen <C-W>:set fullscreen<CR>

line 1387:   endif

line 1388: 

line 1389:   let s:touchbar_fullscreen=0

line 1390:   func! s:SetupFullScreenTouchBar()

line 1409:   aug FullScreenTouchBar

line 1410:     au!

line 1411:     au VimEnter * call <SID>SetupFullScreenTouchBar()

line 1412:     au OptionSet fullscreen call <SID>SetupFullScreenTouchBar()

line 1413:   aug END

line 1414: 

line 1415:   " 2. Character (i.e. emojis) picker. Only in modes where user is actively

line 1416:   " entering text.

line 1417:   if !exists("g:macvim_default_touchbar_characterpicker") || g:macvim_default_touchbar_characterpicker

line 1418:     inoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1419:     cnoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1420:     tlnoremenu 1.40 TouchBar.-characterpicker- <Nop>

line 1421:   endif

line 1422: endif

line 1423: 

line 1424: " vim: set sw=2 tabstop=8 :

finished sourcing $VIMRUNTIME/menu.vim
chdir(/Applications/MacVim.app/Contents/Resources/vim)
fchdir() to previous dir
sourcing "$VIM/gvimrc"
line 1: " System gvimrc file for MacVim

line 2: "

line 3: " Author:       Bjorn Winckler <bjorn.winckler@gmail.com>

line 4: " Maintainer:   macvim-dev (https://github.com/macvim-dev)

line 5: 

line 6: 

line 7: " Make sure the '<' and 'C' flags are not included in 'cpoptions', otherwise

line 8: " <CR> would not be recognized.  See ":help 'cpoptions'".

line 9: let s:cpo_save = &cpo

line 10: set cpo&vim

line 11: 

line 12: 

line 13: "

line 14: " Global default options

line 15: "

line 16: 

line 17: if !exists("syntax_on")

line 18:   syntax on

line 19: endif

line 20: 

line 21: " Load the MacVim color scheme.  This can be disabled by loading another color

line 22: " scheme with the :colorscheme command, or by adding the line

line 23: "   let macvim_skip_colorscheme=1

line 24: " to ~/.vimrc.

line 25: if !exists("macvim_skip_colorscheme") && !exists("colors_name")

line 26:     colorscheme macvim

line 27: endif

line 28: 

line 29: " To make tabs more readable, the label only contains the tail of the file

line 30: " name and the buffer modified flag.

line 31: if empty(&guitablabel)

line 32:   set guitablabel=%M%t

line 33: endif

line 34: 

line 35: " Send print jobs to Preview.app.  The user can then print from it.

line 36: set printexpr=macvim#PreviewConvertPostScript()

line 37: 

line 38: " askpass

line 39: let $SSH_ASKPASS = simplify($VIM . '/../../Resources') . '/macvim-askpass'

line 40: let $SUDO_ASKPASS = $SSH_ASKPASS

line 41: 

line 42: 

line 43: " This is so that HIG Cmd and Option movement mappings can be disabled by

line 44: " adding the line

line 45: "   let macvim_skip_cmd_opt_movement = 1

line 46: " to ~/.vimrc.

line 47: if !exists("macvim_skip_cmd_opt_movement")

line 48:   no   <D-Left>       <Home>

line 49:   no!  <D-Left>       <Home>

line 50:   no   <M-Left>       <C-Left>

line 51:   no!  <M-Left>       <C-Left>

line 52: 

line 53:   no   <D-Right>      <End>

line 54:   no!  <D-Right>      <End>

line 55:   no   <M-Right>      <C-Right>

line 56:   no!  <M-Right>      <C-Right>

line 57: 

line 58:   no   <D-Up>         <C-Home>

line 59:   ino  <D-Up>         <C-Home>

line 60:   no   <M-Up>         {

line 61:   ino  <M-Up>         <C-o>{

line 62: 

line 63:   no   <D-Down>       <C-End>

line 64:   ino  <D-Down>       <C-End>

line 65:   no   <M-Down>       }

line 66:   ino  <M-Down>       <C-o>}

line 67: 

line 68:   ino  <M-BS>         <C-w>

line 69:   ino  <D-BS>         <C-u>

line 70: endif " !exists("macvim_skip_cmd_opt_movement")

line 71: 

line 72: 

line 73: " This is so that the HIG shift movement related settings can be enabled by

line 74: " adding the line

line 75: "   let macvim_hig_shift_movement = 1

line 76: " to ~/.vimrc.

line 77: if exists("macvim_hig_shift_movement")

line 78:   " Shift + special movement key (<S-Left>, etc.) and mouse starts insert mode

line 79:   set selectmode=mouse,key

line 80:   set keymodel=startsel,stopsel

line 81: 

line 82:   " HIG related shift + special movement key mappings

line 83:   nn   <S-D-Left>     <S-Home>

line 84:   vn   <S-D-Left>     <S-Home>

line 85:   ino  <S-D-Left>     <S-Home>

line 86:   nn   <S-M-Left>     <S-C-Left>

line 87:   vn   <S-M-Left>     <S-C-Left>

line 88:   ino  <S-M-Left>     <S-C-Left>

line 89: 

line 90:   nn   <S-D-Right>    <S-End>

line 91:   vn   <S-D-Right>    <S-End>

line 92:   ino  <S-D-Right>    <S-End>

line 93:   nn   <S-M-Right>    <S-C-Right>

line 94:   vn   <S-M-Right>    <S-C-Right>

line 95:   ino  <S-M-Right>    <S-C-Right>

line 96: 

line 97:   nn   <S-D-Up>       <S-C-Home>

line 98:   vn   <S-D-Up>       <S-C-Home>

line 99:   ino  <S-D-Up>       <S-C-Home>

line 100: 

line 101:   nn   <S-D-Down>     <S-C-End>

line 102:   vn   <S-D-Down>     <S-C-End>

line 103:   ino  <S-D-Down>     <S-C-End>

line 104: endif " exists("macvim_hig_shift_movement")

line 105: 

line 106: 

line 107: " Restore the previous value of 'cpoptions'.

line 108: let &cpo = s:cpo_save

line 109: unlet s:cpo_save

finished sourcing $VIM/gvimrc
chdir(/Users/piotr)
fchdir() to previous dir
could not source "$HOME/.gvimrc"
chdir(/Users/piotr/.vim)
fchdir() to previous dir
could not source "~/.vim/gvimrc"
chdir(/Users/piotr/.config/vim)
fchdir() to previous dir
sourcing "~/.config/vim/gvimrc"
line 1: set guioptions-=T " disable the toolbar

line 2: set guioptions-=r " disable the right-hand scroll bar

line 3: set guioptions-=L " disable the left-hand scroll bar

line 4: set guioptions-=e " use plain text tabline

line 5: 

line 6: if has('mac')

line 7:   if has('gui_macvim')

line 8:     set nomacligatures

line 9:     set macthinstrokes " Seems not to work in new macOS https://github.com/macvim-dev/macvim/issues/1188

line 10:   end

line 11: endif

line 12: 

line 13: set guifont=IosevkaTerm\ NFM:h16

line 14: " set guifont=Input\ Mono\ Condensed:h16

line 15: " set guifont=Sudo\ Var:h18

line 16: " set guifont=Envy\ Code\ R:h14

line 17: 

line 18: " set transparency=10

line 19: " set blurradius=90

finished sourcing ~/.config/vim/gvimrc
could not source ".gvimrc"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.png"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.png"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.bmp"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.ico"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.icns"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.jpeg"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.jpg"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.heic"
Searching for "bitmaps/NSTouchBarEnterFullScreenTemplate.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users
Searching for "/Users/piotr/.config/vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
not found in 'runtimepath': "bitmaps/NSTouchBarEnterFullScreenTemplate.webp"
Searching for "bitmaps/EnterFullScreen.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.png"
not found in 'runtimepath': "bitmaps/EnterFullScreen.png"
Searching for "bitmaps/EnterFullScreen.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.bmp"
not found in 'runtimepath': "bitmaps/EnterFullScreen.bmp"
Searching for "bitmaps/EnterFullScreen.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.ico"
not found in 'runtimepath': "bitmaps/EnterFullScreen.ico"
Searching for "bitmaps/EnterFullScreen.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.icns"
not found in 'runtimepath': "bitmaps/EnterFullScreen.icns"
Searching for "bitmaps/EnterFullScreen.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.jpeg"
not found in 'runtimepath': "bitmaps/EnterFullScreen.jpeg"
Searching for "bitmaps/EnterFullScreen.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.jpg"
not found in 'runtimepath': "bitmaps/EnterFullScreen.jpg"
Searching for "bitmaps/EnterFullScreen.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.heic"
not found in 'runtimepath': "bitmaps/EnterFullScreen.heic"
Searching for "bitmaps/EnterFullScreen.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim
Searching for "/Users/piotr/.config/vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/EnterFullScreen.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/EnterFullScreen.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/EnterFullScreen.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/EnterFullScreen.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/EnterFullScreen.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/EnterFullScreen.webp"
not found in 'runtimepath': "bitmaps/EnterFullScreen.webp"
Searching for "bitmaps/-characterpicker-.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vi
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.png"
not found in 'runtimepath': "bitmaps/-characterpicker-.png"
Searching for "bitmaps/-characterpicker-.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vi
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.bmp"
not found in 'runtimepath': "bitmaps/-characterpicker-.bmp"
Searching for "bitmaps/-characterpicker-.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vi
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.ico"
not found in 'runtimepath': "bitmaps/-characterpicker-.ico"
Searching for "bitmaps/-characterpicker-.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/v
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.icns"
not found in 'runtimepath': "bitmaps/-characterpicker-.icns"
Searching for "bitmaps/-characterpicker-.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/v
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.jpeg"
not found in 'runtimepath': "bitmaps/-characterpicker-.jpeg"
Searching for "bitmaps/-characterpicker-.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vi
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.jpg"
not found in 'runtimepath': "bitmaps/-characterpicker-.jpg"
Searching for "bitmaps/-characterpicker-.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/v
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.heic"
not found in 'runtimepath': "bitmaps/-characterpicker-.heic"
Searching for "bitmaps/-characterpicker-.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/v
Searching for "/Users/piotr/.config/vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-characterpicker-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-characterpicker-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-characterpicker-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-characterpicker-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-characterpicker-.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-characterpicker-.webp"
not found in 'runtimepath': "bitmaps/-characterpicker-.webp"
Searching for "bitmaps/Open.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.png"
not found in 'runtimepath': "bitmaps/Open.png"
Searching for "bitmaps/Open.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.bmp"
not found in 'runtimepath': "bitmaps/Open.bmp"
Searching for "bitmaps/Open.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.ico"
not found in 'runtimepath': "bitmaps/Open.ico"
Searching for "bitmaps/Open.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.icns"
not found in 'runtimepath': "bitmaps/Open.icns"
Searching for "bitmaps/Open.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.jpeg"
not found in 'runtimepath': "bitmaps/Open.jpeg"
Searching for "bitmaps/Open.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.jpg"
not found in 'runtimepath': "bitmaps/Open.jpg"
Searching for "bitmaps/Open.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.heic"
not found in 'runtimepath': "bitmaps/Open.heic"
Searching for "bitmaps/Open.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Open.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Open.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Open.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Open.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Open.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Open.webp"
not found in 'runtimepath': "bitmaps/Open.webp"
Searching for "bitmaps/Save.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.png"
not found in 'runtimepath': "bitmaps/Save.png"
Searching for "bitmaps/Save.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.bmp"
not found in 'runtimepath': "bitmaps/Save.bmp"
Searching for "bitmaps/Save.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.ico"
not found in 'runtimepath': "bitmaps/Save.ico"
Searching for "bitmaps/Save.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.icns"
not found in 'runtimepath': "bitmaps/Save.icns"
Searching for "bitmaps/Save.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.jpeg"
not found in 'runtimepath': "bitmaps/Save.jpeg"
Searching for "bitmaps/Save.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.jpg"
not found in 'runtimepath': "bitmaps/Save.jpg"
Searching for "bitmaps/Save.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.heic"
not found in 'runtimepath': "bitmaps/Save.heic"
Searching for "bitmaps/Save.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Save.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Save.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Save.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Save.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Save.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Save.webp"
not found in 'runtimepath': "bitmaps/Save.webp"
Searching for "bitmaps/SaveAll.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.png"
not found in 'runtimepath': "bitmaps/SaveAll.png"
Searching for "bitmaps/SaveAll.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.bmp"
not found in 'runtimepath': "bitmaps/SaveAll.bmp"
Searching for "bitmaps/SaveAll.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.ico"
not found in 'runtimepath': "bitmaps/SaveAll.ico"
Searching for "bitmaps/SaveAll.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.icns"
not found in 'runtimepath': "bitmaps/SaveAll.icns"
Searching for "bitmaps/SaveAll.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.jpeg"
not found in 'runtimepath': "bitmaps/SaveAll.jpeg"
Searching for "bitmaps/SaveAll.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.jpg"
not found in 'runtimepath': "bitmaps/SaveAll.jpg"
Searching for "bitmaps/SaveAll.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.heic"
not found in 'runtimepath': "bitmaps/SaveAll.heic"
Searching for "bitmaps/SaveAll.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveAll.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveAll.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveAll.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveAll.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveAll.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveAll.webp"
not found in 'runtimepath': "bitmaps/SaveAll.webp"
Searching for "bitmaps/Print.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.png"
not found in 'runtimepath': "bitmaps/Print.png"
Searching for "bitmaps/Print.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.bmp"
not found in 'runtimepath': "bitmaps/Print.bmp"
Searching for "bitmaps/Print.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.ico"
not found in 'runtimepath': "bitmaps/Print.ico"
Searching for "bitmaps/Print.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.icns"
not found in 'runtimepath': "bitmaps/Print.icns"
Searching for "bitmaps/Print.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.jpeg"
not found in 'runtimepath': "bitmaps/Print.jpeg"
Searching for "bitmaps/Print.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.jpg"
not found in 'runtimepath': "bitmaps/Print.jpg"
Searching for "bitmaps/Print.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.heic"
not found in 'runtimepath': "bitmaps/Print.heic"
Searching for "bitmaps/Print.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Print.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Print.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Print.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Print.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Print.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Print.webp"
not found in 'runtimepath': "bitmaps/Print.webp"
Searching for "bitmaps/-sep1-.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.png"
not found in 'runtimepath': "bitmaps/-sep1-.png"
Searching for "bitmaps/-sep1-.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.bmp"
not found in 'runtimepath': "bitmaps/-sep1-.bmp"
Searching for "bitmaps/-sep1-.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.ico"
not found in 'runtimepath': "bitmaps/-sep1-.ico"
Searching for "bitmaps/-sep1-.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.icns"
not found in 'runtimepath': "bitmaps/-sep1-.icns"
Searching for "bitmaps/-sep1-.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.jpeg"
not found in 'runtimepath': "bitmaps/-sep1-.jpeg"
Searching for "bitmaps/-sep1-.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.jpg"
not found in 'runtimepath': "bitmaps/-sep1-.jpg"
Searching for "bitmaps/-sep1-.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.heic"
not found in 'runtimepath': "bitmaps/-sep1-.heic"
Searching for "bitmaps/-sep1-.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep1-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep1-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep1-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep1-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep1-.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep1-.webp"
not found in 'runtimepath': "bitmaps/-sep1-.webp"
Searching for "bitmaps/Undo.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.png"
not found in 'runtimepath': "bitmaps/Undo.png"
Searching for "bitmaps/Undo.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.bmp"
not found in 'runtimepath': "bitmaps/Undo.bmp"
Searching for "bitmaps/Undo.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.ico"
not found in 'runtimepath': "bitmaps/Undo.ico"
Searching for "bitmaps/Undo.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.icns"
not found in 'runtimepath': "bitmaps/Undo.icns"
Searching for "bitmaps/Undo.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.jpeg"
not found in 'runtimepath': "bitmaps/Undo.jpeg"
Searching for "bitmaps/Undo.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.jpg"
not found in 'runtimepath': "bitmaps/Undo.jpg"
Searching for "bitmaps/Undo.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.heic"
not found in 'runtimepath': "bitmaps/Undo.heic"
Searching for "bitmaps/Undo.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Undo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Undo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Undo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Undo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Undo.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Undo.webp"
not found in 'runtimepath': "bitmaps/Undo.webp"
Searching for "bitmaps/Redo.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.png"
not found in 'runtimepath': "bitmaps/Redo.png"
Searching for "bitmaps/Redo.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.bmp"
not found in 'runtimepath': "bitmaps/Redo.bmp"
Searching for "bitmaps/Redo.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.ico"
not found in 'runtimepath': "bitmaps/Redo.ico"
Searching for "bitmaps/Redo.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.icns"
not found in 'runtimepath': "bitmaps/Redo.icns"
Searching for "bitmaps/Redo.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.jpeg"
not found in 'runtimepath': "bitmaps/Redo.jpeg"
Searching for "bitmaps/Redo.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.jpg"
not found in 'runtimepath': "bitmaps/Redo.jpg"
Searching for "bitmaps/Redo.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.heic"
not found in 'runtimepath': "bitmaps/Redo.heic"
Searching for "bitmaps/Redo.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Redo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Redo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Redo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Redo.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Redo.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Redo.webp"
not found in 'runtimepath': "bitmaps/Redo.webp"
Searching for "bitmaps/-sep2-.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.png"
not found in 'runtimepath': "bitmaps/-sep2-.png"
Searching for "bitmaps/-sep2-.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.bmp"
not found in 'runtimepath': "bitmaps/-sep2-.bmp"
Searching for "bitmaps/-sep2-.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.ico"
not found in 'runtimepath': "bitmaps/-sep2-.ico"
Searching for "bitmaps/-sep2-.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.icns"
not found in 'runtimepath': "bitmaps/-sep2-.icns"
Searching for "bitmaps/-sep2-.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.jpeg"
not found in 'runtimepath': "bitmaps/-sep2-.jpeg"
Searching for "bitmaps/-sep2-.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.jpg"
not found in 'runtimepath': "bitmaps/-sep2-.jpg"
Searching for "bitmaps/-sep2-.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.heic"
not found in 'runtimepath': "bitmaps/-sep2-.heic"
Searching for "bitmaps/-sep2-.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep2-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep2-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep2-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep2-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep2-.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep2-.webp"
not found in 'runtimepath': "bitmaps/-sep2-.webp"
Searching for "bitmaps/Cut.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.png"
not found in 'runtimepath': "bitmaps/Cut.png"
Searching for "bitmaps/Cut.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.bmp"
not found in 'runtimepath': "bitmaps/Cut.bmp"
Searching for "bitmaps/Cut.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.ico"
not found in 'runtimepath': "bitmaps/Cut.ico"
Searching for "bitmaps/Cut.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.icns"
not found in 'runtimepath': "bitmaps/Cut.icns"
Searching for "bitmaps/Cut.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.jpeg"
not found in 'runtimepath': "bitmaps/Cut.jpeg"
Searching for "bitmaps/Cut.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugins
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.jpg"
not found in 'runtimepath': "bitmaps/Cut.jpg"
Searching for "bitmaps/Cut.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.heic"
not found in 'runtimepath': "bitmaps/Cut.heic"
Searching for "bitmaps/Cut.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Cut.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Cut.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Cut.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Cut.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Cut.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Cut.webp"
not found in 'runtimepath': "bitmaps/Cut.webp"
Searching for "bitmaps/Copy.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.png"
not found in 'runtimepath': "bitmaps/Copy.png"
Searching for "bitmaps/Copy.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.bmp"
not found in 'runtimepath': "bitmaps/Copy.bmp"
Searching for "bitmaps/Copy.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.ico"
not found in 'runtimepath': "bitmaps/Copy.ico"
Searching for "bitmaps/Copy.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.icns"
not found in 'runtimepath': "bitmaps/Copy.icns"
Searching for "bitmaps/Copy.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.jpeg"
not found in 'runtimepath': "bitmaps/Copy.jpeg"
Searching for "bitmaps/Copy.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.jpg"
not found in 'runtimepath': "bitmaps/Copy.jpg"
Searching for "bitmaps/Copy.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.heic"
not found in 'runtimepath': "bitmaps/Copy.heic"
Searching for "bitmaps/Copy.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Copy.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Copy.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Copy.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Copy.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Copy.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Copy.webp"
not found in 'runtimepath': "bitmaps/Copy.webp"
Searching for "bitmaps/Paste.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.png"
not found in 'runtimepath': "bitmaps/Paste.png"
Searching for "bitmaps/Paste.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.bmp"
not found in 'runtimepath': "bitmaps/Paste.bmp"
Searching for "bitmaps/Paste.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.ico"
not found in 'runtimepath': "bitmaps/Paste.ico"
Searching for "bitmaps/Paste.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.icns"
not found in 'runtimepath': "bitmaps/Paste.icns"
Searching for "bitmaps/Paste.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.jpeg"
not found in 'runtimepath': "bitmaps/Paste.jpeg"
Searching for "bitmaps/Paste.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.jpg"
not found in 'runtimepath': "bitmaps/Paste.jpg"
Searching for "bitmaps/Paste.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.heic"
not found in 'runtimepath': "bitmaps/Paste.heic"
Searching for "bitmaps/Paste.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Paste.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Paste.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Paste.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Paste.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Paste.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Paste.webp"
not found in 'runtimepath': "bitmaps/Paste.webp"
Searching for "bitmaps/LoadSesn.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.png"
not found in 'runtimepath': "bitmaps/LoadSesn.png"
Searching for "bitmaps/LoadSesn.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.bmp"
not found in 'runtimepath': "bitmaps/LoadSesn.bmp"
Searching for "bitmaps/LoadSesn.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.ico"
not found in 'runtimepath': "bitmaps/LoadSesn.ico"
Searching for "bitmaps/LoadSesn.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.icns"
not found in 'runtimepath': "bitmaps/LoadSesn.icns"
Searching for "bitmaps/LoadSesn.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.jpeg"
not found in 'runtimepath': "bitmaps/LoadSesn.jpeg"
Searching for "bitmaps/LoadSesn.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.jpg"
not found in 'runtimepath': "bitmaps/LoadSesn.jpg"
Searching for "bitmaps/LoadSesn.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.heic"
not found in 'runtimepath': "bitmaps/LoadSesn.heic"
Searching for "bitmaps/LoadSesn.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/LoadSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/LoadSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/LoadSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/LoadSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/LoadSesn.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/LoadSesn.webp"
not found in 'runtimepath': "bitmaps/LoadSesn.webp"
Searching for "bitmaps/SaveSesn.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.png"
not found in 'runtimepath': "bitmaps/SaveSesn.png"
Searching for "bitmaps/SaveSesn.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.bmp"
not found in 'runtimepath': "bitmaps/SaveSesn.bmp"
Searching for "bitmaps/SaveSesn.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.ico"
not found in 'runtimepath': "bitmaps/SaveSesn.ico"
Searching for "bitmaps/SaveSesn.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.icns"
not found in 'runtimepath': "bitmaps/SaveSesn.icns"
Searching for "bitmaps/SaveSesn.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.jpeg"
not found in 'runtimepath': "bitmaps/SaveSesn.jpeg"
Searching for "bitmaps/SaveSesn.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/pl
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.jpg"
not found in 'runtimepath': "bitmaps/SaveSesn.jpg"
Searching for "bitmaps/SaveSesn.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.heic"
not found in 'runtimepath': "bitmaps/SaveSesn.heic"
Searching for "bitmaps/SaveSesn.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/SaveSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/SaveSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/SaveSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/SaveSesn.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/SaveSesn.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/SaveSesn.webp"
not found in 'runtimepath': "bitmaps/SaveSesn.webp"
Searching for "bitmaps/RunScript.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.png"
not found in 'runtimepath': "bitmaps/RunScript.png"
Searching for "bitmaps/RunScript.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.bmp"
not found in 'runtimepath': "bitmaps/RunScript.bmp"
Searching for "bitmaps/RunScript.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.ico"
not found in 'runtimepath': "bitmaps/RunScript.ico"
Searching for "bitmaps/RunScript.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.icns"
not found in 'runtimepath': "bitmaps/RunScript.icns"
Searching for "bitmaps/RunScript.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.jpeg"
not found in 'runtimepath': "bitmaps/RunScript.jpeg"
Searching for "bitmaps/RunScript.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/p
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.jpg"
not found in 'runtimepath': "bitmaps/RunScript.jpg"
Searching for "bitmaps/RunScript.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.heic"
not found in 'runtimepath': "bitmaps/RunScript.heic"
Searching for "bitmaps/RunScript.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/
Searching for "/Users/piotr/.config/vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/RunScript.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/RunScript.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/RunScript.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/RunScript.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/RunScript.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/RunScript.webp"
not found in 'runtimepath': "bitmaps/RunScript.webp"
Searching for "bitmaps/Make.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.png"
not found in 'runtimepath': "bitmaps/Make.png"
Searching for "bitmaps/Make.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.bmp"
not found in 'runtimepath': "bitmaps/Make.bmp"
Searching for "bitmaps/Make.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.ico"
not found in 'runtimepath': "bitmaps/Make.ico"
Searching for "bitmaps/Make.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.icns"
not found in 'runtimepath': "bitmaps/Make.icns"
Searching for "bitmaps/Make.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.jpeg"
not found in 'runtimepath': "bitmaps/Make.jpeg"
Searching for "bitmaps/Make.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.jpg"
not found in 'runtimepath': "bitmaps/Make.jpg"
Searching for "bitmaps/Make.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.heic"
not found in 'runtimepath': "bitmaps/Make.heic"
Searching for "bitmaps/Make.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Make.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Make.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Make.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Make.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Make.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Make.webp"
not found in 'runtimepath': "bitmaps/Make.webp"
Searching for "bitmaps/-sep7-.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.png"
not found in 'runtimepath': "bitmaps/-sep7-.png"
Searching for "bitmaps/-sep7-.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.bmp"
not found in 'runtimepath': "bitmaps/-sep7-.bmp"
Searching for "bitmaps/-sep7-.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.ico"
not found in 'runtimepath': "bitmaps/-sep7-.ico"
Searching for "bitmaps/-sep7-.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.icns"
not found in 'runtimepath': "bitmaps/-sep7-.icns"
Searching for "bitmaps/-sep7-.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.jpeg"
not found in 'runtimepath': "bitmaps/-sep7-.jpeg"
Searching for "bitmaps/-sep7-.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plug
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.jpg"
not found in 'runtimepath': "bitmaps/-sep7-.jpg"
Searching for "bitmaps/-sep7-.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.heic"
not found in 'runtimepath': "bitmaps/-sep7-.heic"
Searching for "bitmaps/-sep7-.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plu
Searching for "/Users/piotr/.config/vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/-sep7-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/-sep7-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/-sep7-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/-sep7-.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/-sep7-.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/-sep7-.webp"
not found in 'runtimepath': "bitmaps/-sep7-.webp"
Searching for "bitmaps/Help.png" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.png"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.png"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.png"
not found in 'runtimepath': "bitmaps/Help.png"
Searching for "bitmaps/Help.bmp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.bmp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.bmp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.bmp"
not found in 'runtimepath': "bitmaps/Help.bmp"
Searching for "bitmaps/Help.ico" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.ico"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.ico"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.ico"
not found in 'runtimepath': "bitmaps/Help.ico"
Searching for "bitmaps/Help.icns" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.icns"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.icns"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.icns"
not found in 'runtimepath': "bitmaps/Help.icns"
Searching for "bitmaps/Help.jpeg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.jpeg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.jpeg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.jpeg"
not found in 'runtimepath': "bitmaps/Help.jpeg"
Searching for "bitmaps/Help.jpg" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugin
Searching for "/Users/piotr/.config/vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.jpg"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.jpg"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.jpg"
not found in 'runtimepath': "bitmaps/Help.jpg"
Searching for "bitmaps/Help.heic" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.heic"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.heic"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.heic"
not found in 'runtimepath': "bitmaps/Help.heic"
Searching for "bitmaps/Help.webp" in "/Users/piotr/.config/vim,/Users/piotr/.config/vim/pack/syntax/start/zig.vim,/Users/piotr/.config/vim/pack/syntax/start/yats.vim,/Users/piotr/.config/vim/pack/syntax/start/vim-slim,/Users/piotr/.config/vim/pack/syntax/start/vim-ruby,/Users/piotr/.config/vim/pack/syntax/start/vim-rbs,/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars,/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js,/Users/piotr/.config/vim/pack/syntax/start/vim-javascript,/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs,/Users/piotr/.config/vim/pack/syntax/start/swift.vim,/Users/piotr/.config/vim/pack/syntax/start/nim.vim,/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim,/Users/piotr/.config/vim/pack/syntax/start/kdl.vim,/Users/piotr/.config/vim/pack/plugins/start/vimbits,/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar,/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists,/Users/piotr/.config/vim/pack/plugins/start/vim-test,/Users/piotr/.config/vim/pack/plugi
Searching for "/Users/piotr/.config/vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/zig.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/yats.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-slim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ruby/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-rbs/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mustache-handlebars/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-ember-hbs/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/swift.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/nim.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/modulemap-vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/kdl.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vimbits/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-vinegar/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-todo-lists/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-test/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-surround/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sleuth/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-sensible/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rhubarb/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rake/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-projectionist/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-hexokinase/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-healthcheck/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gutentags/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-gitgutter/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-git/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-fugitive/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-eunuch/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-commentary/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-closetag/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/tagalong.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/lightline.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/FastFold/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/auto-pairs/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/colorschemes/opt/nightfox.nvim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/scope.vim/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimsuggest/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vimcomplete/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/friendly-snippets/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rooter/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/lsp/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/ale/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/matchit/bitmaps/Help.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/bitmaps/Help.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/bitmaps/Help.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/runtime/pack/dist/opt/matchit/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-mdx-js/after/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/syntax/start/vim-javascript/after/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/start/vim-rails/after/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/pack/plugins/opt/vim-vsnip-integ/after/bitmaps/Help.webp"
Searching for "/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after/bitmaps/Help.webp"
Searching for "/Users/piotr/.config/vim/after/bitmaps/Help.webp"
not found in 'runtimepath': "bitmaps/Help.webp"

